/*
 * AddUser.cpp
 *
 *  Created on: 2016-7-1
 *      Author: Ralf
 */

#include "LogicInc.h"
#include <math.h>
#include <iostream>
#include <fstream>














































#define F_NUM 935
const char* F_NAME[F_NUM] = {"阿博特","阿贝","亚伯拉罕","艾奇逊","阿克曼","亚当","亚当斯","艾迪生","阿狄森","艾狄生","阿德拉","阿德莱德","阿道夫","阿格尼丝","艾伯特","奥尔科特","奥尔丁顿","奥尔德里奇","亚历克","亚历山大","阿尔弗列德","艾尔弗雷德","艾丽丝","阿丽丝","阿利克","艾尔索普","阿利","阿米利亚","安德森","安德鲁","安浩","安娜","安妮","安东尼","安托瓦妮特","安东尼娅","阿拉贝拉","阿奇博尔德","阿姆斯特朗","阿诺德","阿瑟","阿特利","奥古斯丁","奥古斯塔斯","奥斯汀","奥斯汀","白壁德","巴比","巴比特","巴赫","培根","鲍德温","巴纳德","巴尼","巴雷特","巴雷特","巴里","巴特","巴塞洛缪","巴特利特","巴顿","拜耳","鲍尔","蒲福","比尔德","博福特","比彻","贝克","贝基","比尔博姆","贝尔","贝拉米","贝尔","贝洛克","本","本尼迪克特","本杰明","贝内特","本森","本瑟姆","伯克利","边沁","贝克莱","伯纳尔","伯纳德","伯纳尔德","伯特","伯莎","伯蒂","伯特伦","贝色麦","贝丝","贝西墨","贝西","比顿","白求恩","贝齐","贝蒂","比尔","比利","比勒尔","布莱克","布莱克","布卢默","布洛姆菲尔德","布龙菲尔德","布卢尔","布劳","布卢姆","鲍勃","博比","博斯韦尔","鲍恩","波义耳","鲍曼","波伊尔","布拉德利","布雷","布鲁斯特","布里奇斯","布赖特","布罗德","白朗蒂","勃朗特","布鲁克","布朗","布朗","布朗宁","勃朗宁","布鲁斯","布鲁诺","布赖恩","布赖斯","巴克","巴克耳","布尔沃","布尔韦尔","布尼安","伯克","琼斯","伯恩","伯恩斯","彭斯","巴特勒","勃特勒","拜伦","卡拉米","坎普","凯雷","凯里","卡尔","卡莱尔","卡门","卡内基","卡罗琳","卡彭特","查理","卡丽","嘉利","卡罗尔","卡特","凯瑟琳","塞西利亚","张伯伦","卓别麟","查普林","查普曼","查尔斯","查利","夏洛特","夏洛蒂","查理","查尔斯","乔叟","切斯特顿","蔡尔德","蔡尔德","克赖斯特","克里琴斯","克里斯蒂安娜","克里斯蒂","克里斯托弗","克里斯蒂","丘奇","丘吉尔","锡西","克拉彭","克拉拉","克莱尔","克拉丽莎","克拉克","克莱门斯","克里曼斯","克莱门特","科克尔","科菲","科尔克拉夫","科尔里奇","柯勒律治","柯林斯","康芒斯","科南","康格里夫","康尼","康纳","康拉德","康斯坦斯","库克","库珀","科波菲尔","柯顿","科弗代尔","考珀","克雷吉","克兰","克赖顿","克罗夫特","克罗夫茨","克伦威尔","克罗宁","克洛宁","坎伯兰","柯姆","戴西","道尔顿","丹","丹尼尔","丹聂耳","丹尼尔","达尔文","戴维","戴维","迪福","迪莉娅","丹尼斯","杜瓦","昆西","迪尤尔","杜威","迪克","狄更斯","迪肯斯","迪基","狄龙","多宾","多德","道尔蒂","陶赫蒂","多利","多恩","多拉","陶丽思","多丽丝","多萝西娅","多萝西","道格拉斯","道尔","多伊尔","德莱登","德莱塞","屈莱顿","杜波依斯","杜勒斯","邓巴","邓肯","邓洛普","杜邦","杜德","达特","埃迪","艾登","埃奇沃思","伊迪","爱迪生","伊迪丝","埃德蒙","爱德华","埃菲","艾泼斯坦","艾森豪威尔","埃兰娜","埃利诺","伊利克特拉","埃利诺","爱略特","埃利奥特","艾略特","伊丽莎白","埃拉","埃伦","艾利斯","埃尔西","埃墨森","埃米莉","艾米丽","埃玛","埃米","欧内斯特","埃丝特","尤金","尤金","尤菲米娅","伊娃","埃文","埃文思","伊夫","埃维莉娜","伊夫琳","伊齐基尔","范妮","法拉第","法斯特","福克纳","费利克斯","费尔顿","费迪南德","福开森","弗格森","弗格森","菲尔德","菲尔丁","芬恩","菲茨杰拉德","弗劳尔","弗林","弗琳","福特","福斯特","福斯特","福勒","福克斯","弗朗西丝","弗朗西斯","法兰西斯","弗兰克","富兰克林","弗雷德","弗雷德里克","弗里曼","芬克","加布里埃尔","加布尔雷思","加拉赫","盖洛普","高尔斯沃西","加西亚","加登","加德纳","加斯克尔","杰弗里","乔迪","乔治","吉本","吉布森","吉尔伯特","詹理斯","贾尔斯","吉尔","季星","格拉德斯通","格莱斯顿","戈德温","葛德文","戈尔德","高尔德","戈德史密斯","哥尔斯密","戈斯","格雷斯","格雷西","格雷汉姆","格兰汉","格雷厄姆","格兰特","格兰瑟姆","格雷","格林","格雷戈里","格雷沙姆","格雷","格罗特","冈特","冈瑟","格斯","盖伊","哈巴卡克","哈该","哈尔","哈利法克斯","哈密尔敦","汉森尔顿","哈姆雷特","汉森","汉森","汉萨","哈代哈迪","哈罗德","哈珀","哈里曼","哈林顿","哈灵顿","哈里森","哈罗德","哈里","哈特","哈特","哈维","霍索恩","海登","海伍德","黑兹利特","赫士列特","赫斯特","娜","赫莉","海明威","亨利","亨里埃塔","赫伯特","赫蒂","休利特","希克斯","希尔","霍布斯","霍布森","霍奇","霍奇森","霍姆斯","福尔摩斯","霍尔特","胡德","胡佛","霍普","霍普斯","霍普金","霍勒斯","贺拉斯","霍勒斯","贺拉斯","霍雷肖","霍恩比","霍齐亚","豪斯","豪斯曼","休斯敦","霍华德","豪厄斯","豪厄尔","霍伊尔","哈伯德","赫德森","哈金斯","休","休士","休斯","休姆","休谟","汉弗莱","亨廷顿","赫特","赫胥黎","赫克利斯","英格索尔","欧文","艾萨克","伊莎贝尔","艾塞亚","伊凡","杰克","杰克逊","雅各布","詹姆斯","简","贾斯帕","杰姆斯","琼","杰斐逊","杰弗逊","詹斯","詹金","詹宁斯","珍妮","杰里迈亚","杰里米","杰罗姆","杰里","杰西","吉姆","杰米","琼","乔布","乔","乔尔","约翰","约翰尼","约翰逊","约翰斯顿","乔纳","乔纳森","琼斯","琼森","乔丹","约瑟夫","乔希","乔舒亚","焦尔","乔伊斯","贾德","朱迪思","贾德森","朱莉娅","朱利安","朱莉安娜","朱丽叶","朱利叶斯","凯特","凯瑟琳","凯瑟琳","卡特琳","基茨","凯利","凯洛格","凯尔森","凯尔文","凯南","肯尼迪","凯佩尔","凯恩斯","金斯利","基普林","基特","基托","基蒂","拉姆","兰姆","朗伯","兰伯特","兰斯洛特","兰登","拉金","拉铁摩尔","劳里","劳","劳伦斯","劳逊","劳森","李科克","利科克","李","利","莱顿","莉娜","伦纳德","利奥波德","卢","刘易斯","刘易士","莉莉","林肯","林德伯格","林塞","利齐","劳埃德","洛克","伦敦","朗费罗","朗曼","路易","路易斯","路易莎","路易丝","罗厄尔","罗威尔","卢卡斯","露西亚","卢修斯","露西","卢克","利利","林奇","林德","李顿","麦克亚当","麦克阿瑟","麦考利","利顿","麦克唐纳","麦金托什","麦克弗森","麦克米伦","麦克菲尔逊","马奇","玛吉","玛拉基","马伦","马洛里","马尔茨","马尔萨斯","马尔兹","曼斯菲尔德","马塞勒斯","马库斯","玛格丽塔","马杰里","玛丽亚","马里恩","马乔里","马克","马洛","马南","马歇尔","马莎","马丁","玛丽","梅斯菲尔德","马蒂尔达","马修","莫德","莫姆","莫里斯","马克斯","马克斯韦尔","梅","麦卡锡","麦克唐纳","梅格","梅尔维尔","梅雷迪斯","梅瑞狄斯","迈卡","迈克尔","迈克尔孙","米切尔森","密德尔顿","迈克","米尔","米尔恩","米尔顿","明妮","莫尔","蒙德","门罗","蒙哥马利","穆尔","莫尔","摩根","摩利","莫里斯","莫里森","莫尔斯","摩顿","莫尔顿","摩西","莫特利","莫尔顿","默里","内厄姆","南希","纳撒尼尔","尼达姆","尼赫迈亚","内尔","内利","奈尔孙","纽曼","牛顿","尼古拉斯","尼科斯","尼科尔","尼克","尼科尔","尼克松","诺厄","诺埃尔","诺拉","娜拉","诺里斯","诺思","诺顿","诺伊斯","奥巴代亚","奥卡西","奥凯西","奥卡姆","奥康纳","奥利弗","奥尼尔","奥尼恩斯","奥兰多","奥斯卡","欧文","帕尔默","潘西","帕克","帕特里奇","佩德","佩特","佩兴斯","帕特里克","保罗","皮科尔","皮尔逊","佩格","佩吉","佩恩","皮普斯","佩皮斯","珀金","彼得","佩蒂","菲利蒙","菲利普","皮尔斯","皮古","庇古","皮特曼","波","波利特","波利","波普","蒲柏","庞德","鲍威尔","普赖斯","普里斯特利","普里斯特莱","普里特","帕利策尔","普里策","普兰","普尔曼","奎勒","拉格伦","罗利","拉尔夫","拉曼","冉斯登","拉姆斯登","拉菲尔","拉菲尔","瑞利","雷利","雷蒙德","里德","丽贝卡","里德","雷诺兹","罗兹","里斯","理嘉图","李嘉图","理查","理查兹","理查森","罗布","罗宾斯","罗伯特","罗伯逊","罗宾","罗宾森","罗宾逊","洛克菲勒","罗吉尔","罗杰","罗兰","罗密欧","罗斯福","罗莎","罗塞蒂","罗瑟琳","罗斯","罗塞蒂","罗赛蒂","罗伊","鲁道夫","腊斯克","拉斯金","罗斯金","罗素","拉塞尔","鲁思","卢瑟福","拉瑟福德","塞恩思伯里","森次巴立","索尔兹伯里","萨莉","萨洛美","萨姆","萨姆森","塞缪尔","桑德","桑迪","萨皮尔","萨拉","萨洛扬","萨罗扬","沙逊","索尔","索耶","萨克斯顿","斯科特","司各脱","斯克利普斯","西尼尔","瑟维斯","莎士比亚","夏普","肖","雪莱","谢利","谢里登","谢立丹","舍伍德","悉尼","锡特尼","赛拉斯","西蒙","辛普森","辛克莱","史沫特莱","斯梅德利","史密斯","斯莫利特","斯摩莱特","斯诺","萨默菲尔德","索莫费尔德","索菲娅","索菲","索锡","骚塞","斯潘塞","斯宾塞","斯彭德","斯潘塞","斯宾塞","斯普林霍尔","斯蒂尔","斯梯尔","斯坦贝克","斯坦培克","斯特拉","斯蒂芬","史蒂芬","斯蒂芬斯","史蒂文森","史迪威","斯通","斯托","斯特雷奇","斯特朗","司徒雷登","斯图尔特","萨里","萨利","苏珊","苏珊娜","斯威特","斯维夫特","斯威夫特","斯温伯恩","史文朋","西蒙斯","泰特","泰勒","特德","坦普尔","坦尼森","丁尼生","特里","撒克里","西奥多","特里萨","托马斯","汤普森","汤姆森","索罗","梭洛","桑代克","蒂莫西","泰特斯","托拜厄斯","托比","托兰","汤姆","汤姆林森","汤米","托尼","图尔斯","陶特","托因比","特雷西","特里维康","特罗洛普","杜鲁门","特纳","塔特尔","吐温","特温","泰勒","尤利塞斯","瓦伦丁","范","伏恩","维布伦","凡勃伦","维克托","文森特","瓦奥莱特","弗吉尼亚","沃格特","瓦格纳","沃克","沃克利","华莱土","沃利斯","沃波尔","沃尔什","沃尔特","沃尔顿","沃德","沃纳","沃伦","威尔科特斯","魏尔德","王尔德","怀尔德","威廉明娜","威尔","威拉德","威廉","威尔莫特","威尔逊","温莎"};
#define S_NUM 935
const char* S_NAME[S_NUM] = {"埃达","爱得拉","阿芙拉","阿加莎","爱葛妮丝","亚莉克希亚","艾丽斯","爱玛","奥尔瑟雅","阿尔娃","阿蜜莉雅","艾咪","阿娜丝塔","安德烈亚","安妮","安娜","安纳贝尔","安东妮儿","艾谱莉","爱勒贝拉","艾琳娜","艾丝翠得","亚特兰特","阿西娜","奥德丽","奥劳拉","芭芭拉","碧翠丝","贝琳达","贝拉","柏妮丝","柏莎","百丽儿","贝丝","贝芙","布兰琪","卡米拉","坎蒂丝","卡拉","卡萝","卡罗琳","凯瑟琳","凯丝","塞西莉亚","夏洛特","绮莉","克洛怡","克莱儿","克莱拉","克莱曼婷","康斯坦丝","科拉","卡洛儿","可妮莉雅","黛西","黛儿","黛娜","黛芙妮","达莲娜","潼恩","黛碧","迪得莉","迪丽雅","丹尼丝","黛安娜","黛娜","唐娜","多拉","多琳","多莉丝","桃乐斯","尔莎","伊甸","伊迪丝","艾德文娜","艾琳","艾琳诺","伊丽莎白","埃拉","艾尔玛","爱尔莎","艾西","艾娃","埃米莉","埃玛","艾丽卡","艾丝特","尤多拉","尤妮斯","伊文捷琳","伊芙","伊夫林","梵妮","费怡","弗罗拉","弗罗伦丝","弗莉达","菲蕾德翠卡","嘉比里拉","姬玛","珍妮芙","姬儿","格拉迪斯","葛瑞丝","葛莉谢尔达","葛佳丝塔芙","关德琳","汉纳","哈莉特","赫瑟尔","赫蒂","海伦","海洛伊丝","希尔达","希拉瑞莉","汉妮","埃达","艾娜","英格丽","艾琳","爱莉丝","艾尔玛","伊莎蓓尔","艾薇","杰奎琳","婕咪","珍","珍妮特","珍尼丝","琴","姬儿","乔","琼","乔安娜","希伯来","贾思琳","乔蒂","约瑟芬","朱蒂斯","朱蒂","朱莉娅","朱莉","朱丽叶","朱恩","卡玛","凯伦","凯瑟琳","凯莉","金百莉","吉蒂","罗拉","罗瑞尔","罗伦","李","莉娜","利昂娜","雷思丽","列蒂西雅","李莉斯","丽莲","莉萨","莉斯","洛兰","琳","玛佩尔","玛琪","玛吉","梅蜜","曼蒂","玛西亚","玛丽安","玛格丽特","玛丽亚","马丽娜","玛乔丽","马莎","玛蒂娜","玛丽","穆琳","梅薇思","玛可欣","梅","蒙莉萨","玛希","玛莉提丝","梅莉","米歇尔","蜜雪莉雅","蜜妮安","穆得莉","米兰达","蜜莉恩","摩黛丝提","茉伊拉","茉莉","梦娜","莫妮卡","穆丽儿","玛瑞","玛拉","蜜尔娜","南希","娜娥迷","纳塔利","娜提雅维达","内丽","妮可","妮可拉","妮娜","诺拉","诺维雅","妮蒂亚","奥克塔薇尔","奥蒂列特","奥蒂莉亚","欧尔佳","奥丽芙","奥丽薇亚","奥菲莉亚","佩格","蓓姬","帕梅拉","潘多拉","派翠西亚","赛拉","佩儿","佩内洛普","潘妮","菲莉帕","菲碧","菲妮克丝","菲丽丝","珀莉","波比","普莉玛","普莉斯拉","昆娜","昆蒂娜","瑞琪儿","瑞伊","蕾娜塔","蕾妮","莉达","莉娃","罗莎琳德","罗丝","鲁思玛丽","罗克珊","露比","莎碧娜","莎莉","莎柏琳娜","莎洛姆","莎曼撤","珊多拉","仙蒂","莎拉","赛拉","莎芭丝提安","萨琳娜","沙伦","希拉","雪莉","希贝儿","西格莉德","席梦娜","苏菲亚","丝柏凌","丝特芬妮","苏珊","苏珊娜","苏西","苏珊","泰贝莎","泰蜜","特莉萨","泰丝","席拉","泰莉萨","蒂法尼","翠西","翠丝特","杜达","优拉","优娜","厄休拉","范伦汀娜","瓦勒莉","维拉","维娜","维拉妮卡","维多利亚","维基","维尔莉特","维吉妮亚","维达","维文","华莉丝","旺妲","温迪","温妮","赛薇亚拉","芝妮雅","依耶塔","耶达","依耶芙特","伊芳","莎拉","丽诺比丽","若伊","若娜","若拉","艾比盖","爱得莱德","爱尔柏塔","贝齐","贝蒂","比尤莱","布莱兹","布伦达","布里奇特","布鲁克","西莱斯特","夏洛特","谢里尔","克里斯廷","克莱儿","克莱拉","潼恩","德博拉","多洛雷斯","多明尼卡","多拉","桃乐斯","伊甸","伊迪丝","伊莲恩","艾琳诺","艾伦","艾尔玛","艾西","埃尔韦拉","费滋","弗朗西斯","弗莉达","菲蕾德翠卡","盖尔","乔治亚","杰拉尔丁","吉榭尔","葛罗瑞亚","格拉迪斯","葛莉谢尔达","葛佳丝塔芙","汉纳","海柔尔","赫瑟尔","赫达","海伦","海洛伊丝","胡尔达","埃达","艾尔玛","伊莎蓓尔","杰奎琳","乔","琼","希伯来","乔伊","乔伊斯","朱恩","卡玛","凯伦","凯伊","金百莉","吉蒂","克里斯廷","罗瑞尔","罗伦","李","盖尔","林赛","洛兰","璐易丝","莉迪亚","玛佩尔","玛德琳","穆得","塞尔特","麦格","梅根","玛希","玛莉提丝","纳塔利","诺玛","诺维雅","奥蒂列特","欧尔佳","普鲁登斯","普莉斯拉","波比","罗伯塔","罗克珊","鲁思","丝柏凌","斯泰西","丝特勒","托比","厄休拉","维隆卡","维多利亚","维基","维文","威尼弗雷德","桑席","耶达","依耶芙特","小乖","香远","丽影","莎","丫头","阿木","银铃","小芳","芳芳","小八","八酱","喵酱","小笨蛋","coco","燕尾蝶","姑娘","小妞","小小","玲玲","啊绫","美人","妖精","娜娜","小娜","莎","小鱼","潇雨","猫猫","玄子","国宝","熊猫","蕊","小蕊","七夜","笑笑","泪","星星","淑女","梦","小梦","晓梦","茉莉","牡丹","姗姗","小珊","天使","咪咪","蜜蜜","小蜜","小秘","莫莫","沫沫","么么","猫猫","美子","雯雯","小雯","晓雯","乐乐","小仙","仙儿","格格","小倩","倩倩","小茜","小倩","公主","小诺","小浩","多多","汐","羊羊","鬼鬼","小鬼","雪舞","琪琪","温柔","小姐","雪舞","心儿","欣儿","馨儿","小静","虹虹","傲雪","扶子","素素","雨滴","momo","诺拉","yoyo","小夏","小嫣","语嫣","天涯","阿欣","青青","大白","小白","白白","樱花","梧桐","月影","小花","小兔","蘑菇","小丫","晨曦","如梦","囡囡","海棠","婷婷","嘟嘟","兔兔","糖糖","三月","风铃","落落","薇薇安","罂粟","妮子","丹丹","一一","糖果","菲菲","羽毛","萝莉","落雪","花飞","暗香","夏天","小妖","淡淡","浅浅","小可","桃子","香香","小七","漫漫","华莉丝","旺妲","温妮","芝妮雅","伊芳","莎拉","若娜","席梦娜","苏菲亚","丝柏凌","苏珊","苏珊娜","苏西","苏珊","泰贝莎","泰蜜","特莉萨","泰丝","席拉","泰莉萨","蒂法尼","翠西","翠丝特","杜达","优拉","优娜","厄休拉","瓦勒莉","维娜","潘妮","菲莉帕","菲碧","菲丽丝","珀莉","波比","普莉玛","昆娜","昆蒂娜","瑞琪儿","瑞伊","蕾娜塔","蕾妮","莉达","莉娃","罗丝","罗克珊","露比","莎莉","莎洛姆","莎曼撤","珊多拉","仙蒂","莎拉","赛拉","萨琳娜","沙伦","希拉","雪莉","希贝儿","玛拉","蜜尔娜","南希","娜娥迷","纳塔利","内丽","妮可","妮可拉","妮娜","诺拉","诺维雅","妮蒂亚","欧尔佳","奥丽芙","佩格","蓓姬","帕梅拉","潘多拉","赛拉","佩儿","玛丽","穆琳","梅薇思","玛可欣","梅","蒙莉萨","玛希","梅莉","米歇尔","蜜妮安","穆得莉","米兰达","蜜莉恩","茉伊拉","茉莉","梦娜","莫妮卡","穆丽儿","朱蒂","朱莉娅","朱莉","朱丽叶","卡玛","凯伦","凯瑟琳","凯莉","金百莉","吉蒂","莉娜","丽莲","莉萨","莉斯","洛兰","琳","玛佩尔","玛琪","玛吉","梅蜜","曼蒂","玛西亚","玛丽安","玛丽亚","马丽娜","玛乔丽","马莎","玛蒂娜","汉纳","哈莉特","赫瑟尔","赫蒂","海伦","希尔达","汉妮","艾娜","艾琳","爱莉丝","艾尔玛","艾薇","杰奎琳","婕咪","珍","珍妮特","珍尼丝","琴","姬儿","乔","琼","阿芙拉","阿加莎","艾丽斯","爱玛","阿尔娃","艾咪","安妮","安娜","艾谱莉","艾琳娜","阿西娜","奥德丽","芭芭拉","贝琳达","贝拉","柏莎","百丽儿","贝丝","贝芙","布兰琪","卡米拉","坎蒂丝","卡拉","卡萝","卡罗琳","凯瑟琳","凯丝","夏洛特","绮莉","克洛怡","克莱儿","克莱拉","卡洛儿","黛西","黛儿","黛娜","黛芙妮","达莲娜","潼恩","黛碧","迪得莉","迪丽雅","丹尼丝","小强","头领","王子","骑士","帅帅","小帅","绅士","佐助","鸣人","卡卡西","一户","小墨","墨尘","小林","悟空","小傻瓜","小雨","小宇","小羽","小渔","小煜","潇雨","小瑜","晓宇","小禹","豆包","包子","豆浆","志伟","小辉","小二","瑞","小瑞","墨墨","阿修罗","匪徒","汏少爺","花满楼","榮耀","誑磝","輝煌","神气","先生","浪子","空空","卡卡","清景","晓林","庆","阿信","波特","草雉","巴神","笨笨","飞飞","浮云","仙人","东东","天宇","灰狼","光光","阳阳","冷风","竹子","牙牙","小神","泡泡","战神","使者","小龙","胖胖","闹闹","毛毛","大飞","皇帝","春哥","酷酷","圈圈","麦兜","熊熊","夜夜","麒麟","苍穹","阿萨","贝齐","贝蒂","布莱兹","布鲁克","夏洛特","谢里尔","克莱拉","德博拉","多拉","伊甸","伊迪丝","艾伦","费滋","弗莉达","盖尔","乔治亚","吉榭尔","汉纳","赫达","海伦","埃达","艾尔玛","希伯来","乔伊","乔伊斯","朱恩","卡玛","吉蒂","罗瑞尔","罗伦","盖尔","林赛","洛兰","穆得","塞尔特","麦格","梅根","欧尔佳","波比","罗伯塔","鲁思","丝柏凌","丝特勒","托比","厄休拉","维隆卡","维基","维文","桑席","耶达","微笑","平凡","上帝","善良","酱油","颓废","寂寞","黑色","威尼弗雷德","沃德豪斯","沃尔夫","渥拉斯顿","沃拉斯顿","伍德","伍尔夫","伍莱","伍利","沃兹沃思","渥兹华斯","华兹沃斯","赖特","怀阿特","怀亚特","魏克利夫","威克利夫","怀尔德","耶鲁","耶尔","耶茨","夏芝","耶基斯","扬","尤尔","扎卡赖亚斯","赞格威尔","泽卡赖亚","泽弗奈亚","齐默尔曼","华盛顿","沃特","沃特斯","瓦特","韦布","韦伯斯特","韦尔斯","韦斯利","惠特利","惠勒","惠特","怀特黑德","怀特海","惠特曼","惠蒂尔","怀特","温泽","德鲁伊"};
#define P_NUM 4
const char* P_URL[P_NUM] = {"1","2","3","4"};











































/*******************************calc lose by day****************************************/
int nlose[30] = {88,18,12,9,13,13,14,23,11,15,4,7,4,3,9,9,6,12,7,4,4,5,3,3,12,3,3,3,2,1};
int vlose = 4;
bool lose(int d, bool v)
{
	if(d < 0)
		return true;
	if(v)
	{
		if(d >= 7)
			return Math::GetRandomInt(100) < vlose;
		else
			return false;
	}
	else
	{
		if(d >= 30)
			return Math::GetRandomInt(100) < vlose;
		else
			return Math::GetRandomInt(100) < nlose[d];
	}
}
/********************************calc level exp by day***************************************/
/*MODIFY WITH USERMANAGER.CPP*/
const int user_lvl_exp[120] = {0,5,15,30,50,175,420,770,1230,1880,2180,2680,3230,3880,4680,5580,6580,7780,9130,10630,12630,15130,18130,21630,25620,30600,36600,43600,51600,60600,70600,81600,93600,106600,120600,135600,151600,168580,186580,206560,231550,261550,296350,336250,381250,431230,486220,546220,616220,696220,786220,886220,996220,1126220,1276220,1446220,1636220,1846220,2076220,2326220,2588220,2870220,3172220,3514220,3898220,4323220,4779220,5279220,5809220,6409220,7049220,7859220,8839220,10039220,11539220,13389220,15859220,18949220,22519220,26519220,31089220,36129220,41329220,46689220,52349220,58749220,65649220,72929220,81929220,92929220,104929220,117929220,131929220,148929220,167929220,188929220,212929220,237929220,265929220,295929220,328929220,363929220,401929220,442929220,486929220,533929220,583929220,636929220,692929220,752929220,816931350,884931350,956931350,1032931350,1112931350,1196931350,1284931350,1376931350,1472931350,1572931350};
const int allday[8] = {0,7,15,30,60,120,210,310};
const int nlevel[8] = {27,54,67,77,85,90,96,100};
const int vlevel[8] = {29,59,73,85,94,99,106,111};
const int nh=20;
const int vh=15;
int gl(int d, bool v)
{
	if(d < 0)
		return 0;
	const int *l = v?vlevel:nlevel;
	int h = v?vh:nh;
	int r = 27;
	if(d >= allday[7])
		r = (int)(double(d - allday[7]) / double(h) + double(l[7])) - 1 + Math::GetRandomInt(3);
	else
	{
		for(int i=0;i<7;++i)
		{
			if(d >= allday[i] && d < allday[i+1])
				r = max(24, (int)(double(l[i+1] - l[i]) / double(allday[i+1] - allday[i]) * double(d - allday[i]) + double(l[i])) - 1 + Math::GetRandomInt(3));
		}
	}
	return r;
}
int ge(int l)
{
	if(l <= 0)
		return 0;
	if(l >= 120)
		return user_lvl_exp[119];
	--l;
	return user_lvl_exp[l] +  Math::GetRandomInt(user_lvl_exp[l+1] - user_lvl_exp[l]);
}
/*************************************************************************************/
void cmd(unsigned uid, unsigned last_login_time, unsigned exp, unsigned level, bool vip)
{
	unsigned last_off_time = last_login_time + Math::GetRandomInt(7200);
	unsigned cash = Math::GetRandomInt(vip?512:30);
	string cmd = "/data/release/sg17/tools/CheckNew.sh "
			   + CTrans::UTOS(uid) + " "
			   + CTrans::UTOS(last_login_time) + " "
			   + CTrans::UTOS(last_off_time) + " "
			   + CTrans::UTOS(exp) + " "
			   + CTrans::UTOS(level) + " "
			   + CTrans::UTOS(cash);
	system(cmd.c_str());
}
/*************************************************************************************/
void check(string openid, unsigned uid, unsigned reg, unsigned login, unsigned ol, bool daily, bool vip)
{
	int d = CTime::GetDayInterval(reg, login);
	if(d < 0)
		return;
	if(daily)
	{
		if(lose(d, vip))
		{
			if(d == 0)
			{
				int level = Math::GetRandomInt(20);
				int point = ge(level);
				if(level > 7)
				{
					login = reg + Math::GetRandomInt(CTime::GetDayBeginTime(reg) + 86400 - reg);
					CDataUserMapping().SetLastLogin(openid, Config::GetZoneByUID(uid), login);
				}
				cmd(uid, login, point, level, vip);
			}
			return;
		}
		else
		{
			++d;
			login = CTime::GetDayBeginTime(login) + 86400 + Math::GetRandomInt(86400);
			CDataUserMapping().SetLastLogin(openid, Config::GetZoneByUID(uid), login);
			unsigned level = max((int)ol, gl(d, vip));
			int point = ge(level);
			cmd(uid, login, point, level, vip);
		}
	}
	else
	{
		CDataUserMapping().SetLastLogin(openid, Config::GetZoneByUID(uid), login);
		int level = gl(d, vip);
		int point = ge(level);
		cmd(uid, login, point, level, vip);
	}
}
/***********check today lose and tomorrow level exp ar / check all level exp ar *************/
int all(char* file, bool daily)
{
	ifstream fin(file);
	if (!fin.good())
	{
		cout<<"file error"<<endl;
		return 1;
	}

	while (!fin.eof() && fin.good())
	{
		string openid;
		unsigned uid = 0, reg = 0, login = 0, acc = 0, ol = 0;
		fin >> openid >> uid >> reg >> login >> acc >> ol;
		if(IsValidUid(uid))
			check(openid, uid, reg, login, ol, daily, acc);
	}

	return 0;
}
/****************************************add pay**************************************/
int cp(char* file)
{
	ifstream fin(file);
	if (!fin.good())
	{
		cout<<"file error"<<endl;
		return 1;
	}

	CDataUserMapping dbUserMapping;
	CDataPayHistory dbPayHistory;
	CLogicIdCtrl logicIdCtrl;
	while (!fin.eof() && fin.good())
	{
		string openid, order_id;
		unsigned cash = 0, money = 0, serverid = 0, ts = 0;
		fin >> cash >> money >> ts >> order_id >> openid >> serverid;

		unsigned uid = 0;
		if(dbUserMapping.GetUID(openid, serverid, uid) || uid == 0)
			continue;

		DataPayHistory payHistory;
		if(dbPayHistory.GetPayHistory(uid, OpenPlatform::GetType(), order_id, payHistory) == 0)
			continue;

		DataPayHistory payhis;
		payhis.channel = PT_C9;
		payhis.channel_pay_id = order_id;
		payhis.count = cash;
		payhis.credit = money;
		payhis.status = PST_OK;
		payhis.type = 0;
		payhis.uid = uid;
		payhis.open_id = openid;
		payhis.time = ts;

		uint64_t tempid = 0;
		if(logicIdCtrl.GetNextId(KEY_PAY_ID_CTRL, tempid))
			continue;
		payhis.pay_id = tempid;
		dbPayHistory.AddPayHistory(payhis);
	}

	return 0;
}
/******************************add user*********************************************/
int main(int argc, char *argv[])
{
	if (!Kernel::Init(APP_CONFIG_PATH))
	{
		cout << "init kernel fail" << endl;
		return 1;
	}

	if(argc == 3)
	{
		string cmd(argv[1]);
		if(cmd == "all")
			return all(argv[2], false);
		else if(cmd == "day")
			return all(argv[2], true);
		else if(cmd == "cp")
			return cp(argv[2]);
		else
		{
			cout<<"need file ts pt"<<endl;
			return 1;
		}
	}
	else if(argc != 4)
	{
		cout<<"need file ts pt"<<endl;
		return 1;
	}

	int ret;
	unsigned ts = atoi(argv[2]);
	ifstream fin(argv[1]);
	if (!fin.good())
	{
		cout<<"file error"<<endl;
		return 1;
	}
	vector<string> openid;
	while (!fin.eof() && fin.good())
	{
		string temp;
		fin >> temp;
		if(temp.empty())
			continue;
		openid.push_back(temp);
	}
	unsigned pt = atoi(argv[3]);
	string via, iopenid;

	random_shuffle(openid.begin(), openid.end());
	int rt = 2 * (int)ceil(double(86400) / double(min(8640, (int)openid.size())));

	CLogicUserMapping logicUserBasic;
	CDataUserMapping dbMapping;
	for(vector<string>::iterator it=openid.begin();it!=openid.end();++it)
	{
		OPUserInfo userinfo;
		userinfo.OpenId = *it;
		userinfo.Name = string(F_NAME[Math::GetRandomInt(F_NUM)]) + string(S_NAME[Math::GetRandomInt(S_NUM)]);
		userinfo.FigureUrl = string(P_URL[Math::GetRandomInt(P_NUM)]);
		unsigned uid = 0;
		bool isNewUser=false;
		ret = logicUserBasic.LoginPlatformUser((PlatformType)pt, userinfo, iopenid, uid, isNewUser,via);
		if(ret == 0)
		{
			dbMapping.SetTime(userinfo.OpenId, ts);
			string cmd = "/data/release/sg17/tools/AddNew.sh "
					   + CTrans::UTOS(uid) + " "
					   + CTrans::UTOS(pt) + " "
					   + CTrans::UTOS(ts) + " "
					   + userinfo.Name + " "
					   + userinfo.FigureUrl;
			system(cmd.c_str());
		}

		ts += Math::GetRandomInt(rt);
	}

	cout << "ok" << endl;
	return 0;
}
