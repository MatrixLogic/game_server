// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoProduce.proto

#ifndef PROTOBUF_ProtoProduce_2eproto__INCLUDED
#define PROTOBUF_ProtoProduce_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DataCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace ProtoProduce {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoProduce_2eproto();
void protobuf_AssignDesc_ProtoProduce_2eproto();
void protobuf_ShutdownFile_ProtoProduce_2eproto();

class CropLandCPP;
class PlantCropReq;
class PlantCropResp;
class ReapCropReq;
class ReapCropResp;
class ProduceEquipCPP;
class ExpandQueueReq;
class ExpandQueueResp;
class JoinQueueReq;
class JoinQueueResp;
class FetchProductReq;
class FetchProductResp;
class AnimalCPP;
class AdoptAnimalReq;
class AdoptAnimalResp;
class FeedAnimalReq;
class FeedAnimalResp;
class ObtainProductReq;
class ObtainProductResp;

// ===================================================================

class CropLandCPP : public ::google::protobuf::Message {
 public:
  CropLandCPP();
  virtual ~CropLandCPP();

  CropLandCPP(const CropLandCPP& from);

  inline CropLandCPP& operator=(const CropLandCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CropLandCPP& default_instance();

  void Swap(CropLandCPP* other);

  // implements Message ----------------------------------------------

  CropLandCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CropLandCPP& from);
  void MergeFrom(const CropLandCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);

  // required uint32 plant = 2;
  inline bool has_plant() const;
  inline void clear_plant();
  static const int kPlantFieldNumber = 2;
  inline ::google::protobuf::uint32 plant() const;
  inline void set_plant(::google::protobuf::uint32 value);

  // required uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 harvestTime = 4;
  inline bool has_harvesttime() const;
  inline void clear_harvesttime();
  static const int kHarvestTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 harvesttime() const;
  inline void set_harvesttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.CropLandCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_plant();
  inline void clear_has_plant();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_harvesttime();
  inline void clear_has_harvesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 plant_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 harvesttime_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static CropLandCPP* default_instance_;
};
// -------------------------------------------------------------------

class PlantCropReq : public ::google::protobuf::Message {
 public:
  PlantCropReq();
  virtual ~PlantCropReq();

  PlantCropReq(const PlantCropReq& from);

  inline PlantCropReq& operator=(const PlantCropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlantCropReq& default_instance();

  void Swap(PlantCropReq* other);

  // implements Message ----------------------------------------------

  PlantCropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlantCropReq& from);
  void MergeFrom(const PlantCropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uds = 1;
  inline int uds_size() const;
  inline void clear_uds();
  static const int kUdsFieldNumber = 1;
  inline ::google::protobuf::uint32 uds(int index) const;
  inline void set_uds(int index, ::google::protobuf::uint32 value);
  inline void add_uds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uds();

  // required uint32 plant = 2;
  inline bool has_plant() const;
  inline void clear_plant();
  static const int kPlantFieldNumber = 2;
  inline ::google::protobuf::uint32 plant() const;
  inline void set_plant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.PlantCropReq)
 private:
  inline void set_has_plant();
  inline void clear_has_plant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uds_;
  ::google::protobuf::uint32 plant_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static PlantCropReq* default_instance_;
};
// -------------------------------------------------------------------

class PlantCropResp : public ::google::protobuf::Message {
 public:
  PlantCropResp();
  virtual ~PlantCropResp();

  PlantCropResp(const PlantCropResp& from);

  inline PlantCropResp& operator=(const PlantCropResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlantCropResp& default_instance();

  void Swap(PlantCropResp* other);

  // implements Message ----------------------------------------------

  PlantCropResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlantCropResp& from);
  void MergeFrom(const PlantCropResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  inline int cropland_size() const;
  inline void clear_cropland();
  static const int kCroplandFieldNumber = 1;
  inline const ::ProtoProduce::CropLandCPP& cropland(int index) const;
  inline ::ProtoProduce::CropLandCPP* mutable_cropland(int index);
  inline ::ProtoProduce::CropLandCPP* add_cropland();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >&
      cropland() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >*
      mutable_cropland();

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.PlantCropResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP > cropland_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static PlantCropResp* default_instance_;
};
// -------------------------------------------------------------------

class ReapCropReq : public ::google::protobuf::Message {
 public:
  ReapCropReq();
  virtual ~ReapCropReq();

  ReapCropReq(const ReapCropReq& from);

  inline ReapCropReq& operator=(const ReapCropReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReapCropReq& default_instance();

  void Swap(ReapCropReq* other);

  // implements Message ----------------------------------------------

  ReapCropReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReapCropReq& from);
  void MergeFrom(const ReapCropReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uds = 1;
  inline int uds_size() const;
  inline void clear_uds();
  static const int kUdsFieldNumber = 1;
  inline ::google::protobuf::uint32 uds(int index) const;
  inline void set_uds(int index, ::google::protobuf::uint32 value);
  inline void add_uds(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uds() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uds();

  // @@protoc_insertion_point(class_scope:ProtoProduce.ReapCropReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uds_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ReapCropReq* default_instance_;
};
// -------------------------------------------------------------------

class ReapCropResp : public ::google::protobuf::Message {
 public:
  ReapCropResp();
  virtual ~ReapCropResp();

  ReapCropResp(const ReapCropResp& from);

  inline ReapCropResp& operator=(const ReapCropResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReapCropResp& default_instance();

  void Swap(ReapCropResp* other);

  // implements Message ----------------------------------------------

  ReapCropResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReapCropResp& from);
  void MergeFrom(const ReapCropResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  inline int cropland_size() const;
  inline void clear_cropland();
  static const int kCroplandFieldNumber = 1;
  inline const ::ProtoProduce::CropLandCPP& cropland(int index) const;
  inline ::ProtoProduce::CropLandCPP* mutable_cropland(int index);
  inline ::ProtoProduce::CropLandCPP* add_cropland();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >&
      cropland() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >*
      mutable_cropland();

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // required bool isfull = 3;
  inline bool has_isfull() const;
  inline void clear_isfull();
  static const int kIsfullFieldNumber = 3;
  inline bool isfull() const;
  inline void set_isfull(bool value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ReapCropResp)
 private:
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_isfull();
  inline void clear_has_isfull();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP > cropland_;
  ::DataCommon::CommonItemsCPP* commons_;
  bool isfull_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ReapCropResp* default_instance_;
};
// -------------------------------------------------------------------

class ProduceEquipCPP : public ::google::protobuf::Message {
 public:
  ProduceEquipCPP();
  virtual ~ProduceEquipCPP();

  ProduceEquipCPP(const ProduceEquipCPP& from);

  inline ProduceEquipCPP& operator=(const ProduceEquipCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProduceEquipCPP& default_instance();

  void Swap(ProduceEquipCPP* other);

  // implements Message ----------------------------------------------

  ProduceEquipCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProduceEquipCPP& from);
  void MergeFrom(const ProduceEquipCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);

  // required uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 queuenum = 3;
  inline bool has_queuenum() const;
  inline void clear_queuenum();
  static const int kQueuenumFieldNumber = 3;
  inline ::google::protobuf::uint32 queuenum() const;
  inline void set_queuenum(::google::protobuf::uint32 value);

  // repeated uint32 queuedata = 4;
  inline int queuedata_size() const;
  inline void clear_queuedata();
  static const int kQueuedataFieldNumber = 4;
  inline ::google::protobuf::uint32 queuedata(int index) const;
  inline void set_queuedata(int index, ::google::protobuf::uint32 value);
  inline void add_queuedata(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      queuedata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_queuedata();

  // repeated uint32 shelfdata = 5;
  inline int shelfdata_size() const;
  inline void clear_shelfdata();
  static const int kShelfdataFieldNumber = 5;
  inline ::google::protobuf::uint32 shelfdata(int index) const;
  inline void set_shelfdata(int index, ::google::protobuf::uint32 value);
  inline void add_shelfdata(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shelfdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shelfdata();

  // required uint32 finish_time = 6;
  inline bool has_finish_time() const;
  inline void clear_finish_time();
  static const int kFinishTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 finish_time() const;
  inline void set_finish_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ProduceEquipCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_queuenum();
  inline void clear_has_queuenum();
  inline void set_has_finish_time();
  inline void clear_has_finish_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > queuedata_;
  ::google::protobuf::uint32 queuenum_;
  ::google::protobuf::uint32 finish_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shelfdata_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ProduceEquipCPP* default_instance_;
};
// -------------------------------------------------------------------

class ExpandQueueReq : public ::google::protobuf::Message {
 public:
  ExpandQueueReq();
  virtual ~ExpandQueueReq();

  ExpandQueueReq(const ExpandQueueReq& from);

  inline ExpandQueueReq& operator=(const ExpandQueueReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpandQueueReq& default_instance();

  void Swap(ExpandQueueReq* other);

  // implements Message ----------------------------------------------

  ExpandQueueReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpandQueueReq& from);
  void MergeFrom(const ExpandQueueReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 equipud = 1;
  inline bool has_equipud() const;
  inline void clear_equipud();
  static const int kEquipudFieldNumber = 1;
  inline ::google::protobuf::uint32 equipud() const;
  inline void set_equipud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ExpandQueueReq)
 private:
  inline void set_has_equipud();
  inline void clear_has_equipud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 equipud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ExpandQueueReq* default_instance_;
};
// -------------------------------------------------------------------

class ExpandQueueResp : public ::google::protobuf::Message {
 public:
  ExpandQueueResp();
  virtual ~ExpandQueueResp();

  ExpandQueueResp(const ExpandQueueResp& from);

  inline ExpandQueueResp& operator=(const ExpandQueueResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExpandQueueResp& default_instance();

  void Swap(ExpandQueueResp* other);

  // implements Message ----------------------------------------------

  ExpandQueueResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExpandQueueResp& from);
  void MergeFrom(const ExpandQueueResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 1;
  inline const ::ProtoProduce::ProduceEquipCPP& equipment() const;
  inline ::ProtoProduce::ProduceEquipCPP* mutable_equipment();
  inline ::ProtoProduce::ProduceEquipCPP* release_equipment();
  inline void set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ExpandQueueResp)
 private:
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::ProduceEquipCPP* equipment_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ExpandQueueResp* default_instance_;
};
// -------------------------------------------------------------------

class JoinQueueReq : public ::google::protobuf::Message {
 public:
  JoinQueueReq();
  virtual ~JoinQueueReq();

  JoinQueueReq(const JoinQueueReq& from);

  inline JoinQueueReq& operator=(const JoinQueueReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinQueueReq& default_instance();

  void Swap(JoinQueueReq* other);

  // implements Message ----------------------------------------------

  JoinQueueReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinQueueReq& from);
  void MergeFrom(const JoinQueueReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 propsid = 1;
  inline bool has_propsid() const;
  inline void clear_propsid();
  static const int kPropsidFieldNumber = 1;
  inline ::google::protobuf::uint32 propsid() const;
  inline void set_propsid(::google::protobuf::uint32 value);

  // required uint32 equipud = 2;
  inline bool has_equipud() const;
  inline void clear_equipud();
  static const int kEquipudFieldNumber = 2;
  inline ::google::protobuf::uint32 equipud() const;
  inline void set_equipud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.JoinQueueReq)
 private:
  inline void set_has_propsid();
  inline void clear_has_propsid();
  inline void set_has_equipud();
  inline void clear_has_equipud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 propsid_;
  ::google::protobuf::uint32 equipud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static JoinQueueReq* default_instance_;
};
// -------------------------------------------------------------------

class JoinQueueResp : public ::google::protobuf::Message {
 public:
  JoinQueueResp();
  virtual ~JoinQueueResp();

  JoinQueueResp(const JoinQueueResp& from);

  inline JoinQueueResp& operator=(const JoinQueueResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinQueueResp& default_instance();

  void Swap(JoinQueueResp* other);

  // implements Message ----------------------------------------------

  JoinQueueResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinQueueResp& from);
  void MergeFrom(const JoinQueueResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 1;
  inline const ::ProtoProduce::ProduceEquipCPP& equipment() const;
  inline ::ProtoProduce::ProduceEquipCPP* mutable_equipment();
  inline ::ProtoProduce::ProduceEquipCPP* release_equipment();
  inline void set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.JoinQueueResp)
 private:
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::ProduceEquipCPP* equipment_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static JoinQueueResp* default_instance_;
};
// -------------------------------------------------------------------

class FetchProductReq : public ::google::protobuf::Message {
 public:
  FetchProductReq();
  virtual ~FetchProductReq();

  FetchProductReq(const FetchProductReq& from);

  inline FetchProductReq& operator=(const FetchProductReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchProductReq& default_instance();

  void Swap(FetchProductReq* other);

  // implements Message ----------------------------------------------

  FetchProductReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchProductReq& from);
  void MergeFrom(const FetchProductReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 equipud = 2;
  inline bool has_equipud() const;
  inline void clear_equipud();
  static const int kEquipudFieldNumber = 2;
  inline ::google::protobuf::uint32 equipud() const;
  inline void set_equipud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.FetchProductReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_equipud();
  inline void clear_has_equipud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 equipud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static FetchProductReq* default_instance_;
};
// -------------------------------------------------------------------

class FetchProductResp : public ::google::protobuf::Message {
 public:
  FetchProductResp();
  virtual ~FetchProductResp();

  FetchProductResp(const FetchProductResp& from);

  inline FetchProductResp& operator=(const FetchProductResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchProductResp& default_instance();

  void Swap(FetchProductResp* other);

  // implements Message ----------------------------------------------

  FetchProductResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchProductResp& from);
  void MergeFrom(const FetchProductResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  inline bool has_equipment() const;
  inline void clear_equipment();
  static const int kEquipmentFieldNumber = 1;
  inline const ::ProtoProduce::ProduceEquipCPP& equipment() const;
  inline ::ProtoProduce::ProduceEquipCPP* mutable_equipment();
  inline ::ProtoProduce::ProduceEquipCPP* release_equipment();
  inline void set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment);

  // optional .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // required bool isfull = 3;
  inline bool has_isfull() const;
  inline void clear_isfull();
  static const int kIsfullFieldNumber = 3;
  inline bool isfull() const;
  inline void set_isfull(bool value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.FetchProductResp)
 private:
  inline void set_has_equipment();
  inline void clear_has_equipment();
  inline void set_has_commons();
  inline void clear_has_commons();
  inline void set_has_isfull();
  inline void clear_has_isfull();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::ProduceEquipCPP* equipment_;
  ::DataCommon::CommonItemsCPP* commons_;
  bool isfull_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static FetchProductResp* default_instance_;
};
// -------------------------------------------------------------------

class AnimalCPP : public ::google::protobuf::Message {
 public:
  AnimalCPP();
  virtual ~AnimalCPP();

  AnimalCPP(const AnimalCPP& from);

  inline AnimalCPP& operator=(const AnimalCPP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimalCPP& default_instance();

  void Swap(AnimalCPP* other);

  // implements Message ----------------------------------------------

  AnimalCPP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnimalCPP& from);
  void MergeFrom(const AnimalCPP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ud = 1;
  inline bool has_ud() const;
  inline void clear_ud();
  static const int kUdFieldNumber = 1;
  inline ::google::protobuf::uint32 ud() const;
  inline void set_ud(::google::protobuf::uint32 value);

  // required uint32 residenceUd = 2;
  inline bool has_residenceud() const;
  inline void clear_residenceud();
  static const int kResidenceUdFieldNumber = 2;
  inline ::google::protobuf::uint32 residenceud() const;
  inline void set_residenceud(::google::protobuf::uint32 value);

  // required uint32 animalId = 3;
  inline bool has_animalid() const;
  inline void clear_animalid();
  static const int kAnimalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 animalid() const;
  inline void set_animalid(::google::protobuf::uint32 value);

  // required uint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // required uint32 fullTime = 5;
  inline bool has_fulltime() const;
  inline void clear_fulltime();
  static const int kFullTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 fulltime() const;
  inline void set_fulltime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.AnimalCPP)
 private:
  inline void set_has_ud();
  inline void clear_has_ud();
  inline void set_has_residenceud();
  inline void clear_has_residenceud();
  inline void set_has_animalid();
  inline void clear_has_animalid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_fulltime();
  inline void clear_has_fulltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 ud_;
  ::google::protobuf::uint32 residenceud_;
  ::google::protobuf::uint32 animalid_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 fulltime_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static AnimalCPP* default_instance_;
};
// -------------------------------------------------------------------

class AdoptAnimalReq : public ::google::protobuf::Message {
 public:
  AdoptAnimalReq();
  virtual ~AdoptAnimalReq();

  AdoptAnimalReq(const AdoptAnimalReq& from);

  inline AdoptAnimalReq& operator=(const AdoptAnimalReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdoptAnimalReq& default_instance();

  void Swap(AdoptAnimalReq* other);

  // implements Message ----------------------------------------------

  AdoptAnimalReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdoptAnimalReq& from);
  void MergeFrom(const AdoptAnimalReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 buildud = 1;
  inline bool has_buildud() const;
  inline void clear_buildud();
  static const int kBuildudFieldNumber = 1;
  inline ::google::protobuf::uint32 buildud() const;
  inline void set_buildud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.AdoptAnimalReq)
 private:
  inline void set_has_buildud();
  inline void clear_has_buildud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buildud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static AdoptAnimalReq* default_instance_;
};
// -------------------------------------------------------------------

class AdoptAnimalResp : public ::google::protobuf::Message {
 public:
  AdoptAnimalResp();
  virtual ~AdoptAnimalResp();

  AdoptAnimalResp(const AdoptAnimalResp& from);

  inline AdoptAnimalResp& operator=(const AdoptAnimalResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdoptAnimalResp& default_instance();

  void Swap(AdoptAnimalResp* other);

  // implements Message ----------------------------------------------

  AdoptAnimalResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdoptAnimalResp& from);
  void MergeFrom(const AdoptAnimalResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoProduce.AnimalCPP animal = 1;
  inline bool has_animal() const;
  inline void clear_animal();
  static const int kAnimalFieldNumber = 1;
  inline const ::ProtoProduce::AnimalCPP& animal() const;
  inline ::ProtoProduce::AnimalCPP* mutable_animal();
  inline ::ProtoProduce::AnimalCPP* release_animal();
  inline void set_allocated_animal(::ProtoProduce::AnimalCPP* animal);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.AdoptAnimalResp)
 private:
  inline void set_has_animal();
  inline void clear_has_animal();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::AnimalCPP* animal_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static AdoptAnimalResp* default_instance_;
};
// -------------------------------------------------------------------

class FeedAnimalReq : public ::google::protobuf::Message {
 public:
  FeedAnimalReq();
  virtual ~FeedAnimalReq();

  FeedAnimalReq(const FeedAnimalReq& from);

  inline FeedAnimalReq& operator=(const FeedAnimalReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedAnimalReq& default_instance();

  void Swap(FeedAnimalReq* other);

  // implements Message ----------------------------------------------

  FeedAnimalReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedAnimalReq& from);
  void MergeFrom(const FeedAnimalReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 animalud = 1;
  inline bool has_animalud() const;
  inline void clear_animalud();
  static const int kAnimaludFieldNumber = 1;
  inline ::google::protobuf::uint32 animalud() const;
  inline void set_animalud(::google::protobuf::uint32 value);

  // required uint32 fodderud = 2;
  inline bool has_fodderud() const;
  inline void clear_fodderud();
  static const int kFodderudFieldNumber = 2;
  inline ::google::protobuf::uint32 fodderud() const;
  inline void set_fodderud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.FeedAnimalReq)
 private:
  inline void set_has_animalud();
  inline void clear_has_animalud();
  inline void set_has_fodderud();
  inline void clear_has_fodderud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 animalud_;
  ::google::protobuf::uint32 fodderud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static FeedAnimalReq* default_instance_;
};
// -------------------------------------------------------------------

class FeedAnimalResp : public ::google::protobuf::Message {
 public:
  FeedAnimalResp();
  virtual ~FeedAnimalResp();

  FeedAnimalResp(const FeedAnimalResp& from);

  inline FeedAnimalResp& operator=(const FeedAnimalResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedAnimalResp& default_instance();

  void Swap(FeedAnimalResp* other);

  // implements Message ----------------------------------------------

  FeedAnimalResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedAnimalResp& from);
  void MergeFrom(const FeedAnimalResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProtoProduce.AnimalCPP animal = 1;
  inline bool has_animal() const;
  inline void clear_animal();
  static const int kAnimalFieldNumber = 1;
  inline const ::ProtoProduce::AnimalCPP& animal() const;
  inline ::ProtoProduce::AnimalCPP* mutable_animal();
  inline ::ProtoProduce::AnimalCPP* release_animal();
  inline void set_allocated_animal(::ProtoProduce::AnimalCPP* animal);

  // required .DataCommon.CommonItemsCPP commons = 2;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 2;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.FeedAnimalResp)
 private:
  inline void set_has_animal();
  inline void clear_has_animal();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::AnimalCPP* animal_;
  ::DataCommon::CommonItemsCPP* commons_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static FeedAnimalResp* default_instance_;
};
// -------------------------------------------------------------------

class ObtainProductReq : public ::google::protobuf::Message {
 public:
  ObtainProductReq();
  virtual ~ObtainProductReq();

  ObtainProductReq(const ObtainProductReq& from);

  inline ObtainProductReq& operator=(const ObtainProductReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObtainProductReq& default_instance();

  void Swap(ObtainProductReq* other);

  // implements Message ----------------------------------------------

  ObtainProductReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObtainProductReq& from);
  void MergeFrom(const ObtainProductReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 animalud = 1;
  inline bool has_animalud() const;
  inline void clear_animalud();
  static const int kAnimaludFieldNumber = 1;
  inline ::google::protobuf::uint32 animalud() const;
  inline void set_animalud(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ObtainProductReq)
 private:
  inline void set_has_animalud();
  inline void clear_has_animalud();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 animalud_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ObtainProductReq* default_instance_;
};
// -------------------------------------------------------------------

class ObtainProductResp : public ::google::protobuf::Message {
 public:
  ObtainProductResp();
  virtual ~ObtainProductResp();

  ObtainProductResp(const ObtainProductResp& from);

  inline ObtainProductResp& operator=(const ObtainProductResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObtainProductResp& default_instance();

  void Swap(ObtainProductResp* other);

  // implements Message ----------------------------------------------

  ObtainProductResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObtainProductResp& from);
  void MergeFrom(const ObtainProductResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isfull = 1;
  inline bool has_isfull() const;
  inline void clear_isfull();
  static const int kIsfullFieldNumber = 1;
  inline bool isfull() const;
  inline void set_isfull(bool value);

  // optional .ProtoProduce.AnimalCPP animal = 2;
  inline bool has_animal() const;
  inline void clear_animal();
  static const int kAnimalFieldNumber = 2;
  inline const ::ProtoProduce::AnimalCPP& animal() const;
  inline ::ProtoProduce::AnimalCPP* mutable_animal();
  inline ::ProtoProduce::AnimalCPP* release_animal();
  inline void set_allocated_animal(::ProtoProduce::AnimalCPP* animal);

  // optional .DataCommon.CommonItemsCPP commons = 3;
  inline bool has_commons() const;
  inline void clear_commons();
  static const int kCommonsFieldNumber = 3;
  inline const ::DataCommon::CommonItemsCPP& commons() const;
  inline ::DataCommon::CommonItemsCPP* mutable_commons();
  inline ::DataCommon::CommonItemsCPP* release_commons();
  inline void set_allocated_commons(::DataCommon::CommonItemsCPP* commons);

  // @@protoc_insertion_point(class_scope:ProtoProduce.ObtainProductResp)
 private:
  inline void set_has_isfull();
  inline void clear_has_isfull();
  inline void set_has_animal();
  inline void clear_has_animal();
  inline void set_has_commons();
  inline void clear_has_commons();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ProtoProduce::AnimalCPP* animal_;
  ::DataCommon::CommonItemsCPP* commons_;
  bool isfull_;
  friend void  protobuf_AddDesc_ProtoProduce_2eproto();
  friend void protobuf_AssignDesc_ProtoProduce_2eproto();
  friend void protobuf_ShutdownFile_ProtoProduce_2eproto();

  void InitAsDefaultInstance();
  static ObtainProductResp* default_instance_;
};
// ===================================================================


// ===================================================================

// CropLandCPP

// required uint32 ud = 1;
inline bool CropLandCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CropLandCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CropLandCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CropLandCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 CropLandCPP::ud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.CropLandCPP.ud)
  return ud_;
}
inline void CropLandCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.CropLandCPP.ud)
}

// required uint32 plant = 2;
inline bool CropLandCPP::has_plant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CropLandCPP::set_has_plant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CropLandCPP::clear_has_plant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CropLandCPP::clear_plant() {
  plant_ = 0u;
  clear_has_plant();
}
inline ::google::protobuf::uint32 CropLandCPP::plant() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.CropLandCPP.plant)
  return plant_;
}
inline void CropLandCPP::set_plant(::google::protobuf::uint32 value) {
  set_has_plant();
  plant_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.CropLandCPP.plant)
}

// required uint32 status = 3;
inline bool CropLandCPP::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CropLandCPP::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CropLandCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CropLandCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CropLandCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.CropLandCPP.status)
  return status_;
}
inline void CropLandCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.CropLandCPP.status)
}

// required uint32 harvestTime = 4;
inline bool CropLandCPP::has_harvesttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CropLandCPP::set_has_harvesttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CropLandCPP::clear_has_harvesttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CropLandCPP::clear_harvesttime() {
  harvesttime_ = 0u;
  clear_has_harvesttime();
}
inline ::google::protobuf::uint32 CropLandCPP::harvesttime() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.CropLandCPP.harvestTime)
  return harvesttime_;
}
inline void CropLandCPP::set_harvesttime(::google::protobuf::uint32 value) {
  set_has_harvesttime();
  harvesttime_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.CropLandCPP.harvestTime)
}

// -------------------------------------------------------------------

// PlantCropReq

// repeated uint32 uds = 1;
inline int PlantCropReq::uds_size() const {
  return uds_.size();
}
inline void PlantCropReq::clear_uds() {
  uds_.Clear();
}
inline ::google::protobuf::uint32 PlantCropReq::uds(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.PlantCropReq.uds)
  return uds_.Get(index);
}
inline void PlantCropReq::set_uds(int index, ::google::protobuf::uint32 value) {
  uds_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoProduce.PlantCropReq.uds)
}
inline void PlantCropReq::add_uds(::google::protobuf::uint32 value) {
  uds_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoProduce.PlantCropReq.uds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlantCropReq::uds() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.PlantCropReq.uds)
  return uds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlantCropReq::mutable_uds() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.PlantCropReq.uds)
  return &uds_;
}

// required uint32 plant = 2;
inline bool PlantCropReq::has_plant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlantCropReq::set_has_plant() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlantCropReq::clear_has_plant() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlantCropReq::clear_plant() {
  plant_ = 0u;
  clear_has_plant();
}
inline ::google::protobuf::uint32 PlantCropReq::plant() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.PlantCropReq.plant)
  return plant_;
}
inline void PlantCropReq::set_plant(::google::protobuf::uint32 value) {
  set_has_plant();
  plant_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.PlantCropReq.plant)
}

// -------------------------------------------------------------------

// PlantCropResp

// repeated .ProtoProduce.CropLandCPP cropland = 1;
inline int PlantCropResp::cropland_size() const {
  return cropland_.size();
}
inline void PlantCropResp::clear_cropland() {
  cropland_.Clear();
}
inline const ::ProtoProduce::CropLandCPP& PlantCropResp::cropland(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.PlantCropResp.cropland)
  return cropland_.Get(index);
}
inline ::ProtoProduce::CropLandCPP* PlantCropResp::mutable_cropland(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoProduce.PlantCropResp.cropland)
  return cropland_.Mutable(index);
}
inline ::ProtoProduce::CropLandCPP* PlantCropResp::add_cropland() {
  // @@protoc_insertion_point(field_add:ProtoProduce.PlantCropResp.cropland)
  return cropland_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >&
PlantCropResp::cropland() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.PlantCropResp.cropland)
  return cropland_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >*
PlantCropResp::mutable_cropland() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.PlantCropResp.cropland)
  return &cropland_;
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool PlantCropResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlantCropResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlantCropResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlantCropResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& PlantCropResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.PlantCropResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* PlantCropResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.PlantCropResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* PlantCropResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void PlantCropResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.PlantCropResp.commons)
}

// -------------------------------------------------------------------

// ReapCropReq

// repeated uint32 uds = 1;
inline int ReapCropReq::uds_size() const {
  return uds_.size();
}
inline void ReapCropReq::clear_uds() {
  uds_.Clear();
}
inline ::google::protobuf::uint32 ReapCropReq::uds(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ReapCropReq.uds)
  return uds_.Get(index);
}
inline void ReapCropReq::set_uds(int index, ::google::protobuf::uint32 value) {
  uds_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoProduce.ReapCropReq.uds)
}
inline void ReapCropReq::add_uds(::google::protobuf::uint32 value) {
  uds_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoProduce.ReapCropReq.uds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ReapCropReq::uds() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.ReapCropReq.uds)
  return uds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ReapCropReq::mutable_uds() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.ReapCropReq.uds)
  return &uds_;
}

// -------------------------------------------------------------------

// ReapCropResp

// repeated .ProtoProduce.CropLandCPP cropland = 1;
inline int ReapCropResp::cropland_size() const {
  return cropland_.size();
}
inline void ReapCropResp::clear_cropland() {
  cropland_.Clear();
}
inline const ::ProtoProduce::CropLandCPP& ReapCropResp::cropland(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ReapCropResp.cropland)
  return cropland_.Get(index);
}
inline ::ProtoProduce::CropLandCPP* ReapCropResp::mutable_cropland(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ReapCropResp.cropland)
  return cropland_.Mutable(index);
}
inline ::ProtoProduce::CropLandCPP* ReapCropResp::add_cropland() {
  // @@protoc_insertion_point(field_add:ProtoProduce.ReapCropResp.cropland)
  return cropland_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >&
ReapCropResp::cropland() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.ReapCropResp.cropland)
  return cropland_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoProduce::CropLandCPP >*
ReapCropResp::mutable_cropland() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.ReapCropResp.cropland)
  return &cropland_;
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool ReapCropResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReapCropResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReapCropResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReapCropResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& ReapCropResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ReapCropResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* ReapCropResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ReapCropResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* ReapCropResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void ReapCropResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.ReapCropResp.commons)
}

// required bool isfull = 3;
inline bool ReapCropResp::has_isfull() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReapCropResp::set_has_isfull() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReapCropResp::clear_has_isfull() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReapCropResp::clear_isfull() {
  isfull_ = false;
  clear_has_isfull();
}
inline bool ReapCropResp::isfull() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ReapCropResp.isfull)
  return isfull_;
}
inline void ReapCropResp::set_isfull(bool value) {
  set_has_isfull();
  isfull_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ReapCropResp.isfull)
}

// -------------------------------------------------------------------

// ProduceEquipCPP

// required uint32 ud = 1;
inline bool ProduceEquipCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProduceEquipCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProduceEquipCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProduceEquipCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::ud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.ud)
  return ud_;
}
inline void ProduceEquipCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.ud)
}

// required uint32 status = 2;
inline bool ProduceEquipCPP::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProduceEquipCPP::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProduceEquipCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProduceEquipCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.status)
  return status_;
}
inline void ProduceEquipCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.status)
}

// required uint32 queuenum = 3;
inline bool ProduceEquipCPP::has_queuenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProduceEquipCPP::set_has_queuenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProduceEquipCPP::clear_has_queuenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProduceEquipCPP::clear_queuenum() {
  queuenum_ = 0u;
  clear_has_queuenum();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::queuenum() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.queuenum)
  return queuenum_;
}
inline void ProduceEquipCPP::set_queuenum(::google::protobuf::uint32 value) {
  set_has_queuenum();
  queuenum_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.queuenum)
}

// repeated uint32 queuedata = 4;
inline int ProduceEquipCPP::queuedata_size() const {
  return queuedata_.size();
}
inline void ProduceEquipCPP::clear_queuedata() {
  queuedata_.Clear();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::queuedata(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.queuedata)
  return queuedata_.Get(index);
}
inline void ProduceEquipCPP::set_queuedata(int index, ::google::protobuf::uint32 value) {
  queuedata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.queuedata)
}
inline void ProduceEquipCPP::add_queuedata(::google::protobuf::uint32 value) {
  queuedata_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoProduce.ProduceEquipCPP.queuedata)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProduceEquipCPP::queuedata() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.ProduceEquipCPP.queuedata)
  return queuedata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProduceEquipCPP::mutable_queuedata() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.ProduceEquipCPP.queuedata)
  return &queuedata_;
}

// repeated uint32 shelfdata = 5;
inline int ProduceEquipCPP::shelfdata_size() const {
  return shelfdata_.size();
}
inline void ProduceEquipCPP::clear_shelfdata() {
  shelfdata_.Clear();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::shelfdata(int index) const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.shelfdata)
  return shelfdata_.Get(index);
}
inline void ProduceEquipCPP::set_shelfdata(int index, ::google::protobuf::uint32 value) {
  shelfdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.shelfdata)
}
inline void ProduceEquipCPP::add_shelfdata(::google::protobuf::uint32 value) {
  shelfdata_.Add(value);
  // @@protoc_insertion_point(field_add:ProtoProduce.ProduceEquipCPP.shelfdata)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProduceEquipCPP::shelfdata() const {
  // @@protoc_insertion_point(field_list:ProtoProduce.ProduceEquipCPP.shelfdata)
  return shelfdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProduceEquipCPP::mutable_shelfdata() {
  // @@protoc_insertion_point(field_mutable_list:ProtoProduce.ProduceEquipCPP.shelfdata)
  return &shelfdata_;
}

// required uint32 finish_time = 6;
inline bool ProduceEquipCPP::has_finish_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProduceEquipCPP::set_has_finish_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProduceEquipCPP::clear_has_finish_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProduceEquipCPP::clear_finish_time() {
  finish_time_ = 0u;
  clear_has_finish_time();
}
inline ::google::protobuf::uint32 ProduceEquipCPP::finish_time() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ProduceEquipCPP.finish_time)
  return finish_time_;
}
inline void ProduceEquipCPP::set_finish_time(::google::protobuf::uint32 value) {
  set_has_finish_time();
  finish_time_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ProduceEquipCPP.finish_time)
}

// -------------------------------------------------------------------

// ExpandQueueReq

// required uint32 equipud = 1;
inline bool ExpandQueueReq::has_equipud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpandQueueReq::set_has_equipud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpandQueueReq::clear_has_equipud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpandQueueReq::clear_equipud() {
  equipud_ = 0u;
  clear_has_equipud();
}
inline ::google::protobuf::uint32 ExpandQueueReq::equipud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ExpandQueueReq.equipud)
  return equipud_;
}
inline void ExpandQueueReq::set_equipud(::google::protobuf::uint32 value) {
  set_has_equipud();
  equipud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ExpandQueueReq.equipud)
}

// -------------------------------------------------------------------

// ExpandQueueResp

// required .ProtoProduce.ProduceEquipCPP equipment = 1;
inline bool ExpandQueueResp::has_equipment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExpandQueueResp::set_has_equipment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExpandQueueResp::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExpandQueueResp::clear_equipment() {
  if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
  clear_has_equipment();
}
inline const ::ProtoProduce::ProduceEquipCPP& ExpandQueueResp::equipment() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ExpandQueueResp.equipment)
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* ExpandQueueResp::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::ProtoProduce::ProduceEquipCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ExpandQueueResp.equipment)
  return equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* ExpandQueueResp::release_equipment() {
  clear_has_equipment();
  ::ProtoProduce::ProduceEquipCPP* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void ExpandQueueResp::set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.ExpandQueueResp.equipment)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool ExpandQueueResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExpandQueueResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExpandQueueResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExpandQueueResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& ExpandQueueResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ExpandQueueResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* ExpandQueueResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ExpandQueueResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* ExpandQueueResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void ExpandQueueResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.ExpandQueueResp.commons)
}

// -------------------------------------------------------------------

// JoinQueueReq

// required uint32 propsid = 1;
inline bool JoinQueueReq::has_propsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinQueueReq::set_has_propsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinQueueReq::clear_has_propsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinQueueReq::clear_propsid() {
  propsid_ = 0u;
  clear_has_propsid();
}
inline ::google::protobuf::uint32 JoinQueueReq::propsid() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.JoinQueueReq.propsid)
  return propsid_;
}
inline void JoinQueueReq::set_propsid(::google::protobuf::uint32 value) {
  set_has_propsid();
  propsid_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.JoinQueueReq.propsid)
}

// required uint32 equipud = 2;
inline bool JoinQueueReq::has_equipud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinQueueReq::set_has_equipud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinQueueReq::clear_has_equipud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinQueueReq::clear_equipud() {
  equipud_ = 0u;
  clear_has_equipud();
}
inline ::google::protobuf::uint32 JoinQueueReq::equipud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.JoinQueueReq.equipud)
  return equipud_;
}
inline void JoinQueueReq::set_equipud(::google::protobuf::uint32 value) {
  set_has_equipud();
  equipud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.JoinQueueReq.equipud)
}

// -------------------------------------------------------------------

// JoinQueueResp

// required .ProtoProduce.ProduceEquipCPP equipment = 1;
inline bool JoinQueueResp::has_equipment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinQueueResp::set_has_equipment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinQueueResp::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinQueueResp::clear_equipment() {
  if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
  clear_has_equipment();
}
inline const ::ProtoProduce::ProduceEquipCPP& JoinQueueResp::equipment() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.JoinQueueResp.equipment)
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* JoinQueueResp::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::ProtoProduce::ProduceEquipCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.JoinQueueResp.equipment)
  return equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* JoinQueueResp::release_equipment() {
  clear_has_equipment();
  ::ProtoProduce::ProduceEquipCPP* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void JoinQueueResp::set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.JoinQueueResp.equipment)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool JoinQueueResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinQueueResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinQueueResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinQueueResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& JoinQueueResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.JoinQueueResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* JoinQueueResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.JoinQueueResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* JoinQueueResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void JoinQueueResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.JoinQueueResp.commons)
}

// -------------------------------------------------------------------

// FetchProductReq

// required uint32 pos = 1;
inline bool FetchProductReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchProductReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchProductReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchProductReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 FetchProductReq::pos() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FetchProductReq.pos)
  return pos_;
}
inline void FetchProductReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.FetchProductReq.pos)
}

// required uint32 equipud = 2;
inline bool FetchProductReq::has_equipud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchProductReq::set_has_equipud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchProductReq::clear_has_equipud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchProductReq::clear_equipud() {
  equipud_ = 0u;
  clear_has_equipud();
}
inline ::google::protobuf::uint32 FetchProductReq::equipud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FetchProductReq.equipud)
  return equipud_;
}
inline void FetchProductReq::set_equipud(::google::protobuf::uint32 value) {
  set_has_equipud();
  equipud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.FetchProductReq.equipud)
}

// -------------------------------------------------------------------

// FetchProductResp

// required .ProtoProduce.ProduceEquipCPP equipment = 1;
inline bool FetchProductResp::has_equipment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchProductResp::set_has_equipment() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchProductResp::clear_has_equipment() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchProductResp::clear_equipment() {
  if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
  clear_has_equipment();
}
inline const ::ProtoProduce::ProduceEquipCPP& FetchProductResp::equipment() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FetchProductResp.equipment)
  return equipment_ != NULL ? *equipment_ : *default_instance_->equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* FetchProductResp::mutable_equipment() {
  set_has_equipment();
  if (equipment_ == NULL) equipment_ = new ::ProtoProduce::ProduceEquipCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.FetchProductResp.equipment)
  return equipment_;
}
inline ::ProtoProduce::ProduceEquipCPP* FetchProductResp::release_equipment() {
  clear_has_equipment();
  ::ProtoProduce::ProduceEquipCPP* temp = equipment_;
  equipment_ = NULL;
  return temp;
}
inline void FetchProductResp::set_allocated_equipment(::ProtoProduce::ProduceEquipCPP* equipment) {
  delete equipment_;
  equipment_ = equipment;
  if (equipment) {
    set_has_equipment();
  } else {
    clear_has_equipment();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.FetchProductResp.equipment)
}

// optional .DataCommon.CommonItemsCPP commons = 2;
inline bool FetchProductResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchProductResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchProductResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchProductResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& FetchProductResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FetchProductResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* FetchProductResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.FetchProductResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* FetchProductResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void FetchProductResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.FetchProductResp.commons)
}

// required bool isfull = 3;
inline bool FetchProductResp::has_isfull() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetchProductResp::set_has_isfull() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetchProductResp::clear_has_isfull() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetchProductResp::clear_isfull() {
  isfull_ = false;
  clear_has_isfull();
}
inline bool FetchProductResp::isfull() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FetchProductResp.isfull)
  return isfull_;
}
inline void FetchProductResp::set_isfull(bool value) {
  set_has_isfull();
  isfull_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.FetchProductResp.isfull)
}

// -------------------------------------------------------------------

// AnimalCPP

// required uint32 ud = 1;
inline bool AnimalCPP::has_ud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnimalCPP::set_has_ud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnimalCPP::clear_has_ud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnimalCPP::clear_ud() {
  ud_ = 0u;
  clear_has_ud();
}
inline ::google::protobuf::uint32 AnimalCPP::ud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AnimalCPP.ud)
  return ud_;
}
inline void AnimalCPP::set_ud(::google::protobuf::uint32 value) {
  set_has_ud();
  ud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AnimalCPP.ud)
}

// required uint32 residenceUd = 2;
inline bool AnimalCPP::has_residenceud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnimalCPP::set_has_residenceud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnimalCPP::clear_has_residenceud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnimalCPP::clear_residenceud() {
  residenceud_ = 0u;
  clear_has_residenceud();
}
inline ::google::protobuf::uint32 AnimalCPP::residenceud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AnimalCPP.residenceUd)
  return residenceud_;
}
inline void AnimalCPP::set_residenceud(::google::protobuf::uint32 value) {
  set_has_residenceud();
  residenceud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AnimalCPP.residenceUd)
}

// required uint32 animalId = 3;
inline bool AnimalCPP::has_animalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnimalCPP::set_has_animalid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnimalCPP::clear_has_animalid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnimalCPP::clear_animalid() {
  animalid_ = 0u;
  clear_has_animalid();
}
inline ::google::protobuf::uint32 AnimalCPP::animalid() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AnimalCPP.animalId)
  return animalid_;
}
inline void AnimalCPP::set_animalid(::google::protobuf::uint32 value) {
  set_has_animalid();
  animalid_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AnimalCPP.animalId)
}

// required uint32 status = 4;
inline bool AnimalCPP::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnimalCPP::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnimalCPP::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnimalCPP::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 AnimalCPP::status() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AnimalCPP.status)
  return status_;
}
inline void AnimalCPP::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AnimalCPP.status)
}

// required uint32 fullTime = 5;
inline bool AnimalCPP::has_fulltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnimalCPP::set_has_fulltime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnimalCPP::clear_has_fulltime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnimalCPP::clear_fulltime() {
  fulltime_ = 0u;
  clear_has_fulltime();
}
inline ::google::protobuf::uint32 AnimalCPP::fulltime() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AnimalCPP.fullTime)
  return fulltime_;
}
inline void AnimalCPP::set_fulltime(::google::protobuf::uint32 value) {
  set_has_fulltime();
  fulltime_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AnimalCPP.fullTime)
}

// -------------------------------------------------------------------

// AdoptAnimalReq

// required uint32 buildud = 1;
inline bool AdoptAnimalReq::has_buildud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdoptAnimalReq::set_has_buildud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdoptAnimalReq::clear_has_buildud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdoptAnimalReq::clear_buildud() {
  buildud_ = 0u;
  clear_has_buildud();
}
inline ::google::protobuf::uint32 AdoptAnimalReq::buildud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AdoptAnimalReq.buildud)
  return buildud_;
}
inline void AdoptAnimalReq::set_buildud(::google::protobuf::uint32 value) {
  set_has_buildud();
  buildud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.AdoptAnimalReq.buildud)
}

// -------------------------------------------------------------------

// AdoptAnimalResp

// required .ProtoProduce.AnimalCPP animal = 1;
inline bool AdoptAnimalResp::has_animal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdoptAnimalResp::set_has_animal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdoptAnimalResp::clear_has_animal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdoptAnimalResp::clear_animal() {
  if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
  clear_has_animal();
}
inline const ::ProtoProduce::AnimalCPP& AdoptAnimalResp::animal() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AdoptAnimalResp.animal)
  return animal_ != NULL ? *animal_ : *default_instance_->animal_;
}
inline ::ProtoProduce::AnimalCPP* AdoptAnimalResp::mutable_animal() {
  set_has_animal();
  if (animal_ == NULL) animal_ = new ::ProtoProduce::AnimalCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.AdoptAnimalResp.animal)
  return animal_;
}
inline ::ProtoProduce::AnimalCPP* AdoptAnimalResp::release_animal() {
  clear_has_animal();
  ::ProtoProduce::AnimalCPP* temp = animal_;
  animal_ = NULL;
  return temp;
}
inline void AdoptAnimalResp::set_allocated_animal(::ProtoProduce::AnimalCPP* animal) {
  delete animal_;
  animal_ = animal;
  if (animal) {
    set_has_animal();
  } else {
    clear_has_animal();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.AdoptAnimalResp.animal)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool AdoptAnimalResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdoptAnimalResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdoptAnimalResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdoptAnimalResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& AdoptAnimalResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.AdoptAnimalResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* AdoptAnimalResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.AdoptAnimalResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* AdoptAnimalResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void AdoptAnimalResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.AdoptAnimalResp.commons)
}

// -------------------------------------------------------------------

// FeedAnimalReq

// required uint32 animalud = 1;
inline bool FeedAnimalReq::has_animalud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedAnimalReq::set_has_animalud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedAnimalReq::clear_has_animalud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedAnimalReq::clear_animalud() {
  animalud_ = 0u;
  clear_has_animalud();
}
inline ::google::protobuf::uint32 FeedAnimalReq::animalud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FeedAnimalReq.animalud)
  return animalud_;
}
inline void FeedAnimalReq::set_animalud(::google::protobuf::uint32 value) {
  set_has_animalud();
  animalud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.FeedAnimalReq.animalud)
}

// required uint32 fodderud = 2;
inline bool FeedAnimalReq::has_fodderud() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedAnimalReq::set_has_fodderud() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedAnimalReq::clear_has_fodderud() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedAnimalReq::clear_fodderud() {
  fodderud_ = 0u;
  clear_has_fodderud();
}
inline ::google::protobuf::uint32 FeedAnimalReq::fodderud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FeedAnimalReq.fodderud)
  return fodderud_;
}
inline void FeedAnimalReq::set_fodderud(::google::protobuf::uint32 value) {
  set_has_fodderud();
  fodderud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.FeedAnimalReq.fodderud)
}

// -------------------------------------------------------------------

// FeedAnimalResp

// required .ProtoProduce.AnimalCPP animal = 1;
inline bool FeedAnimalResp::has_animal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeedAnimalResp::set_has_animal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeedAnimalResp::clear_has_animal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeedAnimalResp::clear_animal() {
  if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
  clear_has_animal();
}
inline const ::ProtoProduce::AnimalCPP& FeedAnimalResp::animal() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FeedAnimalResp.animal)
  return animal_ != NULL ? *animal_ : *default_instance_->animal_;
}
inline ::ProtoProduce::AnimalCPP* FeedAnimalResp::mutable_animal() {
  set_has_animal();
  if (animal_ == NULL) animal_ = new ::ProtoProduce::AnimalCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.FeedAnimalResp.animal)
  return animal_;
}
inline ::ProtoProduce::AnimalCPP* FeedAnimalResp::release_animal() {
  clear_has_animal();
  ::ProtoProduce::AnimalCPP* temp = animal_;
  animal_ = NULL;
  return temp;
}
inline void FeedAnimalResp::set_allocated_animal(::ProtoProduce::AnimalCPP* animal) {
  delete animal_;
  animal_ = animal;
  if (animal) {
    set_has_animal();
  } else {
    clear_has_animal();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.FeedAnimalResp.animal)
}

// required .DataCommon.CommonItemsCPP commons = 2;
inline bool FeedAnimalResp::has_commons() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeedAnimalResp::set_has_commons() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeedAnimalResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeedAnimalResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& FeedAnimalResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.FeedAnimalResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* FeedAnimalResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.FeedAnimalResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* FeedAnimalResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void FeedAnimalResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.FeedAnimalResp.commons)
}

// -------------------------------------------------------------------

// ObtainProductReq

// required uint32 animalud = 1;
inline bool ObtainProductReq::has_animalud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObtainProductReq::set_has_animalud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObtainProductReq::clear_has_animalud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObtainProductReq::clear_animalud() {
  animalud_ = 0u;
  clear_has_animalud();
}
inline ::google::protobuf::uint32 ObtainProductReq::animalud() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ObtainProductReq.animalud)
  return animalud_;
}
inline void ObtainProductReq::set_animalud(::google::protobuf::uint32 value) {
  set_has_animalud();
  animalud_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ObtainProductReq.animalud)
}

// -------------------------------------------------------------------

// ObtainProductResp

// required bool isfull = 1;
inline bool ObtainProductResp::has_isfull() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObtainProductResp::set_has_isfull() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObtainProductResp::clear_has_isfull() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObtainProductResp::clear_isfull() {
  isfull_ = false;
  clear_has_isfull();
}
inline bool ObtainProductResp::isfull() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ObtainProductResp.isfull)
  return isfull_;
}
inline void ObtainProductResp::set_isfull(bool value) {
  set_has_isfull();
  isfull_ = value;
  // @@protoc_insertion_point(field_set:ProtoProduce.ObtainProductResp.isfull)
}

// optional .ProtoProduce.AnimalCPP animal = 2;
inline bool ObtainProductResp::has_animal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObtainProductResp::set_has_animal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObtainProductResp::clear_has_animal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObtainProductResp::clear_animal() {
  if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
  clear_has_animal();
}
inline const ::ProtoProduce::AnimalCPP& ObtainProductResp::animal() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ObtainProductResp.animal)
  return animal_ != NULL ? *animal_ : *default_instance_->animal_;
}
inline ::ProtoProduce::AnimalCPP* ObtainProductResp::mutable_animal() {
  set_has_animal();
  if (animal_ == NULL) animal_ = new ::ProtoProduce::AnimalCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ObtainProductResp.animal)
  return animal_;
}
inline ::ProtoProduce::AnimalCPP* ObtainProductResp::release_animal() {
  clear_has_animal();
  ::ProtoProduce::AnimalCPP* temp = animal_;
  animal_ = NULL;
  return temp;
}
inline void ObtainProductResp::set_allocated_animal(::ProtoProduce::AnimalCPP* animal) {
  delete animal_;
  animal_ = animal;
  if (animal) {
    set_has_animal();
  } else {
    clear_has_animal();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.ObtainProductResp.animal)
}

// optional .DataCommon.CommonItemsCPP commons = 3;
inline bool ObtainProductResp::has_commons() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObtainProductResp::set_has_commons() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObtainProductResp::clear_has_commons() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObtainProductResp::clear_commons() {
  if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  clear_has_commons();
}
inline const ::DataCommon::CommonItemsCPP& ObtainProductResp::commons() const {
  // @@protoc_insertion_point(field_get:ProtoProduce.ObtainProductResp.commons)
  return commons_ != NULL ? *commons_ : *default_instance_->commons_;
}
inline ::DataCommon::CommonItemsCPP* ObtainProductResp::mutable_commons() {
  set_has_commons();
  if (commons_ == NULL) commons_ = new ::DataCommon::CommonItemsCPP;
  // @@protoc_insertion_point(field_mutable:ProtoProduce.ObtainProductResp.commons)
  return commons_;
}
inline ::DataCommon::CommonItemsCPP* ObtainProductResp::release_commons() {
  clear_has_commons();
  ::DataCommon::CommonItemsCPP* temp = commons_;
  commons_ = NULL;
  return temp;
}
inline void ObtainProductResp::set_allocated_commons(::DataCommon::CommonItemsCPP* commons) {
  delete commons_;
  commons_ = commons;
  if (commons) {
    set_has_commons();
  } else {
    clear_has_commons();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoProduce.ObtainProductResp.commons)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoProduce

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoProduce_2eproto__INCLUDED
