// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "User.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace User {

namespace {

const ::google::protobuf::Descriptor* Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestOtherUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestOtherUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tutorial_stage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tutorial_stage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CostCashResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CostCashResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccumulateCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccumulateCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushAccumulateChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushAccumulateChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeedUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeedUpResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyMaterialResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_User_2eproto() {
  protobuf_AddDesc_User_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "User.proto");
  GOOGLE_CHECK(file != NULL);
  Base_descriptor_ = file->message_type(0);
  static const int Base_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registerplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, registertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastloginplatform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logintimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, logindays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastactivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, lastofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, forbidreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, tutorialstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, fig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, acccharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, firstrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, allianceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, barrier_),
  };
  Base_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Base_descriptor_,
      Base::default_instance_,
      Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Base, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Base));
  ActivityItem_descriptor_ = file->message_type(1);
  static const int ActivityItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, bts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, ver_),
  };
  ActivityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityItem_descriptor_,
      ActivityItem::default_instance_,
      ActivityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityItem));
  Activity_descriptor_ = file->message_type(2);
  static const int Activity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, act_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  User_descriptor_ = file->message_type(3);
  static const int User_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, notifies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, charges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gameactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, builds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, equipments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, animals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, equipmentstars_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  RequestOtherUser_descriptor_ = file->message_type(4);
  static const int RequestOtherUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, uid_),
  };
  RequestOtherUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestOtherUser_descriptor_,
      RequestOtherUser::default_instance_,
      RequestOtherUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOtherUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestOtherUser));
  OtherUser_descriptor_ = file->message_type(5);
  static const int OtherUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, base_),
  };
  OtherUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherUser_descriptor_,
      OtherUser::default_instance_,
      OtherUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherUser));
  Tutorial_stage_descriptor_ = file->message_type(6);
  static const int Tutorial_stage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, tutorialstage_),
  };
  Tutorial_stage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tutorial_stage_descriptor_,
      Tutorial_stage::default_instance_,
      Tutorial_stage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tutorial_stage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tutorial_stage));
  ServerTime_descriptor_ = file->message_type(7);
  static const int ServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, ts_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  CostCashReq_descriptor_ = file->message_type(8);
  static const int CostCashReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, operation_),
  };
  CostCashReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashReq_descriptor_,
      CostCashReq::default_instance_,
      CostCashReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashReq));
  CostCashResp_descriptor_ = file->message_type(9);
  static const int CostCashResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, operation_),
  };
  CostCashResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CostCashResp_descriptor_,
      CostCashResp::default_instance_,
      CostCashResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CostCashResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CostCashResp));
  ChargeItem_descriptor_ = file->message_type(10);
  static const int ChargeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, ts_),
  };
  ChargeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeItem_descriptor_,
      ChargeItem::default_instance_,
      ChargeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeItem));
  AccumulateCharge_descriptor_ = file->message_type(11);
  static const int AccumulateCharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, accumulatecharge_),
  };
  AccumulateCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccumulateCharge_descriptor_,
      AccumulateCharge::default_instance_,
      AccumulateCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccumulateCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccumulateCharge));
  PushAccumulateChangeReq_descriptor_ = file->message_type(12);
  static const int PushAccumulateChangeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, changeacccharge_),
  };
  PushAccumulateChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushAccumulateChangeReq_descriptor_,
      PushAccumulateChangeReq::default_instance_,
      PushAccumulateChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushAccumulateChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushAccumulateChangeReq));
  SpeedUpReq_descriptor_ = file->message_type(13);
  static const int SpeedUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, ud_),
  };
  SpeedUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpReq_descriptor_,
      SpeedUpReq::default_instance_,
      SpeedUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpReq));
  SpeedUpResp_descriptor_ = file->message_type(14);
  static const int SpeedUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, commons_),
  };
  SpeedUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpeedUpResp_descriptor_,
      SpeedUpResp::default_instance_,
      SpeedUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeedUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpeedUpResp));
  BuyMaterialInfo_descriptor_ = file->message_type(15);
  static const int BuyMaterialInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, props_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, props_cnt_),
  };
  BuyMaterialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialInfo_descriptor_,
      BuyMaterialInfo::default_instance_,
      BuyMaterialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialInfo));
  BuyMaterialReq_descriptor_ = file->message_type(16);
  static const int BuyMaterialReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, buy_info_),
  };
  BuyMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialReq_descriptor_,
      BuyMaterialReq::default_instance_,
      BuyMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialReq));
  BuyMaterialResp_descriptor_ = file->message_type(17);
  static const int BuyMaterialResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, commons_),
  };
  BuyMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyMaterialResp_descriptor_,
      BuyMaterialResp::default_instance_,
      BuyMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyMaterialResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_User_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Base_descriptor_, &Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityItem_descriptor_, &ActivityItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestOtherUser_descriptor_, &RequestOtherUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherUser_descriptor_, &OtherUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tutorial_stage_descriptor_, &Tutorial_stage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashReq_descriptor_, &CostCashReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CostCashResp_descriptor_, &CostCashResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeItem_descriptor_, &ChargeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccumulateCharge_descriptor_, &AccumulateCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushAccumulateChangeReq_descriptor_, &PushAccumulateChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpReq_descriptor_, &SpeedUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpeedUpResp_descriptor_, &SpeedUpResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialInfo_descriptor_, &BuyMaterialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialReq_descriptor_, &BuyMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyMaterialResp_descriptor_, &BuyMaterialResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_User_2eproto() {
  delete Base::default_instance_;
  delete Base_reflection_;
  delete ActivityItem::default_instance_;
  delete ActivityItem_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete RequestOtherUser::default_instance_;
  delete RequestOtherUser_reflection_;
  delete OtherUser::default_instance_;
  delete OtherUser_reflection_;
  delete Tutorial_stage::default_instance_;
  delete Tutorial_stage_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete CostCashReq::default_instance_;
  delete CostCashReq_reflection_;
  delete CostCashResp::default_instance_;
  delete CostCashResp_reflection_;
  delete ChargeItem::default_instance_;
  delete ChargeItem_reflection_;
  delete AccumulateCharge::default_instance_;
  delete AccumulateCharge_reflection_;
  delete PushAccumulateChangeReq::default_instance_;
  delete PushAccumulateChangeReq_reflection_;
  delete SpeedUpReq::default_instance_;
  delete SpeedUpReq_reflection_;
  delete SpeedUpResp::default_instance_;
  delete SpeedUpResp_reflection_;
  delete BuyMaterialInfo::default_instance_;
  delete BuyMaterialInfo_reflection_;
  delete BuyMaterialReq::default_instance_;
  delete BuyMaterialReq_reflection_;
  delete BuyMaterialResp::default_instance_;
  delete BuyMaterialResp_reflection_;
}

void protobuf_AddDesc_User_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProtoNotify::protobuf_AddDesc_ProtoNotify_2eproto();
  ::ProtoActivity::protobuf_AddDesc_ProtoActivity_2eproto();
  ::ProtoBuilding::protobuf_AddDesc_ProtoBuilding_2eproto();
  ::ProtoProduce::protobuf_AddDesc_ProtoProduce_2eproto();
  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nUser.proto\022\004User\032\021ProtoNotify.proto\032\023P"
    "rotoActivity.proto\032\023ProtoBuilding.proto\032"
    "\022ProtoProduce.proto\032\020DataCommon.proto\"\274\003"
    "\n\004Base\022\013\n\003uid\030\001 \002(\r\022\030\n\020registerPlatform\030"
    "\002 \002(\r\022\024\n\014registerTime\030\003 \002(\r\022\031\n\021lastLogin"
    "Platform\030\004 \002(\r\022\025\n\rlastLoginTime\030\005 \002(\r\022\022\n"
    "\nloginTimes\030\006 \002(\r\022\021\n\tloginDays\030\007 \002(\r\022\026\n\016"
    "lastActiveTime\030\010 \002(\r\022\023\n\013lastOffTime\030\t \002("
    "\r\022\020\n\010forbidTs\030\n \002(\r\022\024\n\014forbidReason\030\013 \002("
    "\014\022\025\n\rtutorialStage\030\014 \002(\r\022\014\n\004name\030\r \002(\014\022\013"
    "\n\003fig\030\016 \002(\014\022\013\n\003exp\030\017 \002(\004\022\r\n\005level\030\020 \002(\r\022"
    "\021\n\tacccharge\030\021 \002(\r\022\020\n\010viplevel\030\022 \002(\r\022\014\n\004"
    "cash\030\023 \002(\r\022\014\n\004coin\030\024 \002(\r\022\025\n\rfirstRecharg"
    "e\030\025 \002(\r\022\022\n\nallianceId\030\026 \002(\r\022\017\n\007barrier\030\027"
    " \002(\014\"A\n\014ActivityItem\022\n\n\002id\030\001 \002(\r\022\013\n\003bts\030"
    "\002 \002(\r\022\013\n\003ets\030\003 \002(\r\022\013\n\003ver\030\004 \002(\r\"+\n\010Activ"
    "ity\022\037\n\003act\030\001 \003(\0132\022.User.ActivityItem\"\371\003\n"
    "\004User\022\030\n\004base\030\001 \002(\0132\n.User.Base\022\n\n\002ts\030\002 "
    "\002(\r\022 \n\010activity\030\003 \002(\0132\016.User.Activity\022/\n"
    "\010notifies\030\004 \001(\0132\035.ProtoNotify.NotifyItem"
    "CPPAll\022\'\n\007charges\030\005 \002(\0132\026.User.Accumulat"
    "eCharge\0228\n\014gameactivity\030\006 \002(\0132\".ProtoAct"
    "ivity.GameAcitivityAllCPP\022&\n\004item\030\007 \003(\0132"
    "\030.DataCommon.PropsItemCPP\022*\n\006builds\030\010 \003("
    "\0132\032.ProtoBuilding.BuildingCPP\022+\n\010croplan"
    "d\030\t \003(\0132\031.ProtoProduce.CropLandCPP\0221\n\neq"
    "uipments\030\n \003(\0132\035.ProtoProduce.ProduceEqu"
    "ipCPP\022(\n\007animals\030\013 \003(\0132\027.ProtoProduce.An"
    "imalCPP\0227\n\016equipmentstars\030\014 \003(\0132\037.ProtoB"
    "uilding.EquipmentStarCPP\"\037\n\020RequestOther"
    "User\022\013\n\003uid\030\001 \002(\r\"%\n\tOtherUser\022\030\n\004base\030\001"
    " \002(\0132\n.User.Base\"\'\n\016Tutorial_stage\022\025\n\rtu"
    "torialStage\030\001 \002(\r\"\030\n\nServerTime\022\n\n\002ts\030\001 "
    "\002(\r\">\n\013CostCashReq\022\014\n\004cash\030\001 \002(\r\022\016\n\006opCo"
    "de\030\002 \002(\t\022\021\n\toperation\030\003 \002(\r\"/\n\014CostCashR"
    "esp\022\014\n\004cash\030\001 \002(\r\022\021\n\toperation\030\002 \002(\r\"&\n\n"
    "ChargeItem\022\014\n\004cash\030\001 \002(\r\022\n\n\002ts\030\002 \002(\r\">\n\020"
    "AccumulateCharge\022*\n\020accumulateCharge\030\001 \003"
    "(\0132\020.User.ChargeItem\"J\n\027PushAccumulateCh"
    "angeReq\022/\n\017changeAcccharge\030\001 \002(\0132\026.User."
    "AccumulateCharge\"\030\n\nSpeedUpReq\022\n\n\002ud\030\001 \002"
    "(\r\":\n\013SpeedUpResp\022+\n\007commons\030\001 \001(\0132\032.Dat"
    "aCommon.CommonItemsCPP\"6\n\017BuyMaterialInf"
    "o\022\020\n\010props_id\030\001 \002(\r\022\021\n\tprops_cnt\030\002 \002(\r\"9"
    "\n\016BuyMaterialReq\022\'\n\010buy_info\030\001 \003(\0132\025.Use"
    "r.BuyMaterialInfo\">\n\017BuyMaterialResp\022+\n\007"
    "commons\030\001 \002(\0132\032.DataCommon.CommonItemsCP"
    "P", 1881);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "User.proto", &protobuf_RegisterTypes);
  Base::default_instance_ = new Base();
  ActivityItem::default_instance_ = new ActivityItem();
  Activity::default_instance_ = new Activity();
  User::default_instance_ = new User();
  RequestOtherUser::default_instance_ = new RequestOtherUser();
  OtherUser::default_instance_ = new OtherUser();
  Tutorial_stage::default_instance_ = new Tutorial_stage();
  ServerTime::default_instance_ = new ServerTime();
  CostCashReq::default_instance_ = new CostCashReq();
  CostCashResp::default_instance_ = new CostCashResp();
  ChargeItem::default_instance_ = new ChargeItem();
  AccumulateCharge::default_instance_ = new AccumulateCharge();
  PushAccumulateChangeReq::default_instance_ = new PushAccumulateChangeReq();
  SpeedUpReq::default_instance_ = new SpeedUpReq();
  SpeedUpResp::default_instance_ = new SpeedUpResp();
  BuyMaterialInfo::default_instance_ = new BuyMaterialInfo();
  BuyMaterialReq::default_instance_ = new BuyMaterialReq();
  BuyMaterialResp::default_instance_ = new BuyMaterialResp();
  Base::default_instance_->InitAsDefaultInstance();
  ActivityItem::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  RequestOtherUser::default_instance_->InitAsDefaultInstance();
  OtherUser::default_instance_->InitAsDefaultInstance();
  Tutorial_stage::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  CostCashReq::default_instance_->InitAsDefaultInstance();
  CostCashResp::default_instance_->InitAsDefaultInstance();
  ChargeItem::default_instance_->InitAsDefaultInstance();
  AccumulateCharge::default_instance_->InitAsDefaultInstance();
  PushAccumulateChangeReq::default_instance_->InitAsDefaultInstance();
  SpeedUpReq::default_instance_->InitAsDefaultInstance();
  SpeedUpResp::default_instance_->InitAsDefaultInstance();
  BuyMaterialInfo::default_instance_->InitAsDefaultInstance();
  BuyMaterialReq::default_instance_->InitAsDefaultInstance();
  BuyMaterialResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_User_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_User_2eproto {
  StaticDescriptorInitializer_User_2eproto() {
    protobuf_AddDesc_User_2eproto();
  }
} static_descriptor_initializer_User_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Base::kUidFieldNumber;
const int Base::kRegisterPlatformFieldNumber;
const int Base::kRegisterTimeFieldNumber;
const int Base::kLastLoginPlatformFieldNumber;
const int Base::kLastLoginTimeFieldNumber;
const int Base::kLoginTimesFieldNumber;
const int Base::kLoginDaysFieldNumber;
const int Base::kLastActiveTimeFieldNumber;
const int Base::kLastOffTimeFieldNumber;
const int Base::kForbidTsFieldNumber;
const int Base::kForbidReasonFieldNumber;
const int Base::kTutorialStageFieldNumber;
const int Base::kNameFieldNumber;
const int Base::kFigFieldNumber;
const int Base::kExpFieldNumber;
const int Base::kLevelFieldNumber;
const int Base::kAccchargeFieldNumber;
const int Base::kViplevelFieldNumber;
const int Base::kCashFieldNumber;
const int Base::kCoinFieldNumber;
const int Base::kFirstRechargeFieldNumber;
const int Base::kAllianceIdFieldNumber;
const int Base::kBarrierFieldNumber;
#endif  // !_MSC_VER

Base::Base()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Base)
}

void Base::InitAsDefaultInstance() {
}

Base::Base(const Base& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Base)
}

void Base::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  registerplatform_ = 0u;
  registertime_ = 0u;
  lastloginplatform_ = 0u;
  lastlogintime_ = 0u;
  logintimes_ = 0u;
  logindays_ = 0u;
  lastactivetime_ = 0u;
  lastofftime_ = 0u;
  forbidts_ = 0u;
  forbidreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tutorialstage_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  acccharge_ = 0u;
  viplevel_ = 0u;
  cash_ = 0u;
  coin_ = 0u;
  firstrecharge_ = 0u;
  allianceid_ = 0u;
  barrier_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Base::~Base() {
  // @@protoc_insertion_point(destructor:User.Base)
  SharedDtor();
}

void Base::SharedDtor() {
  if (forbidreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete forbidreason_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (barrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete barrier_;
  }
  if (this != default_instance_) {
  }
}

void Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Base_descriptor_;
}

const Base& Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Base* Base::default_instance_ = NULL;

Base* Base::New() const {
  return new Base;
}

void Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, lastactivetime_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(lastofftime_, forbidts_);
    ZR_(tutorialstage_, exp_);
    if (has_forbidreason()) {
      if (forbidreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        forbidreason_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_fig()) {
      if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fig_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(acccharge_, allianceid_);
    if (has_barrier()) {
      if (barrier_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        barrier_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_registerPlatform;
        break;
      }

      // required uint32 registerPlatform = 2;
      case 2: {
        if (tag == 16) {
         parse_registerPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registerplatform_)));
          set_has_registerplatform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_registerTime;
        break;
      }

      // required uint32 registerTime = 3;
      case 3: {
        if (tag == 24) {
         parse_registerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registertime_)));
          set_has_registertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastLoginPlatform;
        break;
      }

      // required uint32 lastLoginPlatform = 4;
      case 4: {
        if (tag == 32) {
         parse_lastLoginPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastloginplatform_)));
          set_has_lastloginplatform();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastLoginTime;
        break;
      }

      // required uint32 lastLoginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loginTimes;
        break;
      }

      // required uint32 loginTimes = 6;
      case 6: {
        if (tag == 48) {
         parse_loginTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logintimes_)));
          set_has_logintimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_loginDays;
        break;
      }

      // required uint32 loginDays = 7;
      case 7: {
        if (tag == 56) {
         parse_loginDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logindays_)));
          set_has_logindays();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastActiveTime;
        break;
      }

      // required uint32 lastActiveTime = 8;
      case 8: {
        if (tag == 64) {
         parse_lastActiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastactivetime_)));
          set_has_lastactivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lastOffTime;
        break;
      }

      // required uint32 lastOffTime = 9;
      case 9: {
        if (tag == 72) {
         parse_lastOffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastofftime_)));
          set_has_lastofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_forbidTs;
        break;
      }

      // required uint32 forbidTs = 10;
      case 10: {
        if (tag == 80) {
         parse_forbidTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbidts_)));
          set_has_forbidts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_forbidReason;
        break;
      }

      // required bytes forbidReason = 11;
      case 11: {
        if (tag == 90) {
         parse_forbidReason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_forbidreason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tutorialStage;
        break;
      }

      // required uint32 tutorialStage = 12;
      case 12: {
        if (tag == 96) {
         parse_tutorialStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorialstage_)));
          set_has_tutorialstage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // required bytes name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_fig;
        break;
      }

      // required bytes fig = 14;
      case 14: {
        if (tag == 114) {
         parse_fig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_exp;
        break;
      }

      // required uint64 exp = 15;
      case 15: {
        if (tag == 120) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_level;
        break;
      }

      // required uint32 level = 16;
      case 16: {
        if (tag == 128) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_acccharge;
        break;
      }

      // required uint32 acccharge = 17;
      case 17: {
        if (tag == 136) {
         parse_acccharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acccharge_)));
          set_has_acccharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_viplevel;
        break;
      }

      // required uint32 viplevel = 18;
      case 18: {
        if (tag == 144) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_cash;
        break;
      }

      // required uint32 cash = 19;
      case 19: {
        if (tag == 152) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_coin;
        break;
      }

      // required uint32 coin = 20;
      case 20: {
        if (tag == 160) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_firstRecharge;
        break;
      }

      // required uint32 firstRecharge = 21;
      case 21: {
        if (tag == 168) {
         parse_firstRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstrecharge_)));
          set_has_firstrecharge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_allianceId;
        break;
      }

      // required uint32 allianceId = 22;
      case 22: {
        if (tag == 176) {
         parse_allianceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allianceid_)));
          set_has_allianceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_barrier;
        break;
      }

      // required bytes barrier = 23;
      case 23: {
        if (tag == 186) {
         parse_barrier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_barrier()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Base)
  return false;
#undef DO_
}

void Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->registerplatform(), output);
  }

  // required uint32 registerTime = 3;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->registertime(), output);
  }

  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastloginplatform(), output);
  }

  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastlogintime(), output);
  }

  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->logintimes(), output);
  }

  // required uint32 loginDays = 7;
  if (has_logindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->logindays(), output);
  }

  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lastactivetime(), output);
  }

  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lastofftime(), output);
  }

  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->forbidts(), output);
  }

  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->forbidreason(), output);
  }

  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tutorialstage(), output);
  }

  // required bytes name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->name(), output);
  }

  // required bytes fig = 14;
  if (has_fig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->fig(), output);
  }

  // required uint64 exp = 15;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->exp(), output);
  }

  // required uint32 level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->level(), output);
  }

  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->acccharge(), output);
  }

  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->viplevel(), output);
  }

  // required uint32 cash = 19;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->cash(), output);
  }

  // required uint32 coin = 20;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->coin(), output);
  }

  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->firstrecharge(), output);
  }

  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->allianceid(), output);
  }

  // required bytes barrier = 23;
  if (has_barrier()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->barrier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Base)
}

::google::protobuf::uint8* Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Base)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 registerPlatform = 2;
  if (has_registerplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->registerplatform(), target);
  }

  // required uint32 registerTime = 3;
  if (has_registertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->registertime(), target);
  }

  // required uint32 lastLoginPlatform = 4;
  if (has_lastloginplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lastloginplatform(), target);
  }

  // required uint32 lastLoginTime = 5;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastlogintime(), target);
  }

  // required uint32 loginTimes = 6;
  if (has_logintimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->logintimes(), target);
  }

  // required uint32 loginDays = 7;
  if (has_logindays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->logindays(), target);
  }

  // required uint32 lastActiveTime = 8;
  if (has_lastactivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lastactivetime(), target);
  }

  // required uint32 lastOffTime = 9;
  if (has_lastofftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lastofftime(), target);
  }

  // required uint32 forbidTs = 10;
  if (has_forbidts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->forbidts(), target);
  }

  // required bytes forbidReason = 11;
  if (has_forbidreason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->forbidreason(), target);
  }

  // required uint32 tutorialStage = 12;
  if (has_tutorialstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tutorialstage(), target);
  }

  // required bytes name = 13;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->name(), target);
  }

  // required bytes fig = 14;
  if (has_fig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->fig(), target);
  }

  // required uint64 exp = 15;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->exp(), target);
  }

  // required uint32 level = 16;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->level(), target);
  }

  // required uint32 acccharge = 17;
  if (has_acccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->acccharge(), target);
  }

  // required uint32 viplevel = 18;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->viplevel(), target);
  }

  // required uint32 cash = 19;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->cash(), target);
  }

  // required uint32 coin = 20;
  if (has_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->coin(), target);
  }

  // required uint32 firstRecharge = 21;
  if (has_firstrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->firstrecharge(), target);
  }

  // required uint32 allianceId = 22;
  if (has_allianceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->allianceid(), target);
  }

  // required bytes barrier = 23;
  if (has_barrier()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        23, this->barrier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Base)
  return target;
}

int Base::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 registerPlatform = 2;
    if (has_registerplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registerplatform());
    }

    // required uint32 registerTime = 3;
    if (has_registertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registertime());
    }

    // required uint32 lastLoginPlatform = 4;
    if (has_lastloginplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastloginplatform());
    }

    // required uint32 lastLoginTime = 5;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }

    // required uint32 loginTimes = 6;
    if (has_logintimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logintimes());
    }

    // required uint32 loginDays = 7;
    if (has_logindays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logindays());
    }

    // required uint32 lastActiveTime = 8;
    if (has_lastactivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastactivetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 lastOffTime = 9;
    if (has_lastofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastofftime());
    }

    // required uint32 forbidTs = 10;
    if (has_forbidts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbidts());
    }

    // required bytes forbidReason = 11;
    if (has_forbidreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->forbidreason());
    }

    // required uint32 tutorialStage = 12;
    if (has_tutorialstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorialstage());
    }

    // required bytes name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes fig = 14;
    if (has_fig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->fig());
    }

    // required uint64 exp = 15;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 acccharge = 17;
    if (has_acccharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acccharge());
    }

    // required uint32 viplevel = 18;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 cash = 19;
    if (has_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 coin = 20;
    if (has_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 firstRecharge = 21;
    if (has_firstrecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstrecharge());
    }

    // required uint32 allianceId = 22;
    if (has_allianceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allianceid());
    }

    // required bytes barrier = 23;
    if (has_barrier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->barrier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Base::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Base::MergeFrom(const Base& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_registerplatform()) {
      set_registerplatform(from.registerplatform());
    }
    if (from.has_registertime()) {
      set_registertime(from.registertime());
    }
    if (from.has_lastloginplatform()) {
      set_lastloginplatform(from.lastloginplatform());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_logintimes()) {
      set_logintimes(from.logintimes());
    }
    if (from.has_logindays()) {
      set_logindays(from.logindays());
    }
    if (from.has_lastactivetime()) {
      set_lastactivetime(from.lastactivetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastofftime()) {
      set_lastofftime(from.lastofftime());
    }
    if (from.has_forbidts()) {
      set_forbidts(from.forbidts());
    }
    if (from.has_forbidreason()) {
      set_forbidreason(from.forbidreason());
    }
    if (from.has_tutorialstage()) {
      set_tutorialstage(from.tutorialstage());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fig()) {
      set_fig(from.fig());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_acccharge()) {
      set_acccharge(from.acccharge());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_firstrecharge()) {
      set_firstrecharge(from.firstrecharge());
    }
    if (from.has_allianceid()) {
      set_allianceid(from.allianceid());
    }
    if (from.has_barrier()) {
      set_barrier(from.barrier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Base::CopyFrom(const Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  return true;
}

void Base::Swap(Base* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(registerplatform_, other->registerplatform_);
    std::swap(registertime_, other->registertime_);
    std::swap(lastloginplatform_, other->lastloginplatform_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(logintimes_, other->logintimes_);
    std::swap(logindays_, other->logindays_);
    std::swap(lastactivetime_, other->lastactivetime_);
    std::swap(lastofftime_, other->lastofftime_);
    std::swap(forbidts_, other->forbidts_);
    std::swap(forbidreason_, other->forbidreason_);
    std::swap(tutorialstage_, other->tutorialstage_);
    std::swap(name_, other->name_);
    std::swap(fig_, other->fig_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(acccharge_, other->acccharge_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(cash_, other->cash_);
    std::swap(coin_, other->coin_);
    std::swap(firstrecharge_, other->firstrecharge_);
    std::swap(allianceid_, other->allianceid_);
    std::swap(barrier_, other->barrier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Base_descriptor_;
  metadata.reflection = Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityItem::kIdFieldNumber;
const int ActivityItem::kBtsFieldNumber;
const int ActivityItem::kEtsFieldNumber;
const int ActivityItem::kVerFieldNumber;
#endif  // !_MSC_VER

ActivityItem::ActivityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.ActivityItem)
}

void ActivityItem::InitAsDefaultInstance() {
}

ActivityItem::ActivityItem(const ActivityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.ActivityItem)
}

void ActivityItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  bts_ = 0u;
  ets_ = 0u;
  ver_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityItem::~ActivityItem() {
  // @@protoc_insertion_point(destructor:User.ActivityItem)
  SharedDtor();
}

void ActivityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityItem_descriptor_;
}

const ActivityItem& ActivityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

ActivityItem* ActivityItem::default_instance_ = NULL;

ActivityItem* ActivityItem::New() const {
  return new ActivityItem;
}

void ActivityItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, ver_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.ActivityItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_bts;
        break;
      }

      // required uint32 bts = 2;
      case 2: {
        if (tag == 16) {
         parse_bts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bts_)));
          set_has_bts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ets;
        break;
      }

      // required uint32 ets = 3;
      case 3: {
        if (tag == 24) {
         parse_ets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ets_)));
          set_has_ets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ver;
        break;
      }

      // required uint32 ver = 4;
      case 4: {
        if (tag == 32) {
         parse_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.ActivityItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.ActivityItem)
  return false;
#undef DO_
}

void ActivityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.ActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 bts = 2;
  if (has_bts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bts(), output);
  }

  // required uint32 ets = 3;
  if (has_ets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ets(), output);
  }

  // required uint32 ver = 4;
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.ActivityItem)
}

::google::protobuf::uint8* ActivityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.ActivityItem)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 bts = 2;
  if (has_bts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bts(), target);
  }

  // required uint32 ets = 3;
  if (has_ets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ets(), target);
  }

  // required uint32 ver = 4;
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.ActivityItem)
  return target;
}

int ActivityItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 bts = 2;
    if (has_bts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bts());
    }

    // required uint32 ets = 3;
    if (has_ets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ets());
    }

    // required uint32 ver = 4;
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityItem::MergeFrom(const ActivityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bts()) {
      set_bts(from.bts());
    }
    if (from.has_ets()) {
      set_ets(from.ets());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityItem::CopyFrom(const ActivityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ActivityItem::Swap(ActivityItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bts_, other->bts_);
    std::swap(ets_, other->ets_);
    std::swap(ver_, other->ver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityItem_descriptor_;
  metadata.reflection = ActivityItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kActFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Activity)
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Activity)
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  // @@protoc_insertion_point(destructor:User.Activity)
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Activity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.ActivityItem act = 1;
      case 1: {
        if (tag == 10) {
         parse_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_act()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_act;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Activity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Activity)
  return false;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Activity)
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Activity)
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Activity)
  // repeated .User.ActivityItem act = 1;
  for (int i = 0; i < this->act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Activity)
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  // repeated .User.ActivityItem act = 1;
  total_size += 1 * this->act_size();
  for (int i = 0; i < this->act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  act_.MergeFrom(from.act_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->act())) return false;
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    act_.Swap(&other->act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kBaseFieldNumber;
const int User::kTsFieldNumber;
const int User::kActivityFieldNumber;
const int User::kNotifiesFieldNumber;
const int User::kChargesFieldNumber;
const int User::kGameactivityFieldNumber;
const int User::kItemFieldNumber;
const int User::kBuildsFieldNumber;
const int User::kCroplandFieldNumber;
const int User::kEquipmentsFieldNumber;
const int User::kAnimalsFieldNumber;
const int User::kEquipmentstarsFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.User)
}

void User::InitAsDefaultInstance() {
  base_ = const_cast< ::User::Base*>(&::User::Base::default_instance());
  activity_ = const_cast< ::User::Activity*>(&::User::Activity::default_instance());
  notifies_ = const_cast< ::ProtoNotify::NotifyItemCPPAll*>(&::ProtoNotify::NotifyItemCPPAll::default_instance());
  charges_ = const_cast< ::User::AccumulateCharge*>(&::User::AccumulateCharge::default_instance());
  gameactivity_ = const_cast< ::ProtoActivity::GameAcitivityAllCPP*>(&::ProtoActivity::GameAcitivityAllCPP::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.User)
}

void User::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ts_ = 0u;
  activity_ = NULL;
  notifies_ = NULL;
  charges_ = NULL;
  gameactivity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:User.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete activity_;
    delete notifies_;
    delete charges_;
    delete gameactivity_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_base()) {
      if (base_ != NULL) base_->::User::Base::Clear();
    }
    ts_ = 0u;
    if (has_activity()) {
      if (activity_ != NULL) activity_->::User::Activity::Clear();
    }
    if (has_notifies()) {
      if (notifies_ != NULL) notifies_->::ProtoNotify::NotifyItemCPPAll::Clear();
    }
    if (has_charges()) {
      if (charges_ != NULL) charges_->::User::AccumulateCharge::Clear();
    }
    if (has_gameactivity()) {
      if (gameactivity_ != NULL) gameactivity_->::ProtoActivity::GameAcitivityAllCPP::Clear();
    }
  }
  item_.Clear();
  builds_.Clear();
  cropland_.Clear();
  equipments_.Clear();
  animals_.Clear();
  equipmentstars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_activity;
        break;
      }

      // required .User.Activity activity = 3;
      case 3: {
        if (tag == 26) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_notifies;
        break;
      }

      // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
      case 4: {
        if (tag == 34) {
         parse_notifies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notifies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_charges;
        break;
      }

      // required .User.AccumulateCharge charges = 5;
      case 5: {
        if (tag == 42) {
         parse_charges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gameactivity;
        break;
      }

      // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
      case 6: {
        if (tag == 50) {
         parse_gameactivity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameactivity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }

      // repeated .DataCommon.PropsItemCPP item = 7;
      case 7: {
        if (tag == 58) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_item;
        if (input->ExpectTag(66)) goto parse_builds;
        break;
      }

      // repeated .ProtoBuilding.BuildingCPP builds = 8;
      case 8: {
        if (tag == 66) {
         parse_builds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_builds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_builds;
        if (input->ExpectTag(74)) goto parse_cropland;
        break;
      }

      // repeated .ProtoProduce.CropLandCPP cropland = 9;
      case 9: {
        if (tag == 74) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_cropland;
        if (input->ExpectTag(82)) goto parse_equipments;
        break;
      }

      // repeated .ProtoProduce.ProduceEquipCPP equipments = 10;
      case 10: {
        if (tag == 82) {
         parse_equipments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipments()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_equipments;
        if (input->ExpectTag(90)) goto parse_animals;
        break;
      }

      // repeated .ProtoProduce.AnimalCPP animals = 11;
      case 11: {
        if (tag == 90) {
         parse_animals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_animals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_animals;
        if (input->ExpectTag(98)) goto parse_equipmentstars;
        break;
      }

      // repeated .ProtoBuilding.EquipmentStarCPP equipmentstars = 12;
      case 12: {
        if (tag == 98) {
         parse_equipmentstars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentstars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_equipmentstars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.User)
  // required .User.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // required .User.Activity activity = 3;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activity(), output);
  }

  // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
  if (has_notifies()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->notifies(), output);
  }

  // required .User.AccumulateCharge charges = 5;
  if (has_charges()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->charges(), output);
  }

  // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
  if (has_gameactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gameactivity(), output);
  }

  // repeated .DataCommon.PropsItemCPP item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }

  // repeated .ProtoBuilding.BuildingCPP builds = 8;
  for (int i = 0; i < this->builds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->builds(i), output);
  }

  // repeated .ProtoProduce.CropLandCPP cropland = 9;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cropland(i), output);
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 10;
  for (int i = 0; i < this->equipments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->equipments(i), output);
  }

  // repeated .ProtoProduce.AnimalCPP animals = 11;
  for (int i = 0; i < this->animals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->animals(i), output);
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstars = 12;
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->equipmentstars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.User)
  // required .User.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // required .User.Activity activity = 3;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activity(), target);
  }

  // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
  if (has_notifies()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->notifies(), target);
  }

  // required .User.AccumulateCharge charges = 5;
  if (has_charges()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->charges(), target);
  }

  // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
  if (has_gameactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gameactivity(), target);
  }

  // repeated .DataCommon.PropsItemCPP item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }

  // repeated .ProtoBuilding.BuildingCPP builds = 8;
  for (int i = 0; i < this->builds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->builds(i), target);
  }

  // repeated .ProtoProduce.CropLandCPP cropland = 9;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cropland(i), target);
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 10;
  for (int i = 0; i < this->equipments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->equipments(i), target);
  }

  // repeated .ProtoProduce.AnimalCPP animals = 11;
  for (int i = 0; i < this->animals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->animals(i), target);
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstars = 12;
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->equipmentstars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // required .User.Activity activity = 3;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional .ProtoNotify.NotifyItemCPPAll notifies = 4;
    if (has_notifies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notifies());
    }

    // required .User.AccumulateCharge charges = 5;
    if (has_charges()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charges());
    }

    // required .ProtoActivity.GameAcitivityAllCPP gameactivity = 6;
    if (has_gameactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameactivity());
    }

  }
  // repeated .DataCommon.PropsItemCPP item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .ProtoBuilding.BuildingCPP builds = 8;
  total_size += 1 * this->builds_size();
  for (int i = 0; i < this->builds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->builds(i));
  }

  // repeated .ProtoProduce.CropLandCPP cropland = 9;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  // repeated .ProtoProduce.ProduceEquipCPP equipments = 10;
  total_size += 1 * this->equipments_size();
  for (int i = 0; i < this->equipments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipments(i));
  }

  // repeated .ProtoProduce.AnimalCPP animals = 11;
  total_size += 1 * this->animals_size();
  for (int i = 0; i < this->animals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->animals(i));
  }

  // repeated .ProtoBuilding.EquipmentStarCPP equipmentstars = 12;
  total_size += 1 * this->equipmentstars_size();
  for (int i = 0; i < this->equipmentstars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentstars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  builds_.MergeFrom(from.builds_);
  cropland_.MergeFrom(from.cropland_);
  equipments_.MergeFrom(from.equipments_);
  animals_.MergeFrom(from.animals_);
  equipmentstars_.MergeFrom(from.equipmentstars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::User::Base::MergeFrom(from.base());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_activity()) {
      mutable_activity()->::User::Activity::MergeFrom(from.activity());
    }
    if (from.has_notifies()) {
      mutable_notifies()->::ProtoNotify::NotifyItemCPPAll::MergeFrom(from.notifies());
    }
    if (from.has_charges()) {
      mutable_charges()->::User::AccumulateCharge::MergeFrom(from.charges());
    }
    if (from.has_gameactivity()) {
      mutable_gameactivity()->::ProtoActivity::GameAcitivityAllCPP::MergeFrom(from.gameactivity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_notifies()) {
    if (!this->notifies().IsInitialized()) return false;
  }
  if (has_charges()) {
    if (!this->charges().IsInitialized()) return false;
  }
  if (has_gameactivity()) {
    if (!this->gameactivity().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->builds())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipments())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->animals())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equipmentstars())) return false;
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(ts_, other->ts_);
    std::swap(activity_, other->activity_);
    std::swap(notifies_, other->notifies_);
    std::swap(charges_, other->charges_);
    std::swap(gameactivity_, other->gameactivity_);
    item_.Swap(&other->item_);
    builds_.Swap(&other->builds_);
    cropland_.Swap(&other->cropland_);
    equipments_.Swap(&other->equipments_);
    animals_.Swap(&other->animals_);
    equipmentstars_.Swap(&other->equipmentstars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestOtherUser::kUidFieldNumber;
#endif  // !_MSC_VER

RequestOtherUser::RequestOtherUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.RequestOtherUser)
}

void RequestOtherUser::InitAsDefaultInstance() {
}

RequestOtherUser::RequestOtherUser(const RequestOtherUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.RequestOtherUser)
}

void RequestOtherUser::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestOtherUser::~RequestOtherUser() {
  // @@protoc_insertion_point(destructor:User.RequestOtherUser)
  SharedDtor();
}

void RequestOtherUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestOtherUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOtherUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestOtherUser_descriptor_;
}

const RequestOtherUser& RequestOtherUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

RequestOtherUser* RequestOtherUser::default_instance_ = NULL;

RequestOtherUser* RequestOtherUser::New() const {
  return new RequestOtherUser;
}

void RequestOtherUser::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestOtherUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.RequestOtherUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.RequestOtherUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.RequestOtherUser)
  return false;
#undef DO_
}

void RequestOtherUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.RequestOtherUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.RequestOtherUser)
}

::google::protobuf::uint8* RequestOtherUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.RequestOtherUser)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.RequestOtherUser)
  return target;
}

int RequestOtherUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOtherUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestOtherUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestOtherUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestOtherUser::MergeFrom(const RequestOtherUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestOtherUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOtherUser::CopyFrom(const RequestOtherUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOtherUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestOtherUser::Swap(RequestOtherUser* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestOtherUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestOtherUser_descriptor_;
  metadata.reflection = RequestOtherUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherUser::kBaseFieldNumber;
#endif  // !_MSC_VER

OtherUser::OtherUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.OtherUser)
}

void OtherUser::InitAsDefaultInstance() {
  base_ = const_cast< ::User::Base*>(&::User::Base::default_instance());
}

OtherUser::OtherUser(const OtherUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.OtherUser)
}

void OtherUser::SharedCtor() {
  _cached_size_ = 0;
  base_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherUser::~OtherUser() {
  // @@protoc_insertion_point(destructor:User.OtherUser)
  SharedDtor();
}

void OtherUser::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
  }
}

void OtherUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherUser_descriptor_;
}

const OtherUser& OtherUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

OtherUser* OtherUser::default_instance_ = NULL;

OtherUser* OtherUser::New() const {
  return new OtherUser;
}

void OtherUser::Clear() {
  if (has_base()) {
    if (base_ != NULL) base_->::User::Base::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.OtherUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.Base base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.OtherUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.OtherUser)
  return false;
#undef DO_
}

void OtherUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.OtherUser)
  // required .User.Base base = 1;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.OtherUser)
}

::google::protobuf::uint8* OtherUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.OtherUser)
  // required .User.Base base = 1;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.OtherUser)
  return target;
}

int OtherUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.Base base = 1;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherUser::MergeFrom(const OtherUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base()) {
      mutable_base()->::User::Base::MergeFrom(from.base());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherUser::CopyFrom(const OtherUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  return true;
}

void OtherUser::Swap(OtherUser* other) {
  if (other != this) {
    std::swap(base_, other->base_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherUser_descriptor_;
  metadata.reflection = OtherUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tutorial_stage::kTutorialStageFieldNumber;
#endif  // !_MSC_VER

Tutorial_stage::Tutorial_stage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.Tutorial_stage)
}

void Tutorial_stage::InitAsDefaultInstance() {
}

Tutorial_stage::Tutorial_stage(const Tutorial_stage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.Tutorial_stage)
}

void Tutorial_stage::SharedCtor() {
  _cached_size_ = 0;
  tutorialstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tutorial_stage::~Tutorial_stage() {
  // @@protoc_insertion_point(destructor:User.Tutorial_stage)
  SharedDtor();
}

void Tutorial_stage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Tutorial_stage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tutorial_stage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tutorial_stage_descriptor_;
}

const Tutorial_stage& Tutorial_stage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

Tutorial_stage* Tutorial_stage::default_instance_ = NULL;

Tutorial_stage* Tutorial_stage::New() const {
  return new Tutorial_stage;
}

void Tutorial_stage::Clear() {
  tutorialstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tutorial_stage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.Tutorial_stage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tutorialStage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorialstage_)));
          set_has_tutorialstage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.Tutorial_stage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.Tutorial_stage)
  return false;
#undef DO_
}

void Tutorial_stage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.Tutorial_stage)
  // required uint32 tutorialStage = 1;
  if (has_tutorialstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tutorialstage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.Tutorial_stage)
}

::google::protobuf::uint8* Tutorial_stage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.Tutorial_stage)
  // required uint32 tutorialStage = 1;
  if (has_tutorialstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tutorialstage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.Tutorial_stage)
  return target;
}

int Tutorial_stage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tutorialStage = 1;
    if (has_tutorialstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorialstage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tutorial_stage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tutorial_stage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tutorial_stage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tutorial_stage::MergeFrom(const Tutorial_stage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutorialstage()) {
      set_tutorialstage(from.tutorialstage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tutorial_stage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tutorial_stage::CopyFrom(const Tutorial_stage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tutorial_stage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Tutorial_stage::Swap(Tutorial_stage* other) {
  if (other != this) {
    std::swap(tutorialstage_, other->tutorialstage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tutorial_stage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tutorial_stage_descriptor_;
  metadata.reflection = Tutorial_stage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kTsFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.ServerTime)
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.ServerTime)
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  // @@protoc_insertion_point(destructor:User.ServerTime)
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.ServerTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.ServerTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.ServerTime)
  return false;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.ServerTime)
  // required uint32 ts = 1;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.ServerTime)
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.ServerTime)
  // required uint32 ts = 1;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.ServerTime)
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ts = 1;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashReq::kCashFieldNumber;
const int CostCashReq::kOpCodeFieldNumber;
const int CostCashReq::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashReq::CostCashReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.CostCashReq)
}

void CostCashReq::InitAsDefaultInstance() {
}

CostCashReq::CostCashReq(const CostCashReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.CostCashReq)
}

void CostCashReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cash_ = 0u;
  opcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashReq::~CostCashReq() {
  // @@protoc_insertion_point(destructor:User.CostCashReq)
  SharedDtor();
}

void CostCashReq::SharedDtor() {
  if (opcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete opcode_;
  }
  if (this != default_instance_) {
  }
}

void CostCashReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashReq_descriptor_;
}

const CostCashReq& CostCashReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

CostCashReq* CostCashReq::default_instance_ = NULL;

CostCashReq* CostCashReq::New() const {
  return new CostCashReq;
}

void CostCashReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostCashReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(cash_, operation_);
    if (has_opcode()) {
      if (opcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        opcode_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.CostCashReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_opCode;
        break;
      }

      // required string opCode = 2;
      case 2: {
        if (tag == 18) {
         parse_opCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opcode().data(), this->opcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "opcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }

      // required uint32 operation = 3;
      case 3: {
        if (tag == 24) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.CostCashReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.CostCashReq)
  return false;
#undef DO_
}

void CostCashReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.CostCashReq)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required string opCode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opcode(), output);
  }

  // required uint32 operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.CostCashReq)
}

::google::protobuf::uint8* CostCashReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.CostCashReq)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required string opCode = 2;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), this->opcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "opcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opcode(), target);
  }

  // required uint32 operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.CostCashReq)
  return target;
}

int CostCashReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required string opCode = 2;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opcode());
    }

    // required uint32 operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashReq::MergeFrom(const CostCashReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashReq::CopyFrom(const CostCashReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CostCashReq::Swap(CostCashReq* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(opcode_, other->opcode_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashReq_descriptor_;
  metadata.reflection = CostCashReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CostCashResp::kCashFieldNumber;
const int CostCashResp::kOperationFieldNumber;
#endif  // !_MSC_VER

CostCashResp::CostCashResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.CostCashResp)
}

void CostCashResp::InitAsDefaultInstance() {
}

CostCashResp::CostCashResp(const CostCashResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.CostCashResp)
}

void CostCashResp::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  operation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCashResp::~CostCashResp() {
  // @@protoc_insertion_point(destructor:User.CostCashResp)
  SharedDtor();
}

void CostCashResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CostCashResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CostCashResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CostCashResp_descriptor_;
}

const CostCashResp& CostCashResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

CostCashResp* CostCashResp::default_instance_ = NULL;

CostCashResp* CostCashResp::New() const {
  return new CostCashResp;
}

void CostCashResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CostCashResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cash_, operation_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CostCashResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.CostCashResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_operation;
        break;
      }

      // required uint32 operation = 2;
      case 2: {
        if (tag == 16) {
         parse_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_)));
          set_has_operation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.CostCashResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.CostCashResp)
  return false;
#undef DO_
}

void CostCashResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.CostCashResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.CostCashResp)
}

::google::protobuf::uint8* CostCashResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.CostCashResp)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required uint32 operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.CostCashResp)
  return target;
}

int CostCashResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 operation = 2;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCashResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CostCashResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CostCashResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CostCashResp::MergeFrom(const CostCashResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CostCashResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CostCashResp::CopyFrom(const CostCashResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCashResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CostCashResp::Swap(CostCashResp* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CostCashResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CostCashResp_descriptor_;
  metadata.reflection = CostCashResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeItem::kCashFieldNumber;
const int ChargeItem::kTsFieldNumber;
#endif  // !_MSC_VER

ChargeItem::ChargeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.ChargeItem)
}

void ChargeItem::InitAsDefaultInstance() {
}

ChargeItem::ChargeItem(const ChargeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.ChargeItem)
}

void ChargeItem::SharedCtor() {
  _cached_size_ = 0;
  cash_ = 0u;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeItem::~ChargeItem() {
  // @@protoc_insertion_point(destructor:User.ChargeItem)
  SharedDtor();
}

void ChargeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeItem_descriptor_;
}

const ChargeItem& ChargeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

ChargeItem* ChargeItem::default_instance_ = NULL;

ChargeItem* ChargeItem::New() const {
  return new ChargeItem;
}

void ChargeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cash_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.ChargeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cash = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // required uint32 ts = 2;
      case 2: {
        if (tag == 16) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.ChargeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.ChargeItem)
  return false;
#undef DO_
}

void ChargeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.ChargeItem)
  // required uint32 cash = 1;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cash(), output);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.ChargeItem)
}

::google::protobuf::uint8* ChargeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.ChargeItem)
  // required uint32 cash = 1;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cash(), target);
  }

  // required uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.ChargeItem)
  return target;
}

int ChargeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cash = 1;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

    // required uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeItem::MergeFrom(const ChargeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeItem::CopyFrom(const ChargeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChargeItem::Swap(ChargeItem* other) {
  if (other != this) {
    std::swap(cash_, other->cash_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeItem_descriptor_;
  metadata.reflection = ChargeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccumulateCharge::kAccumulateChargeFieldNumber;
#endif  // !_MSC_VER

AccumulateCharge::AccumulateCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.AccumulateCharge)
}

void AccumulateCharge::InitAsDefaultInstance() {
}

AccumulateCharge::AccumulateCharge(const AccumulateCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.AccumulateCharge)
}

void AccumulateCharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccumulateCharge::~AccumulateCharge() {
  // @@protoc_insertion_point(destructor:User.AccumulateCharge)
  SharedDtor();
}

void AccumulateCharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccumulateCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccumulateCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccumulateCharge_descriptor_;
}

const AccumulateCharge& AccumulateCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

AccumulateCharge* AccumulateCharge::default_instance_ = NULL;

AccumulateCharge* AccumulateCharge::New() const {
  return new AccumulateCharge;
}

void AccumulateCharge::Clear() {
  accumulatecharge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccumulateCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.AccumulateCharge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.ChargeItem accumulateCharge = 1;
      case 1: {
        if (tag == 10) {
         parse_accumulateCharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accumulatecharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_accumulateCharge;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.AccumulateCharge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.AccumulateCharge)
  return false;
#undef DO_
}

void AccumulateCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.AccumulateCharge)
  // repeated .User.ChargeItem accumulateCharge = 1;
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accumulatecharge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.AccumulateCharge)
}

::google::protobuf::uint8* AccumulateCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.AccumulateCharge)
  // repeated .User.ChargeItem accumulateCharge = 1;
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accumulatecharge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.AccumulateCharge)
  return target;
}

int AccumulateCharge::ByteSize() const {
  int total_size = 0;

  // repeated .User.ChargeItem accumulateCharge = 1;
  total_size += 1 * this->accumulatecharge_size();
  for (int i = 0; i < this->accumulatecharge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accumulatecharge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccumulateCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccumulateCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccumulateCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccumulateCharge::MergeFrom(const AccumulateCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  accumulatecharge_.MergeFrom(from.accumulatecharge_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccumulateCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccumulateCharge::CopyFrom(const AccumulateCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccumulateCharge::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->accumulatecharge())) return false;
  return true;
}

void AccumulateCharge::Swap(AccumulateCharge* other) {
  if (other != this) {
    accumulatecharge_.Swap(&other->accumulatecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccumulateCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccumulateCharge_descriptor_;
  metadata.reflection = AccumulateCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushAccumulateChangeReq::kChangeAccchargeFieldNumber;
#endif  // !_MSC_VER

PushAccumulateChangeReq::PushAccumulateChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.PushAccumulateChangeReq)
}

void PushAccumulateChangeReq::InitAsDefaultInstance() {
  changeacccharge_ = const_cast< ::User::AccumulateCharge*>(&::User::AccumulateCharge::default_instance());
}

PushAccumulateChangeReq::PushAccumulateChangeReq(const PushAccumulateChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.PushAccumulateChangeReq)
}

void PushAccumulateChangeReq::SharedCtor() {
  _cached_size_ = 0;
  changeacccharge_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushAccumulateChangeReq::~PushAccumulateChangeReq() {
  // @@protoc_insertion_point(destructor:User.PushAccumulateChangeReq)
  SharedDtor();
}

void PushAccumulateChangeReq::SharedDtor() {
  if (this != default_instance_) {
    delete changeacccharge_;
  }
}

void PushAccumulateChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushAccumulateChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushAccumulateChangeReq_descriptor_;
}

const PushAccumulateChangeReq& PushAccumulateChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

PushAccumulateChangeReq* PushAccumulateChangeReq::default_instance_ = NULL;

PushAccumulateChangeReq* PushAccumulateChangeReq::New() const {
  return new PushAccumulateChangeReq;
}

void PushAccumulateChangeReq::Clear() {
  if (has_changeacccharge()) {
    if (changeacccharge_ != NULL) changeacccharge_->::User::AccumulateCharge::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushAccumulateChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.PushAccumulateChangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .User.AccumulateCharge changeAcccharge = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeacccharge()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.PushAccumulateChangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.PushAccumulateChangeReq)
  return false;
#undef DO_
}

void PushAccumulateChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.PushAccumulateChangeReq)
  // required .User.AccumulateCharge changeAcccharge = 1;
  if (has_changeacccharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changeacccharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.PushAccumulateChangeReq)
}

::google::protobuf::uint8* PushAccumulateChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.PushAccumulateChangeReq)
  // required .User.AccumulateCharge changeAcccharge = 1;
  if (has_changeacccharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->changeacccharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.PushAccumulateChangeReq)
  return target;
}

int PushAccumulateChangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .User.AccumulateCharge changeAcccharge = 1;
    if (has_changeacccharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeacccharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushAccumulateChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushAccumulateChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushAccumulateChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushAccumulateChangeReq::MergeFrom(const PushAccumulateChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_changeacccharge()) {
      mutable_changeacccharge()->::User::AccumulateCharge::MergeFrom(from.changeacccharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushAccumulateChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushAccumulateChangeReq::CopyFrom(const PushAccumulateChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushAccumulateChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_changeacccharge()) {
    if (!this->changeacccharge().IsInitialized()) return false;
  }
  return true;
}

void PushAccumulateChangeReq::Swap(PushAccumulateChangeReq* other) {
  if (other != this) {
    std::swap(changeacccharge_, other->changeacccharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushAccumulateChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushAccumulateChangeReq_descriptor_;
  metadata.reflection = PushAccumulateChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpReq::kUdFieldNumber;
#endif  // !_MSC_VER

SpeedUpReq::SpeedUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.SpeedUpReq)
}

void SpeedUpReq::InitAsDefaultInstance() {
}

SpeedUpReq::SpeedUpReq(const SpeedUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.SpeedUpReq)
}

void SpeedUpReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpReq::~SpeedUpReq() {
  // @@protoc_insertion_point(destructor:User.SpeedUpReq)
  SharedDtor();
}

void SpeedUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeedUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpReq_descriptor_;
}

const SpeedUpReq& SpeedUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

SpeedUpReq* SpeedUpReq::default_instance_ = NULL;

SpeedUpReq* SpeedUpReq::New() const {
  return new SpeedUpReq;
}

void SpeedUpReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.SpeedUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.SpeedUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.SpeedUpReq)
  return false;
#undef DO_
}

void SpeedUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.SpeedUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.SpeedUpReq)
}

::google::protobuf::uint8* SpeedUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.SpeedUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.SpeedUpReq)
  return target;
}

int SpeedUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpReq::MergeFrom(const SpeedUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpReq::CopyFrom(const SpeedUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SpeedUpReq::Swap(SpeedUpReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpReq_descriptor_;
  metadata.reflection = SpeedUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpeedUpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

SpeedUpResp::SpeedUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.SpeedUpResp)
}

void SpeedUpResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

SpeedUpResp::SpeedUpResp(const SpeedUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.SpeedUpResp)
}

void SpeedUpResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpeedUpResp::~SpeedUpResp() {
  // @@protoc_insertion_point(destructor:User.SpeedUpResp)
  SharedDtor();
}

void SpeedUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void SpeedUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeedUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeedUpResp_descriptor_;
}

const SpeedUpResp& SpeedUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

SpeedUpResp* SpeedUpResp::default_instance_ = NULL;

SpeedUpResp* SpeedUpResp::New() const {
  return new SpeedUpResp;
}

void SpeedUpResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpeedUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.SpeedUpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.SpeedUpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.SpeedUpResp)
  return false;
#undef DO_
}

void SpeedUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.SpeedUpResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.SpeedUpResp)
}

::google::protobuf::uint8* SpeedUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.SpeedUpResp)
  // optional .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.SpeedUpResp)
  return target;
}

int SpeedUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeedUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpeedUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpeedUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpeedUpResp::MergeFrom(const SpeedUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpeedUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedUpResp::CopyFrom(const SpeedUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedUpResp::IsInitialized() const {

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void SpeedUpResp::Swap(SpeedUpResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpeedUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeedUpResp_descriptor_;
  metadata.reflection = SpeedUpResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialInfo::kPropsIdFieldNumber;
const int BuyMaterialInfo::kPropsCntFieldNumber;
#endif  // !_MSC_VER

BuyMaterialInfo::BuyMaterialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.BuyMaterialInfo)
}

void BuyMaterialInfo::InitAsDefaultInstance() {
}

BuyMaterialInfo::BuyMaterialInfo(const BuyMaterialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.BuyMaterialInfo)
}

void BuyMaterialInfo::SharedCtor() {
  _cached_size_ = 0;
  props_id_ = 0u;
  props_cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialInfo::~BuyMaterialInfo() {
  // @@protoc_insertion_point(destructor:User.BuyMaterialInfo)
  SharedDtor();
}

void BuyMaterialInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMaterialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialInfo_descriptor_;
}

const BuyMaterialInfo& BuyMaterialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

BuyMaterialInfo* BuyMaterialInfo::default_instance_ = NULL;

BuyMaterialInfo* BuyMaterialInfo::New() const {
  return new BuyMaterialInfo;
}

void BuyMaterialInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyMaterialInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(props_id_, props_cnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.BuyMaterialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 props_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_id_)));
          set_has_props_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_props_cnt;
        break;
      }

      // required uint32 props_cnt = 2;
      case 2: {
        if (tag == 16) {
         parse_props_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &props_cnt_)));
          set_has_props_cnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.BuyMaterialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.BuyMaterialInfo)
  return false;
#undef DO_
}

void BuyMaterialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.BuyMaterialInfo)
  // required uint32 props_id = 1;
  if (has_props_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->props_id(), output);
  }

  // required uint32 props_cnt = 2;
  if (has_props_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->props_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.BuyMaterialInfo)
}

::google::protobuf::uint8* BuyMaterialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.BuyMaterialInfo)
  // required uint32 props_id = 1;
  if (has_props_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->props_id(), target);
  }

  // required uint32 props_cnt = 2;
  if (has_props_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->props_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.BuyMaterialInfo)
  return target;
}

int BuyMaterialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 props_id = 1;
    if (has_props_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props_id());
    }

    // required uint32 props_cnt = 2;
    if (has_props_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->props_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialInfo::MergeFrom(const BuyMaterialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_props_id()) {
      set_props_id(from.props_id());
    }
    if (from.has_props_cnt()) {
      set_props_cnt(from.props_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialInfo::CopyFrom(const BuyMaterialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuyMaterialInfo::Swap(BuyMaterialInfo* other) {
  if (other != this) {
    std::swap(props_id_, other->props_id_);
    std::swap(props_cnt_, other->props_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialInfo_descriptor_;
  metadata.reflection = BuyMaterialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialReq::kBuyInfoFieldNumber;
#endif  // !_MSC_VER

BuyMaterialReq::BuyMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.BuyMaterialReq)
}

void BuyMaterialReq::InitAsDefaultInstance() {
}

BuyMaterialReq::BuyMaterialReq(const BuyMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.BuyMaterialReq)
}

void BuyMaterialReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialReq::~BuyMaterialReq() {
  // @@protoc_insertion_point(destructor:User.BuyMaterialReq)
  SharedDtor();
}

void BuyMaterialReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialReq_descriptor_;
}

const BuyMaterialReq& BuyMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

BuyMaterialReq* BuyMaterialReq::default_instance_ = NULL;

BuyMaterialReq* BuyMaterialReq::New() const {
  return new BuyMaterialReq;
}

void BuyMaterialReq::Clear() {
  buy_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.BuyMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .User.BuyMaterialInfo buy_info = 1;
      case 1: {
        if (tag == 10) {
         parse_buy_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_buy_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.BuyMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.BuyMaterialReq)
  return false;
#undef DO_
}

void BuyMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.BuyMaterialReq)
  // repeated .User.BuyMaterialInfo buy_info = 1;
  for (int i = 0; i < this->buy_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.BuyMaterialReq)
}

::google::protobuf::uint8* BuyMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.BuyMaterialReq)
  // repeated .User.BuyMaterialInfo buy_info = 1;
  for (int i = 0; i < this->buy_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.BuyMaterialReq)
  return target;
}

int BuyMaterialReq::ByteSize() const {
  int total_size = 0;

  // repeated .User.BuyMaterialInfo buy_info = 1;
  total_size += 1 * this->buy_info_size();
  for (int i = 0; i < this->buy_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialReq::MergeFrom(const BuyMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_info_.MergeFrom(from.buy_info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialReq::CopyFrom(const BuyMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialReq::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->buy_info())) return false;
  return true;
}

void BuyMaterialReq::Swap(BuyMaterialReq* other) {
  if (other != this) {
    buy_info_.Swap(&other->buy_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialReq_descriptor_;
  metadata.reflection = BuyMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyMaterialResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuyMaterialResp::BuyMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User.BuyMaterialResp)
}

void BuyMaterialResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuyMaterialResp::BuyMaterialResp(const BuyMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User.BuyMaterialResp)
}

void BuyMaterialResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyMaterialResp::~BuyMaterialResp() {
  // @@protoc_insertion_point(destructor:User.BuyMaterialResp)
  SharedDtor();
}

void BuyMaterialResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuyMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyMaterialResp_descriptor_;
}

const BuyMaterialResp& BuyMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_User_2eproto();
  return *default_instance_;
}

BuyMaterialResp* BuyMaterialResp::default_instance_ = NULL;

BuyMaterialResp* BuyMaterialResp::New() const {
  return new BuyMaterialResp;
}

void BuyMaterialResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User.BuyMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User.BuyMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User.BuyMaterialResp)
  return false;
#undef DO_
}

void BuyMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User.BuyMaterialResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:User.BuyMaterialResp)
}

::google::protobuf::uint8* BuyMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User.BuyMaterialResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User.BuyMaterialResp)
  return target;
}

int BuyMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyMaterialResp::MergeFrom(const BuyMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyMaterialResp::CopyFrom(const BuyMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyMaterialResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuyMaterialResp::Swap(BuyMaterialResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyMaterialResp_descriptor_;
  metadata.reflection = BuyMaterialResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace User

// @@protoc_insertion_point(global_scope)
