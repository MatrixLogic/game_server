// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoBuilding.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoBuilding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoBuilding {

namespace {

const ::google::protobuf::Descriptor* BuildingCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentStarCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentStarCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlipReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlipReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlipResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlipResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoBuilding_2eproto() {
  protobuf_AddDesc_ProtoBuilding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoBuilding.proto");
  GOOGLE_CHECK(file != NULL);
  BuildingCPP_descriptor_ = file->message_type(0);
  static const int BuildingCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, direct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, donetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, level_),
  };
  BuildingCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingCPP_descriptor_,
      BuildingCPP::default_instance_,
      BuildingCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingCPP));
  EquipmentStarCPP_descriptor_ = file->message_type(1);
  static const int EquipmentStarCPP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, usedtime_),
  };
  EquipmentStarCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentStarCPP_descriptor_,
      EquipmentStarCPP::default_instance_,
      EquipmentStarCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentStarCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentStarCPP));
  BuildReq_descriptor_ = file->message_type(2);
  static const int BuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildReq, buildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildReq, pos_),
  };
  BuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildReq_descriptor_,
      BuildReq::default_instance_,
      BuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildReq));
  BuildResp_descriptor_ = file->message_type(3);
  static const int BuildResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, lands_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, equipmentstar_),
  };
  BuildResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildResp_descriptor_,
      BuildResp::default_instance_,
      BuildResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildResp));
  MoveReq_descriptor_ = file->message_type(4);
  static const int MoveReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, pos_),
  };
  MoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveReq_descriptor_,
      MoveReq::default_instance_,
      MoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveReq));
  MoveResp_descriptor_ = file->message_type(5);
  static const int MoveResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResp, result_),
  };
  MoveResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveResp_descriptor_,
      MoveResp::default_instance_,
      MoveResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveResp));
  FlipReq_descriptor_ = file->message_type(6);
  static const int FlipReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipReq, ud_),
  };
  FlipReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlipReq_descriptor_,
      FlipReq::default_instance_,
      FlipReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlipReq));
  FlipResp_descriptor_ = file->message_type(7);
  static const int FlipResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipResp, result_),
  };
  FlipResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlipResp_descriptor_,
      FlipResp::default_instance_,
      FlipResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlipResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlipResp));
  BuildingUpReq_descriptor_ = file->message_type(8);
  static const int BuildingUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpReq, ud_),
  };
  BuildingUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpReq_descriptor_,
      BuildingUpReq::default_instance_,
      BuildingUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpReq));
  BuildingUpResp_descriptor_ = file->message_type(9);
  static const int BuildingUpResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpResp, commons_),
  };
  BuildingUpResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpResp_descriptor_,
      BuildingUpResp::default_instance_,
      BuildingUpResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoBuilding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingCPP_descriptor_, &BuildingCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentStarCPP_descriptor_, &EquipmentStarCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildReq_descriptor_, &BuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildResp_descriptor_, &BuildResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveReq_descriptor_, &MoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveResp_descriptor_, &MoveResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlipReq_descriptor_, &FlipReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlipResp_descriptor_, &FlipResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpReq_descriptor_, &BuildingUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpResp_descriptor_, &BuildingUpResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoBuilding_2eproto() {
  delete BuildingCPP::default_instance_;
  delete BuildingCPP_reflection_;
  delete EquipmentStarCPP::default_instance_;
  delete EquipmentStarCPP_reflection_;
  delete BuildReq::default_instance_;
  delete BuildReq_reflection_;
  delete BuildResp::default_instance_;
  delete BuildResp_reflection_;
  delete MoveReq::default_instance_;
  delete MoveReq_reflection_;
  delete MoveResp::default_instance_;
  delete MoveResp_reflection_;
  delete FlipReq::default_instance_;
  delete FlipReq_reflection_;
  delete FlipResp::default_instance_;
  delete FlipResp_reflection_;
  delete BuildingUpReq::default_instance_;
  delete BuildingUpReq_reflection_;
  delete BuildingUpResp::default_instance_;
  delete BuildingUpResp_reflection_;
}

void protobuf_AddDesc_ProtoBuilding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::ProtoProduce::protobuf_AddDesc_ProtoProduce_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ProtoBuilding.proto\022\rProtoBuilding\032\020Da"
    "taCommon.proto\032\022ProtoProduce.proto\"m\n\013Bu"
    "ildingCPP\022\n\n\002ud\030\001 \002(\r\022\017\n\007buildId\030\002 \002(\r\022\020"
    "\n\010position\030\003 \003(\r\022\016\n\006direct\030\004 \002(\r\022\020\n\010done"
    "Time\030\005 \002(\r\022\r\n\005level\030\006 \002(\r\">\n\020EquipmentSt"
    "arCPP\022\n\n\002id\030\001 \002(\r\022\014\n\004star\030\002 \002(\r\022\020\n\010usedt"
    "ime\030\003 \002(\r\"(\n\010BuildReq\022\017\n\007buildId\030\001 \002(\r\022\013"
    "\n\003pos\030\002 \003(\r\"\310\001\n\tBuildResp\022,\n\010building\030\001 "
    "\002(\0132\032.ProtoBuilding.BuildingCPP\022+\n\007commo"
    "ns\030\002 \002(\0132\032.DataCommon.CommonItemsCPP\022(\n\005"
    "lands\030\003 \001(\0132\031.ProtoProduce.CropLandCPP\0226"
    "\n\requipmentstar\030\004 \001(\0132\037.ProtoBuilding.Eq"
    "uipmentStarCPP\"\"\n\007MoveReq\022\n\n\002ud\030\001 \002(\r\022\013\n"
    "\003pos\030\002 \003(\r\"\032\n\010MoveResp\022\016\n\006result\030\001 \002(\010\"\025"
    "\n\007FlipReq\022\n\n\002ud\030\001 \002(\r\"\032\n\010FlipResp\022\016\n\006res"
    "ult\030\001 \002(\010\"\033\n\rBuildingUpReq\022\n\n\002ud\030\001 \002(\r\"="
    "\n\016BuildingUpResp\022+\n\007commons\030\001 \002(\0132\032.Data"
    "Common.CommonItemsCPP", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoBuilding.proto", &protobuf_RegisterTypes);
  BuildingCPP::default_instance_ = new BuildingCPP();
  EquipmentStarCPP::default_instance_ = new EquipmentStarCPP();
  BuildReq::default_instance_ = new BuildReq();
  BuildResp::default_instance_ = new BuildResp();
  MoveReq::default_instance_ = new MoveReq();
  MoveResp::default_instance_ = new MoveResp();
  FlipReq::default_instance_ = new FlipReq();
  FlipResp::default_instance_ = new FlipResp();
  BuildingUpReq::default_instance_ = new BuildingUpReq();
  BuildingUpResp::default_instance_ = new BuildingUpResp();
  BuildingCPP::default_instance_->InitAsDefaultInstance();
  EquipmentStarCPP::default_instance_->InitAsDefaultInstance();
  BuildReq::default_instance_->InitAsDefaultInstance();
  BuildResp::default_instance_->InitAsDefaultInstance();
  MoveReq::default_instance_->InitAsDefaultInstance();
  MoveResp::default_instance_->InitAsDefaultInstance();
  FlipReq::default_instance_->InitAsDefaultInstance();
  FlipResp::default_instance_->InitAsDefaultInstance();
  BuildingUpReq::default_instance_->InitAsDefaultInstance();
  BuildingUpResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoBuilding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoBuilding_2eproto {
  StaticDescriptorInitializer_ProtoBuilding_2eproto() {
    protobuf_AddDesc_ProtoBuilding_2eproto();
  }
} static_descriptor_initializer_ProtoBuilding_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BuildingCPP::kUdFieldNumber;
const int BuildingCPP::kBuildIdFieldNumber;
const int BuildingCPP::kPositionFieldNumber;
const int BuildingCPP::kDirectFieldNumber;
const int BuildingCPP::kDoneTimeFieldNumber;
const int BuildingCPP::kLevelFieldNumber;
#endif  // !_MSC_VER

BuildingCPP::BuildingCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.BuildingCPP)
}

void BuildingCPP::InitAsDefaultInstance() {
}

BuildingCPP::BuildingCPP(const BuildingCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.BuildingCPP)
}

void BuildingCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  buildid_ = 0u;
  direct_ = 0u;
  donetime_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingCPP::~BuildingCPP() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.BuildingCPP)
  SharedDtor();
}

void BuildingCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingCPP_descriptor_;
}

const BuildingCPP& BuildingCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

BuildingCPP* BuildingCPP::default_instance_ = NULL;

BuildingCPP* BuildingCPP::New() const {
  return new BuildingCPP;
}

void BuildingCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(ud_, buildid_);
    ZR_(direct_, level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  position_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.BuildingCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buildId;
        break;
      }

      // required uint32 buildId = 2;
      case 2: {
        if (tag == 16) {
         parse_buildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // repeated uint32 position = 3;
      case 3: {
        if (tag == 24) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_position())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position;
        if (input->ExpectTag(32)) goto parse_direct;
        break;
      }

      // required uint32 direct = 4;
      case 4: {
        if (tag == 32) {
         parse_direct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direct_)));
          set_has_direct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_doneTime;
        break;
      }

      // required uint32 doneTime = 5;
      case 5: {
        if (tag == 40) {
         parse_doneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // required uint32 level = 6;
      case 6: {
        if (tag == 48) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.BuildingCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.BuildingCPP)
  return false;
#undef DO_
}

void BuildingCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.BuildingCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildid(), output);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->position(i), output);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->direct(), output);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donetime(), output);
  }

  // required uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.BuildingCPP)
}

::google::protobuf::uint8* BuildingCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.BuildingCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 buildId = 2;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildid(), target);
  }

  // repeated uint32 position = 3;
  for (int i = 0; i < this->position_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->position(i), target);
  }

  // required uint32 direct = 4;
  if (has_direct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->direct(), target);
  }

  // required uint32 doneTime = 5;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donetime(), target);
  }

  // required uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.BuildingCPP)
  return target;
}

int BuildingCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 buildId = 2;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

    // required uint32 direct = 4;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direct());
    }

    // required uint32 doneTime = 5;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donetime());
    }

    // required uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated uint32 position = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->position_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->position(i));
    }
    total_size += 1 * this->position_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingCPP::MergeFrom(const BuildingCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_.MergeFrom(from.position_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
    if (from.has_direct()) {
      set_direct(from.direct());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingCPP::CopyFrom(const BuildingCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void BuildingCPP::Swap(BuildingCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(buildid_, other->buildid_);
    position_.Swap(&other->position_);
    std::swap(direct_, other->direct_);
    std::swap(donetime_, other->donetime_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingCPP_descriptor_;
  metadata.reflection = BuildingCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentStarCPP::kIdFieldNumber;
const int EquipmentStarCPP::kStarFieldNumber;
const int EquipmentStarCPP::kUsedtimeFieldNumber;
#endif  // !_MSC_VER

EquipmentStarCPP::EquipmentStarCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.EquipmentStarCPP)
}

void EquipmentStarCPP::InitAsDefaultInstance() {
}

EquipmentStarCPP::EquipmentStarCPP(const EquipmentStarCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.EquipmentStarCPP)
}

void EquipmentStarCPP::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  usedtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentStarCPP::~EquipmentStarCPP() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.EquipmentStarCPP)
  SharedDtor();
}

void EquipmentStarCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentStarCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentStarCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentStarCPP_descriptor_;
}

const EquipmentStarCPP& EquipmentStarCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

EquipmentStarCPP* EquipmentStarCPP::default_instance_ = NULL;

EquipmentStarCPP* EquipmentStarCPP::New() const {
  return new EquipmentStarCPP;
}

void EquipmentStarCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipmentStarCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, usedtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentStarCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.EquipmentStarCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // required uint32 star = 2;
      case 2: {
        if (tag == 16) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_usedtime;
        break;
      }

      // required uint32 usedtime = 3;
      case 3: {
        if (tag == 24) {
         parse_usedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedtime_)));
          set_has_usedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.EquipmentStarCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.EquipmentStarCPP)
  return false;
#undef DO_
}

void EquipmentStarCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.EquipmentStarCPP)
}

::google::protobuf::uint8* EquipmentStarCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.EquipmentStarCPP)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // required uint32 usedtime = 3;
  if (has_usedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.EquipmentStarCPP)
  return target;
}

int EquipmentStarCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 usedtime = 3;
    if (has_usedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentStarCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentStarCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentStarCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentStarCPP::MergeFrom(const EquipmentStarCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_usedtime()) {
      set_usedtime(from.usedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentStarCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentStarCPP::CopyFrom(const EquipmentStarCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentStarCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipmentStarCPP::Swap(EquipmentStarCPP* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(usedtime_, other->usedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentStarCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentStarCPP_descriptor_;
  metadata.reflection = EquipmentStarCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildReq::kBuildIdFieldNumber;
const int BuildReq::kPosFieldNumber;
#endif  // !_MSC_VER

BuildReq::BuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.BuildReq)
}

void BuildReq::InitAsDefaultInstance() {
}

BuildReq::BuildReq(const BuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.BuildReq)
}

void BuildReq::SharedCtor() {
  _cached_size_ = 0;
  buildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildReq::~BuildReq() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.BuildReq)
  SharedDtor();
}

void BuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildReq_descriptor_;
}

const BuildReq& BuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

BuildReq* BuildReq::default_instance_ = NULL;

BuildReq* BuildReq::New() const {
  return new BuildReq;
}

void BuildReq::Clear() {
  buildid_ = 0u;
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.BuildReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildid_)));
          set_has_buildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.BuildReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.BuildReq)
  return false;
#undef DO_
}

void BuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.BuildReq)
  // required uint32 buildId = 1;
  if (has_buildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildid(), output);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.BuildReq)
}

::google::protobuf::uint8* BuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.BuildReq)
  // required uint32 buildId = 1;
  if (has_buildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildid(), target);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.BuildReq)
  return target;
}

int BuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buildId = 1;
    if (has_buildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildid());
    }

  }
  // repeated uint32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildReq::MergeFrom(const BuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildid()) {
      set_buildid(from.buildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildReq::CopyFrom(const BuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildReq::Swap(BuildReq* other) {
  if (other != this) {
    std::swap(buildid_, other->buildid_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildReq_descriptor_;
  metadata.reflection = BuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildResp::kBuildingFieldNumber;
const int BuildResp::kCommonsFieldNumber;
const int BuildResp::kLandsFieldNumber;
const int BuildResp::kEquipmentstarFieldNumber;
#endif  // !_MSC_VER

BuildResp::BuildResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.BuildResp)
}

void BuildResp::InitAsDefaultInstance() {
  building_ = const_cast< ::ProtoBuilding::BuildingCPP*>(&::ProtoBuilding::BuildingCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
  lands_ = const_cast< ::ProtoProduce::CropLandCPP*>(&::ProtoProduce::CropLandCPP::default_instance());
  equipmentstar_ = const_cast< ::ProtoBuilding::EquipmentStarCPP*>(&::ProtoBuilding::EquipmentStarCPP::default_instance());
}

BuildResp::BuildResp(const BuildResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.BuildResp)
}

void BuildResp::SharedCtor() {
  _cached_size_ = 0;
  building_ = NULL;
  commons_ = NULL;
  lands_ = NULL;
  equipmentstar_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildResp::~BuildResp() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.BuildResp)
  SharedDtor();
}

void BuildResp::SharedDtor() {
  if (this != default_instance_) {
    delete building_;
    delete commons_;
    delete lands_;
    delete equipmentstar_;
  }
}

void BuildResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildResp_descriptor_;
}

const BuildResp& BuildResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

BuildResp* BuildResp::default_instance_ = NULL;

BuildResp* BuildResp::New() const {
  return new BuildResp;
}

void BuildResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_building()) {
      if (building_ != NULL) building_->::ProtoBuilding::BuildingCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    if (has_lands()) {
      if (lands_ != NULL) lands_->::ProtoProduce::CropLandCPP::Clear();
    }
    if (has_equipmentstar()) {
      if (equipmentstar_ != NULL) equipmentstar_->::ProtoBuilding::EquipmentStarCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.BuildResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoBuilding.BuildingCPP building = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lands;
        break;
      }

      // optional .ProtoProduce.CropLandCPP lands = 3;
      case 3: {
        if (tag == 26) {
         parse_lands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equipmentstar;
        break;
      }

      // optional .ProtoBuilding.EquipmentStarCPP equipmentstar = 4;
      case 4: {
        if (tag == 34) {
         parse_equipmentstar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipmentstar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.BuildResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.BuildResp)
  return false;
#undef DO_
}

void BuildResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.BuildResp)
  // required .ProtoBuilding.BuildingCPP building = 1;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->building(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // optional .ProtoProduce.CropLandCPP lands = 3;
  if (has_lands()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lands(), output);
  }

  // optional .ProtoBuilding.EquipmentStarCPP equipmentstar = 4;
  if (has_equipmentstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipmentstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.BuildResp)
}

::google::protobuf::uint8* BuildResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.BuildResp)
  // required .ProtoBuilding.BuildingCPP building = 1;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->building(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // optional .ProtoProduce.CropLandCPP lands = 3;
  if (has_lands()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lands(), target);
  }

  // optional .ProtoBuilding.EquipmentStarCPP equipmentstar = 4;
  if (has_equipmentstar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equipmentstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.BuildResp)
  return target;
}

int BuildResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoBuilding.BuildingCPP building = 1;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // optional .ProtoProduce.CropLandCPP lands = 3;
    if (has_lands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lands());
    }

    // optional .ProtoBuilding.EquipmentStarCPP equipmentstar = 4;
    if (has_equipmentstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmentstar());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildResp::MergeFrom(const BuildResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_building()) {
      mutable_building()->::ProtoBuilding::BuildingCPP::MergeFrom(from.building());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_lands()) {
      mutable_lands()->::ProtoProduce::CropLandCPP::MergeFrom(from.lands());
    }
    if (from.has_equipmentstar()) {
      mutable_equipmentstar()->::ProtoBuilding::EquipmentStarCPP::MergeFrom(from.equipmentstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildResp::CopyFrom(const BuildResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_building()) {
    if (!this->building().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  if (has_lands()) {
    if (!this->lands().IsInitialized()) return false;
  }
  if (has_equipmentstar()) {
    if (!this->equipmentstar().IsInitialized()) return false;
  }
  return true;
}

void BuildResp::Swap(BuildResp* other) {
  if (other != this) {
    std::swap(building_, other->building_);
    std::swap(commons_, other->commons_);
    std::swap(lands_, other->lands_);
    std::swap(equipmentstar_, other->equipmentstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildResp_descriptor_;
  metadata.reflection = BuildResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveReq::kUdFieldNumber;
const int MoveReq::kPosFieldNumber;
#endif  // !_MSC_VER

MoveReq::MoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.MoveReq)
}

void MoveReq::InitAsDefaultInstance() {
}

MoveReq::MoveReq(const MoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.MoveReq)
}

void MoveReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveReq::~MoveReq() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.MoveReq)
  SharedDtor();
}

void MoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveReq_descriptor_;
}

const MoveReq& MoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

MoveReq* MoveReq::default_instance_ = NULL;

MoveReq* MoveReq::New() const {
  return new MoveReq;
}

void MoveReq::Clear() {
  ud_ = 0u;
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.MoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated uint32 pos = 2;
      case 2: {
        if (tag == 16) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.MoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.MoveReq)
  return false;
#undef DO_
}

void MoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.MoveReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.MoveReq)
}

::google::protobuf::uint8* MoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.MoveReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // repeated uint32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.MoveReq)
  return target;
}

int MoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  // repeated uint32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveReq::MergeFrom(const MoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveReq::CopyFrom(const MoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MoveReq::Swap(MoveReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveReq_descriptor_;
  metadata.reflection = MoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveResp::kResultFieldNumber;
#endif  // !_MSC_VER

MoveResp::MoveResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.MoveResp)
}

void MoveResp::InitAsDefaultInstance() {
}

MoveResp::MoveResp(const MoveResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.MoveResp)
}

void MoveResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveResp::~MoveResp() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.MoveResp)
  SharedDtor();
}

void MoveResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveResp_descriptor_;
}

const MoveResp& MoveResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

MoveResp* MoveResp::default_instance_ = NULL;

MoveResp* MoveResp::New() const {
  return new MoveResp;
}

void MoveResp::Clear() {
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.MoveResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.MoveResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.MoveResp)
  return false;
#undef DO_
}

void MoveResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.MoveResp)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.MoveResp)
}

::google::protobuf::uint8* MoveResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.MoveResp)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.MoveResp)
  return target;
}

int MoveResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveResp::MergeFrom(const MoveResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResp::CopyFrom(const MoveResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MoveResp::Swap(MoveResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveResp_descriptor_;
  metadata.reflection = MoveResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlipReq::kUdFieldNumber;
#endif  // !_MSC_VER

FlipReq::FlipReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.FlipReq)
}

void FlipReq::InitAsDefaultInstance() {
}

FlipReq::FlipReq(const FlipReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.FlipReq)
}

void FlipReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlipReq::~FlipReq() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.FlipReq)
  SharedDtor();
}

void FlipReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlipReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlipReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlipReq_descriptor_;
}

const FlipReq& FlipReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

FlipReq* FlipReq::default_instance_ = NULL;

FlipReq* FlipReq::New() const {
  return new FlipReq;
}

void FlipReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlipReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.FlipReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.FlipReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.FlipReq)
  return false;
#undef DO_
}

void FlipReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.FlipReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.FlipReq)
}

::google::protobuf::uint8* FlipReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.FlipReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.FlipReq)
  return target;
}

int FlipReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlipReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlipReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlipReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlipReq::MergeFrom(const FlipReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlipReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlipReq::CopyFrom(const FlipReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlipReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlipReq::Swap(FlipReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlipReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlipReq_descriptor_;
  metadata.reflection = FlipReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlipResp::kResultFieldNumber;
#endif  // !_MSC_VER

FlipResp::FlipResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.FlipResp)
}

void FlipResp::InitAsDefaultInstance() {
}

FlipResp::FlipResp(const FlipResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.FlipResp)
}

void FlipResp::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlipResp::~FlipResp() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.FlipResp)
  SharedDtor();
}

void FlipResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlipResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlipResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlipResp_descriptor_;
}

const FlipResp& FlipResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

FlipResp* FlipResp::default_instance_ = NULL;

FlipResp* FlipResp::New() const {
  return new FlipResp;
}

void FlipResp::Clear() {
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlipResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.FlipResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.FlipResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.FlipResp)
  return false;
#undef DO_
}

void FlipResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.FlipResp)
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.FlipResp)
}

::google::protobuf::uint8* FlipResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.FlipResp)
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.FlipResp)
  return target;
}

int FlipResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlipResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlipResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlipResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlipResp::MergeFrom(const FlipResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlipResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlipResp::CopyFrom(const FlipResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlipResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlipResp::Swap(FlipResp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlipResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlipResp_descriptor_;
  metadata.reflection = FlipResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpReq::kUdFieldNumber;
#endif  // !_MSC_VER

BuildingUpReq::BuildingUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.BuildingUpReq)
}

void BuildingUpReq::InitAsDefaultInstance() {
}

BuildingUpReq::BuildingUpReq(const BuildingUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.BuildingUpReq)
}

void BuildingUpReq::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpReq::~BuildingUpReq() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.BuildingUpReq)
  SharedDtor();
}

void BuildingUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpReq_descriptor_;
}

const BuildingUpReq& BuildingUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

BuildingUpReq* BuildingUpReq::default_instance_ = NULL;

BuildingUpReq* BuildingUpReq::New() const {
  return new BuildingUpReq;
}

void BuildingUpReq::Clear() {
  ud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.BuildingUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.BuildingUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.BuildingUpReq)
  return false;
#undef DO_
}

void BuildingUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.BuildingUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.BuildingUpReq)
}

::google::protobuf::uint8* BuildingUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.BuildingUpReq)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.BuildingUpReq)
  return target;
}

int BuildingUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpReq::MergeFrom(const BuildingUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpReq::CopyFrom(const BuildingUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BuildingUpReq::Swap(BuildingUpReq* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpReq_descriptor_;
  metadata.reflection = BuildingUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

BuildingUpResp::BuildingUpResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoBuilding.BuildingUpResp)
}

void BuildingUpResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

BuildingUpResp::BuildingUpResp(const BuildingUpResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoBuilding.BuildingUpResp)
}

void BuildingUpResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpResp::~BuildingUpResp() {
  // @@protoc_insertion_point(destructor:ProtoBuilding.BuildingUpResp)
  SharedDtor();
}

void BuildingUpResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void BuildingUpResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpResp_descriptor_;
}

const BuildingUpResp& BuildingUpResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoBuilding_2eproto();
  return *default_instance_;
}

BuildingUpResp* BuildingUpResp::default_instance_ = NULL;

BuildingUpResp* BuildingUpResp::New() const {
  return new BuildingUpResp;
}

void BuildingUpResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoBuilding.BuildingUpResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DataCommon.CommonItemsCPP commons = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoBuilding.BuildingUpResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoBuilding.BuildingUpResp)
  return false;
#undef DO_
}

void BuildingUpResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoBuilding.BuildingUpResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoBuilding.BuildingUpResp)
}

::google::protobuf::uint8* BuildingUpResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoBuilding.BuildingUpResp)
  // required .DataCommon.CommonItemsCPP commons = 1;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoBuilding.BuildingUpResp)
  return target;
}

int BuildingUpResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 1;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpResp::MergeFrom(const BuildingUpResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpResp::CopyFrom(const BuildingUpResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void BuildingUpResp::Swap(BuildingUpResp* other) {
  if (other != this) {
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpResp_descriptor_;
  metadata.reflection = BuildingUpResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoBuilding

// @@protoc_insertion_point(global_scope)
