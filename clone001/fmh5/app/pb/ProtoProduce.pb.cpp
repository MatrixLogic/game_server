// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoProduce.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoProduce.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoProduce {

namespace {

const ::google::protobuf::Descriptor* CropLandCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CropLandCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlantCropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlantCropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlantCropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlantCropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapCropReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapCropReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReapCropResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReapCropResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProduceEquipCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProduceEquipCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpandQueueResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpandQueueResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinQueueResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinQueueResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FetchProductResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FetchProductResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnimalCPP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnimalCPP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdoptAnimalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdoptAnimalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdoptAnimalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdoptAnimalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedAnimalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedAnimalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedAnimalResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedAnimalResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObtainProductReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObtainProductReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObtainProductResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObtainProductResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoProduce_2eproto() {
  protobuf_AddDesc_ProtoProduce_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoProduce.proto");
  GOOGLE_CHECK(file != NULL);
  CropLandCPP_descriptor_ = file->message_type(0);
  static const int CropLandCPP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, plant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, harvesttime_),
  };
  CropLandCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CropLandCPP_descriptor_,
      CropLandCPP::default_instance_,
      CropLandCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CropLandCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CropLandCPP));
  PlantCropReq_descriptor_ = file->message_type(1);
  static const int PlantCropReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, uds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, plant_),
  };
  PlantCropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlantCropReq_descriptor_,
      PlantCropReq::default_instance_,
      PlantCropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlantCropReq));
  PlantCropResp_descriptor_ = file->message_type(2);
  static const int PlantCropResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, commons_),
  };
  PlantCropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlantCropResp_descriptor_,
      PlantCropResp::default_instance_,
      PlantCropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlantCropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlantCropResp));
  ReapCropReq_descriptor_ = file->message_type(3);
  static const int ReapCropReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, uds_),
  };
  ReapCropReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapCropReq_descriptor_,
      ReapCropReq::default_instance_,
      ReapCropReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapCropReq));
  ReapCropResp_descriptor_ = file->message_type(4);
  static const int ReapCropResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, cropland_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, isfull_),
  };
  ReapCropResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReapCropResp_descriptor_,
      ReapCropResp::default_instance_,
      ReapCropResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReapCropResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReapCropResp));
  ProduceEquipCPP_descriptor_ = file->message_type(5);
  static const int ProduceEquipCPP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, queuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, shelfdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, finish_time_),
  };
  ProduceEquipCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProduceEquipCPP_descriptor_,
      ProduceEquipCPP::default_instance_,
      ProduceEquipCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProduceEquipCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProduceEquipCPP));
  ExpandQueueReq_descriptor_ = file->message_type(6);
  static const int ExpandQueueReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, equipud_),
  };
  ExpandQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandQueueReq_descriptor_,
      ExpandQueueReq::default_instance_,
      ExpandQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandQueueReq));
  ExpandQueueResp_descriptor_ = file->message_type(7);
  static const int ExpandQueueResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, commons_),
  };
  ExpandQueueResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpandQueueResp_descriptor_,
      ExpandQueueResp::default_instance_,
      ExpandQueueResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpandQueueResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpandQueueResp));
  JoinQueueReq_descriptor_ = file->message_type(8);
  static const int JoinQueueReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, propsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, equipud_),
  };
  JoinQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinQueueReq_descriptor_,
      JoinQueueReq::default_instance_,
      JoinQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinQueueReq));
  JoinQueueResp_descriptor_ = file->message_type(9);
  static const int JoinQueueResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, commons_),
  };
  JoinQueueResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinQueueResp_descriptor_,
      JoinQueueResp::default_instance_,
      JoinQueueResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinQueueResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinQueueResp));
  FetchProductReq_descriptor_ = file->message_type(10);
  static const int FetchProductReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, equipud_),
  };
  FetchProductReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductReq_descriptor_,
      FetchProductReq::default_instance_,
      FetchProductReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductReq));
  FetchProductResp_descriptor_ = file->message_type(11);
  static const int FetchProductResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, equipment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, commons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, isfull_),
  };
  FetchProductResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FetchProductResp_descriptor_,
      FetchProductResp::default_instance_,
      FetchProductResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FetchProductResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FetchProductResp));
  AnimalCPP_descriptor_ = file->message_type(12);
  static const int AnimalCPP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, ud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, residenceud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, animalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, fulltime_),
  };
  AnimalCPP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnimalCPP_descriptor_,
      AnimalCPP::default_instance_,
      AnimalCPP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnimalCPP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnimalCPP));
  AdoptAnimalReq_descriptor_ = file->message_type(13);
  static const int AdoptAnimalReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, buildud_),
  };
  AdoptAnimalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdoptAnimalReq_descriptor_,
      AdoptAnimalReq::default_instance_,
      AdoptAnimalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdoptAnimalReq));
  AdoptAnimalResp_descriptor_ = file->message_type(14);
  static const int AdoptAnimalResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, commons_),
  };
  AdoptAnimalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdoptAnimalResp_descriptor_,
      AdoptAnimalResp::default_instance_,
      AdoptAnimalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoptAnimalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdoptAnimalResp));
  FeedAnimalReq_descriptor_ = file->message_type(15);
  static const int FeedAnimalReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, animalud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, fodderud_),
  };
  FeedAnimalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedAnimalReq_descriptor_,
      FeedAnimalReq::default_instance_,
      FeedAnimalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedAnimalReq));
  FeedAnimalResp_descriptor_ = file->message_type(16);
  static const int FeedAnimalResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, commons_),
  };
  FeedAnimalResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeedAnimalResp_descriptor_,
      FeedAnimalResp::default_instance_,
      FeedAnimalResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedAnimalResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeedAnimalResp));
  ObtainProductReq_descriptor_ = file->message_type(17);
  static const int ObtainProductReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, animalud_),
  };
  ObtainProductReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObtainProductReq_descriptor_,
      ObtainProductReq::default_instance_,
      ObtainProductReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObtainProductReq));
  ObtainProductResp_descriptor_ = file->message_type(18);
  static const int ObtainProductResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, isfull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, animal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, commons_),
  };
  ObtainProductResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObtainProductResp_descriptor_,
      ObtainProductResp::default_instance_,
      ObtainProductResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObtainProductResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObtainProductResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoProduce_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CropLandCPP_descriptor_, &CropLandCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlantCropReq_descriptor_, &PlantCropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlantCropResp_descriptor_, &PlantCropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapCropReq_descriptor_, &ReapCropReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReapCropResp_descriptor_, &ReapCropResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProduceEquipCPP_descriptor_, &ProduceEquipCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandQueueReq_descriptor_, &ExpandQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpandQueueResp_descriptor_, &ExpandQueueResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinQueueReq_descriptor_, &JoinQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinQueueResp_descriptor_, &JoinQueueResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductReq_descriptor_, &FetchProductReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FetchProductResp_descriptor_, &FetchProductResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnimalCPP_descriptor_, &AnimalCPP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdoptAnimalReq_descriptor_, &AdoptAnimalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdoptAnimalResp_descriptor_, &AdoptAnimalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedAnimalReq_descriptor_, &FeedAnimalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeedAnimalResp_descriptor_, &FeedAnimalResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObtainProductReq_descriptor_, &ObtainProductReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObtainProductResp_descriptor_, &ObtainProductResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoProduce_2eproto() {
  delete CropLandCPP::default_instance_;
  delete CropLandCPP_reflection_;
  delete PlantCropReq::default_instance_;
  delete PlantCropReq_reflection_;
  delete PlantCropResp::default_instance_;
  delete PlantCropResp_reflection_;
  delete ReapCropReq::default_instance_;
  delete ReapCropReq_reflection_;
  delete ReapCropResp::default_instance_;
  delete ReapCropResp_reflection_;
  delete ProduceEquipCPP::default_instance_;
  delete ProduceEquipCPP_reflection_;
  delete ExpandQueueReq::default_instance_;
  delete ExpandQueueReq_reflection_;
  delete ExpandQueueResp::default_instance_;
  delete ExpandQueueResp_reflection_;
  delete JoinQueueReq::default_instance_;
  delete JoinQueueReq_reflection_;
  delete JoinQueueResp::default_instance_;
  delete JoinQueueResp_reflection_;
  delete FetchProductReq::default_instance_;
  delete FetchProductReq_reflection_;
  delete FetchProductResp::default_instance_;
  delete FetchProductResp_reflection_;
  delete AnimalCPP::default_instance_;
  delete AnimalCPP_reflection_;
  delete AdoptAnimalReq::default_instance_;
  delete AdoptAnimalReq_reflection_;
  delete AdoptAnimalResp::default_instance_;
  delete AdoptAnimalResp_reflection_;
  delete FeedAnimalReq::default_instance_;
  delete FeedAnimalReq_reflection_;
  delete FeedAnimalResp::default_instance_;
  delete FeedAnimalResp_reflection_;
  delete ObtainProductReq::default_instance_;
  delete ObtainProductReq_reflection_;
  delete ObtainProductResp::default_instance_;
  delete ObtainProductResp_reflection_;
}

void protobuf_AddDesc_ProtoProduce_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::DataCommon::protobuf_AddDesc_DataCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoProduce.proto\022\014ProtoProduce\032\020Data"
    "Common.proto\"M\n\013CropLandCPP\022\n\n\002ud\030\001 \002(\r\022"
    "\r\n\005plant\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\023\n\013harves"
    "tTime\030\004 \002(\r\"*\n\014PlantCropReq\022\013\n\003uds\030\001 \003(\r"
    "\022\r\n\005plant\030\002 \002(\r\"i\n\rPlantCropResp\022+\n\010crop"
    "land\030\001 \003(\0132\031.ProtoProduce.CropLandCPP\022+\n"
    "\007commons\030\002 \002(\0132\032.DataCommon.CommonItemsC"
    "PP\"\032\n\013ReapCropReq\022\013\n\003uds\030\001 \003(\r\"x\n\014ReapCr"
    "opResp\022+\n\010cropland\030\001 \003(\0132\031.ProtoProduce."
    "CropLandCPP\022+\n\007commons\030\002 \002(\0132\032.DataCommo"
    "n.CommonItemsCPP\022\016\n\006isfull\030\003 \002(\010\"z\n\017Prod"
    "uceEquipCPP\022\n\n\002ud\030\001 \002(\r\022\016\n\006status\030\002 \002(\r\022"
    "\020\n\010queuenum\030\003 \002(\r\022\021\n\tqueuedata\030\004 \003(\r\022\021\n\t"
    "shelfdata\030\005 \003(\r\022\023\n\013finish_time\030\006 \002(\r\"!\n\016"
    "ExpandQueueReq\022\017\n\007equipud\030\001 \002(\r\"p\n\017Expan"
    "dQueueResp\0220\n\tequipment\030\001 \002(\0132\035.ProtoPro"
    "duce.ProduceEquipCPP\022+\n\007commons\030\002 \002(\0132\032."
    "DataCommon.CommonItemsCPP\"0\n\014JoinQueueRe"
    "q\022\017\n\007propsid\030\001 \002(\r\022\017\n\007equipud\030\002 \002(\r\"n\n\rJ"
    "oinQueueResp\0220\n\tequipment\030\001 \002(\0132\035.ProtoP"
    "roduce.ProduceEquipCPP\022+\n\007commons\030\002 \002(\0132"
    "\032.DataCommon.CommonItemsCPP\"/\n\017FetchProd"
    "uctReq\022\013\n\003pos\030\001 \002(\r\022\017\n\007equipud\030\002 \002(\r\"\201\001\n"
    "\020FetchProductResp\0220\n\tequipment\030\001 \002(\0132\035.P"
    "rotoProduce.ProduceEquipCPP\022+\n\007commons\030\002"
    " \001(\0132\032.DataCommon.CommonItemsCPP\022\016\n\006isfu"
    "ll\030\003 \002(\010\"`\n\tAnimalCPP\022\n\n\002ud\030\001 \002(\r\022\023\n\013res"
    "idenceUd\030\002 \002(\r\022\020\n\010animalId\030\003 \002(\r\022\016\n\006stat"
    "us\030\004 \002(\r\022\020\n\010fullTime\030\005 \002(\r\"!\n\016AdoptAnima"
    "lReq\022\017\n\007buildud\030\001 \002(\r\"g\n\017AdoptAnimalResp"
    "\022\'\n\006animal\030\001 \002(\0132\027.ProtoProduce.AnimalCP"
    "P\022+\n\007commons\030\002 \002(\0132\032.DataCommon.CommonIt"
    "emsCPP\"3\n\rFeedAnimalReq\022\020\n\010animalud\030\001 \002("
    "\r\022\020\n\010fodderud\030\002 \002(\r\"f\n\016FeedAnimalResp\022\'\n"
    "\006animal\030\001 \002(\0132\027.ProtoProduce.AnimalCPP\022+"
    "\n\007commons\030\002 \002(\0132\032.DataCommon.CommonItems"
    "CPP\"$\n\020ObtainProductReq\022\020\n\010animalud\030\001 \002("
    "\r\"y\n\021ObtainProductResp\022\016\n\006isfull\030\001 \002(\010\022\'"
    "\n\006animal\030\002 \001(\0132\027.ProtoProduce.AnimalCPP\022"
    "+\n\007commons\030\003 \001(\0132\032.DataCommon.CommonItem"
    "sCPP", 1604);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoProduce.proto", &protobuf_RegisterTypes);
  CropLandCPP::default_instance_ = new CropLandCPP();
  PlantCropReq::default_instance_ = new PlantCropReq();
  PlantCropResp::default_instance_ = new PlantCropResp();
  ReapCropReq::default_instance_ = new ReapCropReq();
  ReapCropResp::default_instance_ = new ReapCropResp();
  ProduceEquipCPP::default_instance_ = new ProduceEquipCPP();
  ExpandQueueReq::default_instance_ = new ExpandQueueReq();
  ExpandQueueResp::default_instance_ = new ExpandQueueResp();
  JoinQueueReq::default_instance_ = new JoinQueueReq();
  JoinQueueResp::default_instance_ = new JoinQueueResp();
  FetchProductReq::default_instance_ = new FetchProductReq();
  FetchProductResp::default_instance_ = new FetchProductResp();
  AnimalCPP::default_instance_ = new AnimalCPP();
  AdoptAnimalReq::default_instance_ = new AdoptAnimalReq();
  AdoptAnimalResp::default_instance_ = new AdoptAnimalResp();
  FeedAnimalReq::default_instance_ = new FeedAnimalReq();
  FeedAnimalResp::default_instance_ = new FeedAnimalResp();
  ObtainProductReq::default_instance_ = new ObtainProductReq();
  ObtainProductResp::default_instance_ = new ObtainProductResp();
  CropLandCPP::default_instance_->InitAsDefaultInstance();
  PlantCropReq::default_instance_->InitAsDefaultInstance();
  PlantCropResp::default_instance_->InitAsDefaultInstance();
  ReapCropReq::default_instance_->InitAsDefaultInstance();
  ReapCropResp::default_instance_->InitAsDefaultInstance();
  ProduceEquipCPP::default_instance_->InitAsDefaultInstance();
  ExpandQueueReq::default_instance_->InitAsDefaultInstance();
  ExpandQueueResp::default_instance_->InitAsDefaultInstance();
  JoinQueueReq::default_instance_->InitAsDefaultInstance();
  JoinQueueResp::default_instance_->InitAsDefaultInstance();
  FetchProductReq::default_instance_->InitAsDefaultInstance();
  FetchProductResp::default_instance_->InitAsDefaultInstance();
  AnimalCPP::default_instance_->InitAsDefaultInstance();
  AdoptAnimalReq::default_instance_->InitAsDefaultInstance();
  AdoptAnimalResp::default_instance_->InitAsDefaultInstance();
  FeedAnimalReq::default_instance_->InitAsDefaultInstance();
  FeedAnimalResp::default_instance_->InitAsDefaultInstance();
  ObtainProductReq::default_instance_->InitAsDefaultInstance();
  ObtainProductResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoProduce_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoProduce_2eproto {
  StaticDescriptorInitializer_ProtoProduce_2eproto() {
    protobuf_AddDesc_ProtoProduce_2eproto();
  }
} static_descriptor_initializer_ProtoProduce_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CropLandCPP::kUdFieldNumber;
const int CropLandCPP::kPlantFieldNumber;
const int CropLandCPP::kStatusFieldNumber;
const int CropLandCPP::kHarvestTimeFieldNumber;
#endif  // !_MSC_VER

CropLandCPP::CropLandCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.CropLandCPP)
}

void CropLandCPP::InitAsDefaultInstance() {
}

CropLandCPP::CropLandCPP(const CropLandCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.CropLandCPP)
}

void CropLandCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  plant_ = 0u;
  status_ = 0u;
  harvesttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CropLandCPP::~CropLandCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.CropLandCPP)
  SharedDtor();
}

void CropLandCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CropLandCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CropLandCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CropLandCPP_descriptor_;
}

const CropLandCPP& CropLandCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

CropLandCPP* CropLandCPP::default_instance_ = NULL;

CropLandCPP* CropLandCPP::New() const {
  return new CropLandCPP;
}

void CropLandCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CropLandCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, harvesttime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CropLandCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.CropLandCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_harvestTime;
        break;
      }

      // required uint32 harvestTime = 4;
      case 4: {
        if (tag == 32) {
         parse_harvestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvesttime_)));
          set_has_harvesttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.CropLandCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.CropLandCPP)
  return false;
#undef DO_
}

void CropLandCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  // required uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->harvesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.CropLandCPP)
}

::google::protobuf::uint8* CropLandCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.CropLandCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  // required uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // required uint32 harvestTime = 4;
  if (has_harvesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->harvesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.CropLandCPP)
  return target;
}

int CropLandCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

    // required uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 harvestTime = 4;
    if (has_harvesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CropLandCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CropLandCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CropLandCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CropLandCPP::MergeFrom(const CropLandCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_plant()) {
      set_plant(from.plant());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_harvesttime()) {
      set_harvesttime(from.harvesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CropLandCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CropLandCPP::CopyFrom(const CropLandCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CropLandCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CropLandCPP::Swap(CropLandCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(plant_, other->plant_);
    std::swap(status_, other->status_);
    std::swap(harvesttime_, other->harvesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CropLandCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CropLandCPP_descriptor_;
  metadata.reflection = CropLandCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlantCropReq::kUdsFieldNumber;
const int PlantCropReq::kPlantFieldNumber;
#endif  // !_MSC_VER

PlantCropReq::PlantCropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PlantCropReq)
}

void PlantCropReq::InitAsDefaultInstance() {
}

PlantCropReq::PlantCropReq(const PlantCropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PlantCropReq)
}

void PlantCropReq::SharedCtor() {
  _cached_size_ = 0;
  plant_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlantCropReq::~PlantCropReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PlantCropReq)
  SharedDtor();
}

void PlantCropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlantCropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantCropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlantCropReq_descriptor_;
}

const PlantCropReq& PlantCropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PlantCropReq* PlantCropReq::default_instance_ = NULL;

PlantCropReq* PlantCropReq::New() const {
  return new PlantCropReq;
}

void PlantCropReq::Clear() {
  plant_ = 0u;
  uds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlantCropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PlantCropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uds = 1;
      case 1: {
        if (tag == 8) {
         parse_uds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uds;
        if (input->ExpectTag(16)) goto parse_plant;
        break;
      }

      // required uint32 plant = 2;
      case 2: {
        if (tag == 16) {
         parse_plant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plant_)));
          set_has_plant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PlantCropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PlantCropReq)
  return false;
#undef DO_
}

void PlantCropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PlantCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uds(i), output);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PlantCropReq)
}

::google::protobuf::uint8* PlantCropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PlantCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uds(i), target);
  }

  // required uint32 plant = 2;
  if (has_plant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PlantCropReq)
  return target;
}

int PlantCropReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 plant = 2;
    if (has_plant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plant());
    }

  }
  // repeated uint32 uds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uds(i));
    }
    total_size += 1 * this->uds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantCropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlantCropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlantCropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlantCropReq::MergeFrom(const PlantCropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uds_.MergeFrom(from.uds_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_plant()) {
      set_plant(from.plant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlantCropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantCropReq::CopyFrom(const PlantCropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantCropReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void PlantCropReq::Swap(PlantCropReq* other) {
  if (other != this) {
    uds_.Swap(&other->uds_);
    std::swap(plant_, other->plant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlantCropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlantCropReq_descriptor_;
  metadata.reflection = PlantCropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlantCropResp::kCroplandFieldNumber;
const int PlantCropResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

PlantCropResp::PlantCropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.PlantCropResp)
}

void PlantCropResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

PlantCropResp::PlantCropResp(const PlantCropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.PlantCropResp)
}

void PlantCropResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlantCropResp::~PlantCropResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.PlantCropResp)
  SharedDtor();
}

void PlantCropResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void PlantCropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlantCropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlantCropResp_descriptor_;
}

const PlantCropResp& PlantCropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

PlantCropResp* PlantCropResp::default_instance_ = NULL;

PlantCropResp* PlantCropResp::New() const {
  return new PlantCropResp;
}

void PlantCropResp::Clear() {
  if (has_commons()) {
    if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
  }
  cropland_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlantCropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.PlantCropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoProduce.CropLandCPP cropland = 1;
      case 1: {
        if (tag == 10) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cropland;
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.PlantCropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.PlantCropResp)
  return false;
#undef DO_
}

void PlantCropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.PlantCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cropland(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.PlantCropResp)
}

::google::protobuf::uint8* PlantCropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.PlantCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cropland(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.PlantCropResp)
  return target;
}

int PlantCropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlantCropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlantCropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlantCropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlantCropResp::MergeFrom(const PlantCropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropland_.MergeFrom(from.cropland_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlantCropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlantCropResp::CopyFrom(const PlantCropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlantCropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void PlantCropResp::Swap(PlantCropResp* other) {
  if (other != this) {
    cropland_.Swap(&other->cropland_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlantCropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlantCropResp_descriptor_;
  metadata.reflection = PlantCropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapCropReq::kUdsFieldNumber;
#endif  // !_MSC_VER

ReapCropReq::ReapCropReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapCropReq)
}

void ReapCropReq::InitAsDefaultInstance() {
}

ReapCropReq::ReapCropReq(const ReapCropReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapCropReq)
}

void ReapCropReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapCropReq::~ReapCropReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapCropReq)
  SharedDtor();
}

void ReapCropReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReapCropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapCropReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapCropReq_descriptor_;
}

const ReapCropReq& ReapCropReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapCropReq* ReapCropReq::default_instance_ = NULL;

ReapCropReq* ReapCropReq::New() const {
  return new ReapCropReq;
}

void ReapCropReq::Clear() {
  uds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapCropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapCropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uds = 1;
      case 1: {
        if (tag == 8) {
         parse_uds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_uds())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_uds;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapCropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapCropReq)
  return false;
#undef DO_
}

void ReapCropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->uds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapCropReq)
}

::google::protobuf::uint8* ReapCropReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapCropReq)
  // repeated uint32 uds = 1;
  for (int i = 0; i < this->uds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->uds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapCropReq)
  return target;
}

int ReapCropReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 uds = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uds_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uds(i));
    }
    total_size += 1 * this->uds_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapCropReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapCropReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapCropReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapCropReq::MergeFrom(const ReapCropReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uds_.MergeFrom(from.uds_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapCropReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapCropReq::CopyFrom(const ReapCropReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapCropReq::IsInitialized() const {

  return true;
}

void ReapCropReq::Swap(ReapCropReq* other) {
  if (other != this) {
    uds_.Swap(&other->uds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapCropReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapCropReq_descriptor_;
  metadata.reflection = ReapCropReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReapCropResp::kCroplandFieldNumber;
const int ReapCropResp::kCommonsFieldNumber;
const int ReapCropResp::kIsfullFieldNumber;
#endif  // !_MSC_VER

ReapCropResp::ReapCropResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ReapCropResp)
}

void ReapCropResp::InitAsDefaultInstance() {
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ReapCropResp::ReapCropResp(const ReapCropResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ReapCropResp)
}

void ReapCropResp::SharedCtor() {
  _cached_size_ = 0;
  commons_ = NULL;
  isfull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReapCropResp::~ReapCropResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ReapCropResp)
  SharedDtor();
}

void ReapCropResp::SharedDtor() {
  if (this != default_instance_) {
    delete commons_;
  }
}

void ReapCropResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReapCropResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReapCropResp_descriptor_;
}

const ReapCropResp& ReapCropResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ReapCropResp* ReapCropResp::default_instance_ = NULL;

ReapCropResp* ReapCropResp::New() const {
  return new ReapCropResp;
}

void ReapCropResp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    isfull_ = false;
  }
  cropland_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReapCropResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ReapCropResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ProtoProduce.CropLandCPP cropland = 1;
      case 1: {
        if (tag == 10) {
         parse_cropland:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cropland()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_cropland;
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isfull;
        break;
      }

      // required bool isfull = 3;
      case 3: {
        if (tag == 24) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ReapCropResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ReapCropResp)
  return false;
#undef DO_
}

void ReapCropResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ReapCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cropland(i), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ReapCropResp)
}

::google::protobuf::uint8* ReapCropResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ReapCropResp)
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  for (int i = 0; i < this->cropland_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cropland(i), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ReapCropResp)
  return target;
}

int ReapCropResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required bool isfull = 3;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ProtoProduce.CropLandCPP cropland = 1;
  total_size += 1 * this->cropland_size();
  for (int i = 0; i < this->cropland_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cropland(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReapCropResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReapCropResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReapCropResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReapCropResp::MergeFrom(const ReapCropResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cropland_.MergeFrom(from.cropland_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReapCropResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReapCropResp::CopyFrom(const ReapCropResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReapCropResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cropland())) return false;
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ReapCropResp::Swap(ReapCropResp* other) {
  if (other != this) {
    cropland_.Swap(&other->cropland_);
    std::swap(commons_, other->commons_);
    std::swap(isfull_, other->isfull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReapCropResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReapCropResp_descriptor_;
  metadata.reflection = ReapCropResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProduceEquipCPP::kUdFieldNumber;
const int ProduceEquipCPP::kStatusFieldNumber;
const int ProduceEquipCPP::kQueuenumFieldNumber;
const int ProduceEquipCPP::kQueuedataFieldNumber;
const int ProduceEquipCPP::kShelfdataFieldNumber;
const int ProduceEquipCPP::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

ProduceEquipCPP::ProduceEquipCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ProduceEquipCPP)
}

void ProduceEquipCPP::InitAsDefaultInstance() {
}

ProduceEquipCPP::ProduceEquipCPP(const ProduceEquipCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ProduceEquipCPP)
}

void ProduceEquipCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  status_ = 0u;
  queuenum_ = 0u;
  finish_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProduceEquipCPP::~ProduceEquipCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ProduceEquipCPP)
  SharedDtor();
}

void ProduceEquipCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProduceEquipCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProduceEquipCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProduceEquipCPP_descriptor_;
}

const ProduceEquipCPP& ProduceEquipCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ProduceEquipCPP* ProduceEquipCPP::default_instance_ = NULL;

ProduceEquipCPP* ProduceEquipCPP::New() const {
  return new ProduceEquipCPP;
}

void ProduceEquipCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProduceEquipCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ud_, status_);
  ZR_(queuenum_, finish_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  queuedata_.Clear();
  shelfdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProduceEquipCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ProduceEquipCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required uint32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_queuenum;
        break;
      }

      // required uint32 queuenum = 3;
      case 3: {
        if (tag == 24) {
         parse_queuenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queuenum_)));
          set_has_queuenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        break;
      }

      // repeated uint32 queuedata = 4;
      case 4: {
        if (tag == 32) {
         parse_queuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_queuedata())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_queuedata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queuedata;
        if (input->ExpectTag(40)) goto parse_shelfdata;
        break;
      }

      // repeated uint32 shelfdata = 5;
      case 5: {
        if (tag == 40) {
         parse_shelfdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_shelfdata())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shelfdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shelfdata;
        if (input->ExpectTag(48)) goto parse_finish_time;
        break;
      }

      // required uint32 finish_time = 6;
      case 6: {
        if (tag == 48) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ProduceEquipCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ProduceEquipCPP)
  return false;
#undef DO_
}

void ProduceEquipCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queuenum(), output);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->queuedata(i), output);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->shelfdata(i), output);
  }

  // required uint32 finish_time = 6;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->finish_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ProduceEquipCPP)
}

::google::protobuf::uint8* ProduceEquipCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ProduceEquipCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // required uint32 queuenum = 3;
  if (has_queuenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queuenum(), target);
  }

  // repeated uint32 queuedata = 4;
  for (int i = 0; i < this->queuedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->queuedata(i), target);
  }

  // repeated uint32 shelfdata = 5;
  for (int i = 0; i < this->shelfdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->shelfdata(i), target);
  }

  // required uint32 finish_time = 6;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->finish_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ProduceEquipCPP)
  return target;
}

int ProduceEquipCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 queuenum = 3;
    if (has_queuenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queuenum());
    }

    // required uint32 finish_time = 6;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_time());
    }

  }
  // repeated uint32 queuedata = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->queuedata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->queuedata(i));
    }
    total_size += 1 * this->queuedata_size() + data_size;
  }

  // repeated uint32 shelfdata = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->shelfdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shelfdata(i));
    }
    total_size += 1 * this->shelfdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProduceEquipCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProduceEquipCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProduceEquipCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProduceEquipCPP::MergeFrom(const ProduceEquipCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  queuedata_.MergeFrom(from.queuedata_);
  shelfdata_.MergeFrom(from.shelfdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_queuenum()) {
      set_queuenum(from.queuenum());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProduceEquipCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProduceEquipCPP::CopyFrom(const ProduceEquipCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProduceEquipCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void ProduceEquipCPP::Swap(ProduceEquipCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(status_, other->status_);
    std::swap(queuenum_, other->queuenum_);
    queuedata_.Swap(&other->queuedata_);
    shelfdata_.Swap(&other->shelfdata_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProduceEquipCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProduceEquipCPP_descriptor_;
  metadata.reflection = ProduceEquipCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandQueueReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

ExpandQueueReq::ExpandQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ExpandQueueReq)
}

void ExpandQueueReq::InitAsDefaultInstance() {
}

ExpandQueueReq::ExpandQueueReq(const ExpandQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ExpandQueueReq)
}

void ExpandQueueReq::SharedCtor() {
  _cached_size_ = 0;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandQueueReq::~ExpandQueueReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ExpandQueueReq)
  SharedDtor();
}

void ExpandQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpandQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandQueueReq_descriptor_;
}

const ExpandQueueReq& ExpandQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ExpandQueueReq* ExpandQueueReq::default_instance_ = NULL;

ExpandQueueReq* ExpandQueueReq::New() const {
  return new ExpandQueueReq;
}

void ExpandQueueReq::Clear() {
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ExpandQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 equipud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ExpandQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ExpandQueueReq)
  return false;
#undef DO_
}

void ExpandQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ExpandQueueReq)
  // required uint32 equipud = 1;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ExpandQueueReq)
}

::google::protobuf::uint8* ExpandQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ExpandQueueReq)
  // required uint32 equipud = 1;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ExpandQueueReq)
  return target;
}

int ExpandQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 equipud = 1;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandQueueReq::MergeFrom(const ExpandQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandQueueReq::CopyFrom(const ExpandQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExpandQueueReq::Swap(ExpandQueueReq* other) {
  if (other != this) {
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandQueueReq_descriptor_;
  metadata.reflection = ExpandQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpandQueueResp::kEquipmentFieldNumber;
const int ExpandQueueResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ExpandQueueResp::ExpandQueueResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ExpandQueueResp)
}

void ExpandQueueResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ExpandQueueResp::ExpandQueueResp(const ExpandQueueResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ExpandQueueResp)
}

void ExpandQueueResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpandQueueResp::~ExpandQueueResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ExpandQueueResp)
  SharedDtor();
}

void ExpandQueueResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void ExpandQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpandQueueResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpandQueueResp_descriptor_;
}

const ExpandQueueResp& ExpandQueueResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ExpandQueueResp* ExpandQueueResp::default_instance_ = NULL;

ExpandQueueResp* ExpandQueueResp::New() const {
  return new ExpandQueueResp;
}

void ExpandQueueResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpandQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ExpandQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ExpandQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ExpandQueueResp)
  return false;
#undef DO_
}

void ExpandQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ExpandQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ExpandQueueResp)
}

::google::protobuf::uint8* ExpandQueueResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ExpandQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ExpandQueueResp)
  return target;
}

int ExpandQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpandQueueResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpandQueueResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpandQueueResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpandQueueResp::MergeFrom(const ExpandQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpandQueueResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandQueueResp::CopyFrom(const ExpandQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ExpandQueueResp::Swap(ExpandQueueResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpandQueueResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpandQueueResp_descriptor_;
  metadata.reflection = ExpandQueueResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinQueueReq::kPropsidFieldNumber;
const int JoinQueueReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

JoinQueueReq::JoinQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.JoinQueueReq)
}

void JoinQueueReq::InitAsDefaultInstance() {
}

JoinQueueReq::JoinQueueReq(const JoinQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.JoinQueueReq)
}

void JoinQueueReq::SharedCtor() {
  _cached_size_ = 0;
  propsid_ = 0u;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinQueueReq::~JoinQueueReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.JoinQueueReq)
  SharedDtor();
}

void JoinQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinQueueReq_descriptor_;
}

const JoinQueueReq& JoinQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

JoinQueueReq* JoinQueueReq::default_instance_ = NULL;

JoinQueueReq* JoinQueueReq::New() const {
  return new JoinQueueReq;
}

void JoinQueueReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinQueueReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(propsid_, equipud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.JoinQueueReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 propsid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &propsid_)));
          set_has_propsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipud;
        break;
      }

      // required uint32 equipud = 2;
      case 2: {
        if (tag == 16) {
         parse_equipud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.JoinQueueReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.JoinQueueReq)
  return false;
#undef DO_
}

void JoinQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.JoinQueueReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->propsid(), output);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.JoinQueueReq)
}

::google::protobuf::uint8* JoinQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.JoinQueueReq)
  // required uint32 propsid = 1;
  if (has_propsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->propsid(), target);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.JoinQueueReq)
  return target;
}

int JoinQueueReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 propsid = 1;
    if (has_propsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->propsid());
    }

    // required uint32 equipud = 2;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinQueueReq::MergeFrom(const JoinQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propsid()) {
      set_propsid(from.propsid());
    }
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinQueueReq::CopyFrom(const JoinQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinQueueReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JoinQueueReq::Swap(JoinQueueReq* other) {
  if (other != this) {
    std::swap(propsid_, other->propsid_);
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinQueueReq_descriptor_;
  metadata.reflection = JoinQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinQueueResp::kEquipmentFieldNumber;
const int JoinQueueResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

JoinQueueResp::JoinQueueResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.JoinQueueResp)
}

void JoinQueueResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

JoinQueueResp::JoinQueueResp(const JoinQueueResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.JoinQueueResp)
}

void JoinQueueResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinQueueResp::~JoinQueueResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.JoinQueueResp)
  SharedDtor();
}

void JoinQueueResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void JoinQueueResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinQueueResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinQueueResp_descriptor_;
}

const JoinQueueResp& JoinQueueResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

JoinQueueResp* JoinQueueResp::default_instance_ = NULL;

JoinQueueResp* JoinQueueResp::New() const {
  return new JoinQueueResp;
}

void JoinQueueResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinQueueResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.JoinQueueResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.JoinQueueResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.JoinQueueResp)
  return false;
#undef DO_
}

void JoinQueueResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.JoinQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.JoinQueueResp)
}

::google::protobuf::uint8* JoinQueueResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.JoinQueueResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.JoinQueueResp)
  return target;
}

int JoinQueueResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinQueueResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinQueueResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinQueueResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinQueueResp::MergeFrom(const JoinQueueResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinQueueResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinQueueResp::CopyFrom(const JoinQueueResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinQueueResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void JoinQueueResp::Swap(JoinQueueResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinQueueResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinQueueResp_descriptor_;
  metadata.reflection = JoinQueueResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductReq::kPosFieldNumber;
const int FetchProductReq::kEquipudFieldNumber;
#endif  // !_MSC_VER

FetchProductReq::FetchProductReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FetchProductReq)
}

void FetchProductReq::InitAsDefaultInstance() {
}

FetchProductReq::FetchProductReq(const FetchProductReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FetchProductReq)
}

void FetchProductReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  equipud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductReq::~FetchProductReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FetchProductReq)
  SharedDtor();
}

void FetchProductReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FetchProductReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductReq_descriptor_;
}

const FetchProductReq& FetchProductReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FetchProductReq* FetchProductReq::default_instance_ = NULL;

FetchProductReq* FetchProductReq::New() const {
  return new FetchProductReq;
}

void FetchProductReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FetchProductReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, equipud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FetchProductReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equipud;
        break;
      }

      // required uint32 equipud = 2;
      case 2: {
        if (tag == 16) {
         parse_equipud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipud_)));
          set_has_equipud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FetchProductReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FetchProductReq)
  return false;
#undef DO_
}

void FetchProductReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FetchProductReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FetchProductReq)
}

::google::protobuf::uint8* FetchProductReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FetchProductReq)
  // required uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // required uint32 equipud = 2;
  if (has_equipud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->equipud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FetchProductReq)
  return target;
}

int FetchProductReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 equipud = 2;
    if (has_equipud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductReq::MergeFrom(const FetchProductReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_equipud()) {
      set_equipud(from.equipud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductReq::CopyFrom(const FetchProductReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FetchProductReq::Swap(FetchProductReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(equipud_, other->equipud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductReq_descriptor_;
  metadata.reflection = FetchProductReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FetchProductResp::kEquipmentFieldNumber;
const int FetchProductResp::kCommonsFieldNumber;
const int FetchProductResp::kIsfullFieldNumber;
#endif  // !_MSC_VER

FetchProductResp::FetchProductResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FetchProductResp)
}

void FetchProductResp::InitAsDefaultInstance() {
  equipment_ = const_cast< ::ProtoProduce::ProduceEquipCPP*>(&::ProtoProduce::ProduceEquipCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FetchProductResp::FetchProductResp(const FetchProductResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FetchProductResp)
}

void FetchProductResp::SharedCtor() {
  _cached_size_ = 0;
  equipment_ = NULL;
  commons_ = NULL;
  isfull_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FetchProductResp::~FetchProductResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FetchProductResp)
  SharedDtor();
}

void FetchProductResp::SharedDtor() {
  if (this != default_instance_) {
    delete equipment_;
    delete commons_;
  }
}

void FetchProductResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FetchProductResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FetchProductResp_descriptor_;
}

const FetchProductResp& FetchProductResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FetchProductResp* FetchProductResp::default_instance_ = NULL;

FetchProductResp* FetchProductResp::New() const {
  return new FetchProductResp;
}

void FetchProductResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_equipment()) {
      if (equipment_ != NULL) equipment_->::ProtoProduce::ProduceEquipCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
    isfull_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FetchProductResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FetchProductResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.ProduceEquipCPP equipment = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isfull;
        break;
      }

      // required bool isfull = 3;
      case 3: {
        if (tag == 24) {
         parse_isfull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FetchProductResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FetchProductResp)
  return false;
#undef DO_
}

void FetchProductResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FetchProductResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfull(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FetchProductResp)
}

::google::protobuf::uint8* FetchProductResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FetchProductResp)
  // required .ProtoProduce.ProduceEquipCPP equipment = 1;
  if (has_equipment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  // required bool isfull = 3;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfull(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FetchProductResp)
  return target;
}

int FetchProductResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.ProduceEquipCPP equipment = 1;
    if (has_equipment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipment());
    }

    // optional .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

    // required bool isfull = 3;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FetchProductResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FetchProductResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FetchProductResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FetchProductResp::MergeFrom(const FetchProductResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipment()) {
      mutable_equipment()->::ProtoProduce::ProduceEquipCPP::MergeFrom(from.equipment());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FetchProductResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FetchProductResp::CopyFrom(const FetchProductResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_equipment()) {
    if (!this->equipment().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void FetchProductResp::Swap(FetchProductResp* other) {
  if (other != this) {
    std::swap(equipment_, other->equipment_);
    std::swap(commons_, other->commons_);
    std::swap(isfull_, other->isfull_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FetchProductResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FetchProductResp_descriptor_;
  metadata.reflection = FetchProductResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnimalCPP::kUdFieldNumber;
const int AnimalCPP::kResidenceUdFieldNumber;
const int AnimalCPP::kAnimalIdFieldNumber;
const int AnimalCPP::kStatusFieldNumber;
const int AnimalCPP::kFullTimeFieldNumber;
#endif  // !_MSC_VER

AnimalCPP::AnimalCPP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AnimalCPP)
}

void AnimalCPP::InitAsDefaultInstance() {
}

AnimalCPP::AnimalCPP(const AnimalCPP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AnimalCPP)
}

void AnimalCPP::SharedCtor() {
  _cached_size_ = 0;
  ud_ = 0u;
  residenceud_ = 0u;
  animalid_ = 0u;
  status_ = 0u;
  fulltime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnimalCPP::~AnimalCPP() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AnimalCPP)
  SharedDtor();
}

void AnimalCPP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnimalCPP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnimalCPP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnimalCPP_descriptor_;
}

const AnimalCPP& AnimalCPP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AnimalCPP* AnimalCPP::default_instance_ = NULL;

AnimalCPP* AnimalCPP::New() const {
  return new AnimalCPP;
}

void AnimalCPP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AnimalCPP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ud_, fulltime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnimalCPP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AnimalCPP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ud_)));
          set_has_ud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_residenceUd;
        break;
      }

      // required uint32 residenceUd = 2;
      case 2: {
        if (tag == 16) {
         parse_residenceUd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &residenceud_)));
          set_has_residenceud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animalId;
        break;
      }

      // required uint32 animalId = 3;
      case 3: {
        if (tag == 24) {
         parse_animalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalid_)));
          set_has_animalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fullTime;
        break;
      }

      // required uint32 fullTime = 5;
      case 5: {
        if (tag == 40) {
         parse_fullTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fulltime_)));
          set_has_fulltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AnimalCPP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AnimalCPP)
  return false;
#undef DO_
}

void AnimalCPP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ud(), output);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->residenceud(), output);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->animalid(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fulltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AnimalCPP)
}

::google::protobuf::uint8* AnimalCPP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AnimalCPP)
  // required uint32 ud = 1;
  if (has_ud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ud(), target);
  }

  // required uint32 residenceUd = 2;
  if (has_residenceud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->residenceud(), target);
  }

  // required uint32 animalId = 3;
  if (has_animalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->animalid(), target);
  }

  // required uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // required uint32 fullTime = 5;
  if (has_fulltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fulltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AnimalCPP)
  return target;
}

int AnimalCPP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ud = 1;
    if (has_ud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ud());
    }

    // required uint32 residenceUd = 2;
    if (has_residenceud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->residenceud());
    }

    // required uint32 animalId = 3;
    if (has_animalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalid());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 fullTime = 5;
    if (has_fulltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fulltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnimalCPP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnimalCPP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnimalCPP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnimalCPP::MergeFrom(const AnimalCPP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ud()) {
      set_ud(from.ud());
    }
    if (from.has_residenceud()) {
      set_residenceud(from.residenceud());
    }
    if (from.has_animalid()) {
      set_animalid(from.animalid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fulltime()) {
      set_fulltime(from.fulltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnimalCPP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimalCPP::CopyFrom(const AnimalCPP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimalCPP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AnimalCPP::Swap(AnimalCPP* other) {
  if (other != this) {
    std::swap(ud_, other->ud_);
    std::swap(residenceud_, other->residenceud_);
    std::swap(animalid_, other->animalid_);
    std::swap(status_, other->status_);
    std::swap(fulltime_, other->fulltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnimalCPP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnimalCPP_descriptor_;
  metadata.reflection = AnimalCPP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdoptAnimalReq::kBuildudFieldNumber;
#endif  // !_MSC_VER

AdoptAnimalReq::AdoptAnimalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AdoptAnimalReq)
}

void AdoptAnimalReq::InitAsDefaultInstance() {
}

AdoptAnimalReq::AdoptAnimalReq(const AdoptAnimalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AdoptAnimalReq)
}

void AdoptAnimalReq::SharedCtor() {
  _cached_size_ = 0;
  buildud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdoptAnimalReq::~AdoptAnimalReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AdoptAnimalReq)
  SharedDtor();
}

void AdoptAnimalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdoptAnimalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdoptAnimalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdoptAnimalReq_descriptor_;
}

const AdoptAnimalReq& AdoptAnimalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AdoptAnimalReq* AdoptAnimalReq::default_instance_ = NULL;

AdoptAnimalReq* AdoptAnimalReq::New() const {
  return new AdoptAnimalReq;
}

void AdoptAnimalReq::Clear() {
  buildud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdoptAnimalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AdoptAnimalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buildud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildud_)));
          set_has_buildud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AdoptAnimalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AdoptAnimalReq)
  return false;
#undef DO_
}

void AdoptAnimalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AdoptAnimalReq)
  // required uint32 buildud = 1;
  if (has_buildud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buildud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AdoptAnimalReq)
}

::google::protobuf::uint8* AdoptAnimalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AdoptAnimalReq)
  // required uint32 buildud = 1;
  if (has_buildud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buildud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AdoptAnimalReq)
  return target;
}

int AdoptAnimalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buildud = 1;
    if (has_buildud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdoptAnimalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdoptAnimalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdoptAnimalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdoptAnimalReq::MergeFrom(const AdoptAnimalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buildud()) {
      set_buildud(from.buildud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdoptAnimalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoptAnimalReq::CopyFrom(const AdoptAnimalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoptAnimalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdoptAnimalReq::Swap(AdoptAnimalReq* other) {
  if (other != this) {
    std::swap(buildud_, other->buildud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdoptAnimalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdoptAnimalReq_descriptor_;
  metadata.reflection = AdoptAnimalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdoptAnimalResp::kAnimalFieldNumber;
const int AdoptAnimalResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

AdoptAnimalResp::AdoptAnimalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.AdoptAnimalResp)
}

void AdoptAnimalResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

AdoptAnimalResp::AdoptAnimalResp(const AdoptAnimalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.AdoptAnimalResp)
}

void AdoptAnimalResp::SharedCtor() {
  _cached_size_ = 0;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdoptAnimalResp::~AdoptAnimalResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.AdoptAnimalResp)
  SharedDtor();
}

void AdoptAnimalResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void AdoptAnimalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdoptAnimalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdoptAnimalResp_descriptor_;
}

const AdoptAnimalResp& AdoptAnimalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

AdoptAnimalResp* AdoptAnimalResp::default_instance_ = NULL;

AdoptAnimalResp* AdoptAnimalResp::New() const {
  return new AdoptAnimalResp;
}

void AdoptAnimalResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdoptAnimalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.AdoptAnimalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.AnimalCPP animal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.AdoptAnimalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.AdoptAnimalResp)
  return false;
#undef DO_
}

void AdoptAnimalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.AdoptAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animal(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.AdoptAnimalResp)
}

::google::protobuf::uint8* AdoptAnimalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.AdoptAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animal(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.AdoptAnimalResp)
  return target;
}

int AdoptAnimalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.AnimalCPP animal = 1;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdoptAnimalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdoptAnimalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdoptAnimalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdoptAnimalResp::MergeFrom(const AdoptAnimalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdoptAnimalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoptAnimalResp::CopyFrom(const AdoptAnimalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoptAnimalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void AdoptAnimalResp::Swap(AdoptAnimalResp* other) {
  if (other != this) {
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdoptAnimalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdoptAnimalResp_descriptor_;
  metadata.reflection = AdoptAnimalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedAnimalReq::kAnimaludFieldNumber;
const int FeedAnimalReq::kFodderudFieldNumber;
#endif  // !_MSC_VER

FeedAnimalReq::FeedAnimalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FeedAnimalReq)
}

void FeedAnimalReq::InitAsDefaultInstance() {
}

FeedAnimalReq::FeedAnimalReq(const FeedAnimalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FeedAnimalReq)
}

void FeedAnimalReq::SharedCtor() {
  _cached_size_ = 0;
  animalud_ = 0u;
  fodderud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedAnimalReq::~FeedAnimalReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FeedAnimalReq)
  SharedDtor();
}

void FeedAnimalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedAnimalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedAnimalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedAnimalReq_descriptor_;
}

const FeedAnimalReq& FeedAnimalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FeedAnimalReq* FeedAnimalReq::default_instance_ = NULL;

FeedAnimalReq* FeedAnimalReq::New() const {
  return new FeedAnimalReq;
}

void FeedAnimalReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FeedAnimalReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(animalud_, fodderud_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedAnimalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FeedAnimalReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 animalud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalud_)));
          set_has_animalud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fodderud;
        break;
      }

      // required uint32 fodderud = 2;
      case 2: {
        if (tag == 16) {
         parse_fodderud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fodderud_)));
          set_has_fodderud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FeedAnimalReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FeedAnimalReq)
  return false;
#undef DO_
}

void FeedAnimalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FeedAnimalReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->animalud(), output);
  }

  // required uint32 fodderud = 2;
  if (has_fodderud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fodderud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FeedAnimalReq)
}

::google::protobuf::uint8* FeedAnimalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FeedAnimalReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->animalud(), target);
  }

  // required uint32 fodderud = 2;
  if (has_fodderud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fodderud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FeedAnimalReq)
  return target;
}

int FeedAnimalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 animalud = 1;
    if (has_animalud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalud());
    }

    // required uint32 fodderud = 2;
    if (has_fodderud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fodderud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedAnimalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedAnimalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedAnimalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedAnimalReq::MergeFrom(const FeedAnimalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animalud()) {
      set_animalud(from.animalud());
    }
    if (from.has_fodderud()) {
      set_fodderud(from.fodderud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedAnimalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedAnimalReq::CopyFrom(const FeedAnimalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAnimalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FeedAnimalReq::Swap(FeedAnimalReq* other) {
  if (other != this) {
    std::swap(animalud_, other->animalud_);
    std::swap(fodderud_, other->fodderud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedAnimalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedAnimalReq_descriptor_;
  metadata.reflection = FeedAnimalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeedAnimalResp::kAnimalFieldNumber;
const int FeedAnimalResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

FeedAnimalResp::FeedAnimalResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.FeedAnimalResp)
}

void FeedAnimalResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

FeedAnimalResp::FeedAnimalResp(const FeedAnimalResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.FeedAnimalResp)
}

void FeedAnimalResp::SharedCtor() {
  _cached_size_ = 0;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeedAnimalResp::~FeedAnimalResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.FeedAnimalResp)
  SharedDtor();
}

void FeedAnimalResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void FeedAnimalResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedAnimalResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedAnimalResp_descriptor_;
}

const FeedAnimalResp& FeedAnimalResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

FeedAnimalResp* FeedAnimalResp::default_instance_ = NULL;

FeedAnimalResp* FeedAnimalResp::New() const {
  return new FeedAnimalResp;
}

void FeedAnimalResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeedAnimalResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.FeedAnimalResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoProduce.AnimalCPP animal = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_commons;
        break;
      }

      // required .DataCommon.CommonItemsCPP commons = 2;
      case 2: {
        if (tag == 18) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.FeedAnimalResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.FeedAnimalResp)
  return false;
#undef DO_
}

void FeedAnimalResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.FeedAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->animal(), output);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.FeedAnimalResp)
}

::google::protobuf::uint8* FeedAnimalResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.FeedAnimalResp)
  // required .ProtoProduce.AnimalCPP animal = 1;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->animal(), target);
  }

  // required .DataCommon.CommonItemsCPP commons = 2;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.FeedAnimalResp)
  return target;
}

int FeedAnimalResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoProduce.AnimalCPP animal = 1;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // required .DataCommon.CommonItemsCPP commons = 2;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedAnimalResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeedAnimalResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeedAnimalResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedAnimalResp::MergeFrom(const FeedAnimalResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeedAnimalResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedAnimalResp::CopyFrom(const FeedAnimalResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedAnimalResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void FeedAnimalResp::Swap(FeedAnimalResp* other) {
  if (other != this) {
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeedAnimalResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedAnimalResp_descriptor_;
  metadata.reflection = FeedAnimalResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObtainProductReq::kAnimaludFieldNumber;
#endif  // !_MSC_VER

ObtainProductReq::ObtainProductReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ObtainProductReq)
}

void ObtainProductReq::InitAsDefaultInstance() {
}

ObtainProductReq::ObtainProductReq(const ObtainProductReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ObtainProductReq)
}

void ObtainProductReq::SharedCtor() {
  _cached_size_ = 0;
  animalud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObtainProductReq::~ObtainProductReq() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ObtainProductReq)
  SharedDtor();
}

void ObtainProductReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObtainProductReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainProductReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObtainProductReq_descriptor_;
}

const ObtainProductReq& ObtainProductReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ObtainProductReq* ObtainProductReq::default_instance_ = NULL;

ObtainProductReq* ObtainProductReq::New() const {
  return new ObtainProductReq;
}

void ObtainProductReq::Clear() {
  animalud_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObtainProductReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ObtainProductReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 animalud = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &animalud_)));
          set_has_animalud();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ObtainProductReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ObtainProductReq)
  return false;
#undef DO_
}

void ObtainProductReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ObtainProductReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->animalud(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ObtainProductReq)
}

::google::protobuf::uint8* ObtainProductReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ObtainProductReq)
  // required uint32 animalud = 1;
  if (has_animalud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->animalud(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ObtainProductReq)
  return target;
}

int ObtainProductReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 animalud = 1;
    if (has_animalud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->animalud());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainProductReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObtainProductReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObtainProductReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObtainProductReq::MergeFrom(const ObtainProductReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_animalud()) {
      set_animalud(from.animalud());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObtainProductReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainProductReq::CopyFrom(const ObtainProductReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainProductReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ObtainProductReq::Swap(ObtainProductReq* other) {
  if (other != this) {
    std::swap(animalud_, other->animalud_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObtainProductReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObtainProductReq_descriptor_;
  metadata.reflection = ObtainProductReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObtainProductResp::kIsfullFieldNumber;
const int ObtainProductResp::kAnimalFieldNumber;
const int ObtainProductResp::kCommonsFieldNumber;
#endif  // !_MSC_VER

ObtainProductResp::ObtainProductResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoProduce.ObtainProductResp)
}

void ObtainProductResp::InitAsDefaultInstance() {
  animal_ = const_cast< ::ProtoProduce::AnimalCPP*>(&::ProtoProduce::AnimalCPP::default_instance());
  commons_ = const_cast< ::DataCommon::CommonItemsCPP*>(&::DataCommon::CommonItemsCPP::default_instance());
}

ObtainProductResp::ObtainProductResp(const ObtainProductResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoProduce.ObtainProductResp)
}

void ObtainProductResp::SharedCtor() {
  _cached_size_ = 0;
  isfull_ = false;
  animal_ = NULL;
  commons_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObtainProductResp::~ObtainProductResp() {
  // @@protoc_insertion_point(destructor:ProtoProduce.ObtainProductResp)
  SharedDtor();
}

void ObtainProductResp::SharedDtor() {
  if (this != default_instance_) {
    delete animal_;
    delete commons_;
  }
}

void ObtainProductResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObtainProductResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObtainProductResp_descriptor_;
}

const ObtainProductResp& ObtainProductResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoProduce_2eproto();
  return *default_instance_;
}

ObtainProductResp* ObtainProductResp::default_instance_ = NULL;

ObtainProductResp* ObtainProductResp::New() const {
  return new ObtainProductResp;
}

void ObtainProductResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isfull_ = false;
    if (has_animal()) {
      if (animal_ != NULL) animal_->::ProtoProduce::AnimalCPP::Clear();
    }
    if (has_commons()) {
      if (commons_ != NULL) commons_->::DataCommon::CommonItemsCPP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObtainProductResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoProduce.ObtainProductResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isfull = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfull_)));
          set_has_isfull();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_animal;
        break;
      }

      // optional .ProtoProduce.AnimalCPP animal = 2;
      case 2: {
        if (tag == 18) {
         parse_animal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_animal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_commons;
        break;
      }

      // optional .DataCommon.CommonItemsCPP commons = 3;
      case 3: {
        if (tag == 26) {
         parse_commons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoProduce.ObtainProductResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoProduce.ObtainProductResp)
  return false;
#undef DO_
}

void ObtainProductResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoProduce.ObtainProductResp)
  // required bool isfull = 1;
  if (has_isfull()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfull(), output);
  }

  // optional .ProtoProduce.AnimalCPP animal = 2;
  if (has_animal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->animal(), output);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commons(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoProduce.ObtainProductResp)
}

::google::protobuf::uint8* ObtainProductResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoProduce.ObtainProductResp)
  // required bool isfull = 1;
  if (has_isfull()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfull(), target);
  }

  // optional .ProtoProduce.AnimalCPP animal = 2;
  if (has_animal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->animal(), target);
  }

  // optional .DataCommon.CommonItemsCPP commons = 3;
  if (has_commons()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commons(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoProduce.ObtainProductResp)
  return target;
}

int ObtainProductResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isfull = 1;
    if (has_isfull()) {
      total_size += 1 + 1;
    }

    // optional .ProtoProduce.AnimalCPP animal = 2;
    if (has_animal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->animal());
    }

    // optional .DataCommon.CommonItemsCPP commons = 3;
    if (has_commons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commons());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObtainProductResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObtainProductResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObtainProductResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObtainProductResp::MergeFrom(const ObtainProductResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfull()) {
      set_isfull(from.isfull());
    }
    if (from.has_animal()) {
      mutable_animal()->::ProtoProduce::AnimalCPP::MergeFrom(from.animal());
    }
    if (from.has_commons()) {
      mutable_commons()->::DataCommon::CommonItemsCPP::MergeFrom(from.commons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObtainProductResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObtainProductResp::CopyFrom(const ObtainProductResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObtainProductResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_animal()) {
    if (!this->animal().IsInitialized()) return false;
  }
  if (has_commons()) {
    if (!this->commons().IsInitialized()) return false;
  }
  return true;
}

void ObtainProductResp::Swap(ObtainProductResp* other) {
  if (other != this) {
    std::swap(isfull_, other->isfull_);
    std::swap(animal_, other->animal_);
    std::swap(commons_, other->commons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObtainProductResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObtainProductResp_descriptor_;
  metadata.reflection = ObtainProductResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoProduce

// @@protoc_insertion_point(global_scope)
