// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Admin {

namespace {

const ::google::protobuf::Descriptor* AddCash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCash_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyAddCash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyAddCash_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsycItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsycItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsycAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsycAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AsycAddResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AsycAddResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestForbidTS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestForbidTS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyForbidTS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyForbidTS_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetForbidTS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetForbidTS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Admin_2eproto() {
  protobuf_AddDesc_Admin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Admin.proto");
  GOOGLE_CHECK(file != NULL);
  AddCash_descriptor_ = file->message_type(0);
  static const int AddCash_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCash, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCash, cash_),
  };
  AddCash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCash_descriptor_,
      AddCash::default_instance_,
      AddCash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCash));
  ReplyAddCash_descriptor_ = file->message_type(1);
  static const int ReplyAddCash_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddCash, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddCash, cash_),
  };
  ReplyAddCash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyAddCash_descriptor_,
      ReplyAddCash::default_instance_,
      ReplyAddCash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddCash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyAddCash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyAddCash));
  AsycItem_descriptor_ = file->message_type(2);
  static const int AsycItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycItem, count_),
  };
  AsycItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsycItem_descriptor_,
      AsycItem::default_instance_,
      AsycItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsycItem));
  AsycAdd_descriptor_ = file->message_type(3);
  static const int AsycAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAdd, item_),
  };
  AsycAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsycAdd_descriptor_,
      AsycAdd::default_instance_,
      AsycAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsycAdd));
  AsycAddResp_descriptor_ = file->message_type(4);
  static const int AsycAddResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAddResp, ret_),
  };
  AsycAddResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AsycAddResp_descriptor_,
      AsycAddResp::default_instance_,
      AsycAddResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAddResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsycAddResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AsycAddResp));
  RequestForbidTS_descriptor_ = file->message_type(5);
  static const int RequestForbidTS_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForbidTS, uid_),
  };
  RequestForbidTS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestForbidTS_descriptor_,
      RequestForbidTS::default_instance_,
      RequestForbidTS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForbidTS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestForbidTS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestForbidTS));
  ReplyForbidTS_descriptor_ = file->message_type(6);
  static const int ReplyForbidTS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyForbidTS, forbid_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyForbidTS, reason_),
  };
  ReplyForbidTS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyForbidTS_descriptor_,
      ReplyForbidTS::default_instance_,
      ReplyForbidTS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyForbidTS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyForbidTS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyForbidTS));
  SetForbidTS_descriptor_ = file->message_type(7);
  static const int SetForbidTS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForbidTS, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForbidTS, forbid_ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForbidTS, reason_),
  };
  SetForbidTS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetForbidTS_descriptor_,
      SetForbidTS::default_instance_,
      SetForbidTS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForbidTS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetForbidTS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetForbidTS));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Admin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCash_descriptor_, &AddCash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyAddCash_descriptor_, &ReplyAddCash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsycItem_descriptor_, &AsycItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsycAdd_descriptor_, &AsycAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AsycAddResp_descriptor_, &AsycAddResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestForbidTS_descriptor_, &RequestForbidTS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyForbidTS_descriptor_, &ReplyForbidTS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetForbidTS_descriptor_, &SetForbidTS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Admin_2eproto() {
  delete AddCash::default_instance_;
  delete AddCash_reflection_;
  delete ReplyAddCash::default_instance_;
  delete ReplyAddCash_reflection_;
  delete AsycItem::default_instance_;
  delete AsycItem_reflection_;
  delete AsycAdd::default_instance_;
  delete AsycAdd_reflection_;
  delete AsycAddResp::default_instance_;
  delete AsycAddResp_reflection_;
  delete RequestForbidTS::default_instance_;
  delete RequestForbidTS_reflection_;
  delete ReplyForbidTS::default_instance_;
  delete ReplyForbidTS_reflection_;
  delete SetForbidTS::default_instance_;
  delete SetForbidTS_reflection_;
}

void protobuf_AddDesc_Admin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Admin.proto\022\005Admin\"$\n\007AddCash\022\013\n\003uid\030\001"
    " \002(\r\022\014\n\004cash\030\002 \002(\005\")\n\014ReplyAddCash\022\013\n\003ui"
    "d\030\001 \002(\r\022\014\n\004cash\030\002 \002(\r\"2\n\010AsycItem\022\013\n\003uid"
    "\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\022\r\n\005count\030\003 \002(\r\"(\n\007Asy"
    "cAdd\022\035\n\004item\030\001 \003(\0132\017.Admin.AsycItem\"\032\n\013A"
    "sycAddResp\022\013\n\003ret\030\001 \002(\r\"\036\n\017RequestForbid"
    "TS\022\013\n\003uid\030\001 \002(\r\"2\n\rReplyForbidTS\022\021\n\tforb"
    "id_ts\030\001 \002(\r\022\016\n\006reason\030\002 \002(\014\"=\n\013SetForbid"
    "TS\022\013\n\003uid\030\001 \002(\r\022\021\n\tforbid_ts\030\002 \002(\r\022\016\n\006re"
    "ason\030\003 \002(\014", 370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Admin.proto", &protobuf_RegisterTypes);
  AddCash::default_instance_ = new AddCash();
  ReplyAddCash::default_instance_ = new ReplyAddCash();
  AsycItem::default_instance_ = new AsycItem();
  AsycAdd::default_instance_ = new AsycAdd();
  AsycAddResp::default_instance_ = new AsycAddResp();
  RequestForbidTS::default_instance_ = new RequestForbidTS();
  ReplyForbidTS::default_instance_ = new ReplyForbidTS();
  SetForbidTS::default_instance_ = new SetForbidTS();
  AddCash::default_instance_->InitAsDefaultInstance();
  ReplyAddCash::default_instance_->InitAsDefaultInstance();
  AsycItem::default_instance_->InitAsDefaultInstance();
  AsycAdd::default_instance_->InitAsDefaultInstance();
  AsycAddResp::default_instance_->InitAsDefaultInstance();
  RequestForbidTS::default_instance_->InitAsDefaultInstance();
  ReplyForbidTS::default_instance_->InitAsDefaultInstance();
  SetForbidTS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Admin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Admin_2eproto {
  StaticDescriptorInitializer_Admin_2eproto() {
    protobuf_AddDesc_Admin_2eproto();
  }
} static_descriptor_initializer_Admin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AddCash::kUidFieldNumber;
const int AddCash::kCashFieldNumber;
#endif  // !_MSC_VER

AddCash::AddCash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.AddCash)
}

void AddCash::InitAsDefaultInstance() {
}

AddCash::AddCash(const AddCash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.AddCash)
}

void AddCash::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCash::~AddCash() {
  // @@protoc_insertion_point(destructor:Admin.AddCash)
  SharedDtor();
}

void AddCash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCash_descriptor_;
}

const AddCash& AddCash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

AddCash* AddCash::default_instance_ = NULL;

AddCash* AddCash::New() const {
  return new AddCash;
}

void AddCash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddCash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.AddCash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required int32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.AddCash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.AddCash)
  return false;
#undef DO_
}

void AddCash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.AddCash)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required int32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.AddCash)
}

::google::protobuf::uint8* AddCash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.AddCash)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required int32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.AddCash)
  return target;
}

int AddCash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required int32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCash::MergeFrom(const AddCash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCash::CopyFrom(const AddCash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddCash::Swap(AddCash* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCash_descriptor_;
  metadata.reflection = AddCash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyAddCash::kUidFieldNumber;
const int ReplyAddCash::kCashFieldNumber;
#endif  // !_MSC_VER

ReplyAddCash::ReplyAddCash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.ReplyAddCash)
}

void ReplyAddCash::InitAsDefaultInstance() {
}

ReplyAddCash::ReplyAddCash(const ReplyAddCash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.ReplyAddCash)
}

void ReplyAddCash::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyAddCash::~ReplyAddCash() {
  // @@protoc_insertion_point(destructor:Admin.ReplyAddCash)
  SharedDtor();
}

void ReplyAddCash::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyAddCash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyAddCash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyAddCash_descriptor_;
}

const ReplyAddCash& ReplyAddCash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

ReplyAddCash* ReplyAddCash::default_instance_ = NULL;

ReplyAddCash* ReplyAddCash::New() const {
  return new ReplyAddCash;
}

void ReplyAddCash::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyAddCash*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, cash_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyAddCash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.ReplyAddCash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash;
        break;
      }

      // required uint32 cash = 2;
      case 2: {
        if (tag == 16) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.ReplyAddCash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.ReplyAddCash)
  return false;
#undef DO_
}

void ReplyAddCash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.ReplyAddCash)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.ReplyAddCash)
}

::google::protobuf::uint8* ReplyAddCash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.ReplyAddCash)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 cash = 2;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.ReplyAddCash)
  return target;
}

int ReplyAddCash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 cash = 2;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyAddCash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyAddCash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyAddCash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyAddCash::MergeFrom(const ReplyAddCash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyAddCash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyAddCash::CopyFrom(const ReplyAddCash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyAddCash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyAddCash::Swap(ReplyAddCash* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cash_, other->cash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyAddCash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyAddCash_descriptor_;
  metadata.reflection = ReplyAddCash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AsycItem::kUidFieldNumber;
const int AsycItem::kIdFieldNumber;
const int AsycItem::kCountFieldNumber;
#endif  // !_MSC_VER

AsycItem::AsycItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.AsycItem)
}

void AsycItem::InitAsDefaultInstance() {
}

AsycItem::AsycItem(const AsycItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.AsycItem)
}

void AsycItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsycItem::~AsycItem() {
  // @@protoc_insertion_point(destructor:Admin.AsycItem)
  SharedDtor();
}

void AsycItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AsycItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsycItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsycItem_descriptor_;
}

const AsycItem& AsycItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

AsycItem* AsycItem::default_instance_ = NULL;

AsycItem* AsycItem::New() const {
  return new AsycItem;
}

void AsycItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AsycItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsycItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.AsycItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.AsycItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.AsycItem)
  return false;
#undef DO_
}

void AsycItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.AsycItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.AsycItem)
}

::google::protobuf::uint8* AsycItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.AsycItem)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.AsycItem)
  return target;
}

int AsycItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsycItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsycItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsycItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsycItem::MergeFrom(const AsycItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsycItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsycItem::CopyFrom(const AsycItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsycItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AsycItem::Swap(AsycItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsycItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsycItem_descriptor_;
  metadata.reflection = AsycItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AsycAdd::kItemFieldNumber;
#endif  // !_MSC_VER

AsycAdd::AsycAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.AsycAdd)
}

void AsycAdd::InitAsDefaultInstance() {
}

AsycAdd::AsycAdd(const AsycAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.AsycAdd)
}

void AsycAdd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsycAdd::~AsycAdd() {
  // @@protoc_insertion_point(destructor:Admin.AsycAdd)
  SharedDtor();
}

void AsycAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AsycAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsycAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsycAdd_descriptor_;
}

const AsycAdd& AsycAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

AsycAdd* AsycAdd::default_instance_ = NULL;

AsycAdd* AsycAdd::New() const {
  return new AsycAdd;
}

void AsycAdd::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsycAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.AsycAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Admin.AsycItem item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.AsycAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.AsycAdd)
  return false;
#undef DO_
}

void AsycAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.AsycAdd)
  // repeated .Admin.AsycItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.AsycAdd)
}

::google::protobuf::uint8* AsycAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.AsycAdd)
  // repeated .Admin.AsycItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.AsycAdd)
  return target;
}

int AsycAdd::ByteSize() const {
  int total_size = 0;

  // repeated .Admin.AsycItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsycAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsycAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsycAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsycAdd::MergeFrom(const AsycAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsycAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsycAdd::CopyFrom(const AsycAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsycAdd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void AsycAdd::Swap(AsycAdd* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsycAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsycAdd_descriptor_;
  metadata.reflection = AsycAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AsycAddResp::kRetFieldNumber;
#endif  // !_MSC_VER

AsycAddResp::AsycAddResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.AsycAddResp)
}

void AsycAddResp::InitAsDefaultInstance() {
}

AsycAddResp::AsycAddResp(const AsycAddResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.AsycAddResp)
}

void AsycAddResp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AsycAddResp::~AsycAddResp() {
  // @@protoc_insertion_point(destructor:Admin.AsycAddResp)
  SharedDtor();
}

void AsycAddResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AsycAddResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsycAddResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsycAddResp_descriptor_;
}

const AsycAddResp& AsycAddResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

AsycAddResp* AsycAddResp::default_instance_ = NULL;

AsycAddResp* AsycAddResp::New() const {
  return new AsycAddResp;
}

void AsycAddResp::Clear() {
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AsycAddResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.AsycAddResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.AsycAddResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.AsycAddResp)
  return false;
#undef DO_
}

void AsycAddResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.AsycAddResp)
  // required uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.AsycAddResp)
}

::google::protobuf::uint8* AsycAddResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.AsycAddResp)
  // required uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.AsycAddResp)
  return target;
}

int AsycAddResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsycAddResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AsycAddResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AsycAddResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AsycAddResp::MergeFrom(const AsycAddResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AsycAddResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsycAddResp::CopyFrom(const AsycAddResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsycAddResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AsycAddResp::Swap(AsycAddResp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AsycAddResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AsycAddResp_descriptor_;
  metadata.reflection = AsycAddResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestForbidTS::kUidFieldNumber;
#endif  // !_MSC_VER

RequestForbidTS::RequestForbidTS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.RequestForbidTS)
}

void RequestForbidTS::InitAsDefaultInstance() {
}

RequestForbidTS::RequestForbidTS(const RequestForbidTS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.RequestForbidTS)
}

void RequestForbidTS::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestForbidTS::~RequestForbidTS() {
  // @@protoc_insertion_point(destructor:Admin.RequestForbidTS)
  SharedDtor();
}

void RequestForbidTS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestForbidTS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestForbidTS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestForbidTS_descriptor_;
}

const RequestForbidTS& RequestForbidTS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

RequestForbidTS* RequestForbidTS::default_instance_ = NULL;

RequestForbidTS* RequestForbidTS::New() const {
  return new RequestForbidTS;
}

void RequestForbidTS::Clear() {
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestForbidTS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.RequestForbidTS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.RequestForbidTS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.RequestForbidTS)
  return false;
#undef DO_
}

void RequestForbidTS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.RequestForbidTS)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.RequestForbidTS)
}

::google::protobuf::uint8* RequestForbidTS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.RequestForbidTS)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.RequestForbidTS)
  return target;
}

int RequestForbidTS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestForbidTS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestForbidTS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestForbidTS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestForbidTS::MergeFrom(const RequestForbidTS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestForbidTS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestForbidTS::CopyFrom(const RequestForbidTS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForbidTS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RequestForbidTS::Swap(RequestForbidTS* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestForbidTS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestForbidTS_descriptor_;
  metadata.reflection = RequestForbidTS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyForbidTS::kForbidTsFieldNumber;
const int ReplyForbidTS::kReasonFieldNumber;
#endif  // !_MSC_VER

ReplyForbidTS::ReplyForbidTS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.ReplyForbidTS)
}

void ReplyForbidTS::InitAsDefaultInstance() {
}

ReplyForbidTS::ReplyForbidTS(const ReplyForbidTS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.ReplyForbidTS)
}

void ReplyForbidTS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  forbid_ts_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyForbidTS::~ReplyForbidTS() {
  // @@protoc_insertion_point(destructor:Admin.ReplyForbidTS)
  SharedDtor();
}

void ReplyForbidTS::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void ReplyForbidTS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyForbidTS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyForbidTS_descriptor_;
}

const ReplyForbidTS& ReplyForbidTS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

ReplyForbidTS* ReplyForbidTS::default_instance_ = NULL;

ReplyForbidTS* ReplyForbidTS::New() const {
  return new ReplyForbidTS;
}

void ReplyForbidTS::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    forbid_ts_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyForbidTS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.ReplyForbidTS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 forbid_ts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbid_ts_)));
          set_has_forbid_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // required bytes reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.ReplyForbidTS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.ReplyForbidTS)
  return false;
#undef DO_
}

void ReplyForbidTS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.ReplyForbidTS)
  // required uint32 forbid_ts = 1;
  if (has_forbid_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->forbid_ts(), output);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.ReplyForbidTS)
}

::google::protobuf::uint8* ReplyForbidTS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.ReplyForbidTS)
  // required uint32 forbid_ts = 1;
  if (has_forbid_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->forbid_ts(), target);
  }

  // required bytes reason = 2;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.ReplyForbidTS)
  return target;
}

int ReplyForbidTS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 forbid_ts = 1;
    if (has_forbid_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbid_ts());
    }

    // required bytes reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyForbidTS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyForbidTS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyForbidTS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyForbidTS::MergeFrom(const ReplyForbidTS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forbid_ts()) {
      set_forbid_ts(from.forbid_ts());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyForbidTS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyForbidTS::CopyFrom(const ReplyForbidTS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyForbidTS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyForbidTS::Swap(ReplyForbidTS* other) {
  if (other != this) {
    std::swap(forbid_ts_, other->forbid_ts_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyForbidTS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyForbidTS_descriptor_;
  metadata.reflection = ReplyForbidTS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetForbidTS::kUidFieldNumber;
const int SetForbidTS::kForbidTsFieldNumber;
const int SetForbidTS::kReasonFieldNumber;
#endif  // !_MSC_VER

SetForbidTS::SetForbidTS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Admin.SetForbidTS)
}

void SetForbidTS::InitAsDefaultInstance() {
}

SetForbidTS::SetForbidTS(const SetForbidTS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Admin.SetForbidTS)
}

void SetForbidTS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0u;
  forbid_ts_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetForbidTS::~SetForbidTS() {
  // @@protoc_insertion_point(destructor:Admin.SetForbidTS)
  SharedDtor();
}

void SetForbidTS::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void SetForbidTS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetForbidTS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetForbidTS_descriptor_;
}

const SetForbidTS& SetForbidTS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Admin_2eproto();
  return *default_instance_;
}

SetForbidTS* SetForbidTS::default_instance_ = NULL;

SetForbidTS* SetForbidTS::New() const {
  return new SetForbidTS;
}

void SetForbidTS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetForbidTS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, forbid_ts_);
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetForbidTS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Admin.SetForbidTS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_forbid_ts;
        break;
      }

      // required uint32 forbid_ts = 2;
      case 2: {
        if (tag == 16) {
         parse_forbid_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forbid_ts_)));
          set_has_forbid_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reason;
        break;
      }

      // required bytes reason = 3;
      case 3: {
        if (tag == 26) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Admin.SetForbidTS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Admin.SetForbidTS)
  return false;
#undef DO_
}

void SetForbidTS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Admin.SetForbidTS)
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 forbid_ts = 2;
  if (has_forbid_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->forbid_ts(), output);
  }

  // required bytes reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Admin.SetForbidTS)
}

::google::protobuf::uint8* SetForbidTS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Admin.SetForbidTS)
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 forbid_ts = 2;
  if (has_forbid_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->forbid_ts(), target);
  }

  // required bytes reason = 3;
  if (has_reason()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Admin.SetForbidTS)
  return target;
}

int SetForbidTS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 forbid_ts = 2;
    if (has_forbid_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forbid_ts());
    }

    // required bytes reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetForbidTS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetForbidTS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetForbidTS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetForbidTS::MergeFrom(const SetForbidTS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_forbid_ts()) {
      set_forbid_ts(from.forbid_ts());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetForbidTS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetForbidTS::CopyFrom(const SetForbidTS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetForbidTS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetForbidTS::Swap(SetForbidTS* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(forbid_ts_, other->forbid_ts_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetForbidTS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetForbidTS_descriptor_;
  metadata.reflection = SetForbidTS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Admin

// @@protoc_insertion_point(global_scope)
