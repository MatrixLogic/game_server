// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef PROTOBUF_Common_2eproto__INCLUDED
#define PROTOBUF_Common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Common {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Common_2eproto();
void protobuf_AssignDesc_Common_2eproto();
void protobuf_ShutdownFile_Common_2eproto();

class Login;
class Kick;
class ChangeName;
class ReplyChangeName;
class Pay;
class ReplyPay;
class NoticePay;
class ShutDown;

// ===================================================================

class Login : public ::google::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required string openkey = 3;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 3;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  inline void set_allocated_openkey(::std::string* openkey);

  // required uint32 ts = 4;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 4;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // required string sig = 5;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 5;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // required bool isnew = 6;
  inline bool has_isnew() const;
  inline void clear_isnew();
  static const int kIsnewFieldNumber = 6;
  inline bool isnew() const;
  inline void set_isnew(bool value);

  // required uint32 platform = 7;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 7;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // optional string fig = 8;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 8;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const char* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // @@protoc_insertion_point(class_scope:Common.Login)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_isnew();
  inline void clear_has_isnew();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_fig();
  inline void clear_has_fig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* openid_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 ts_;
  ::std::string* openkey_;
  ::std::string* sig_;
  bool isnew_;
  ::google::protobuf::uint32 platform_;
  ::std::string* fig_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Kick : public ::google::protobuf::Message {
 public:
  Kick();
  virtual ~Kick();

  Kick(const Kick& from);

  inline Kick& operator=(const Kick& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Kick& default_instance();

  void Swap(Kick* other);

  // implements Message ----------------------------------------------

  Kick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Kick& from);
  void MergeFrom(const Kick& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:Common.Kick)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reason_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static Kick* default_instance_;
};
// -------------------------------------------------------------------

class ChangeName : public ::google::protobuf::Message {
 public:
  ChangeName();
  virtual ~ChangeName();

  ChangeName(const ChangeName& from);

  inline ChangeName& operator=(const ChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeName& default_instance();

  void Swap(ChangeName* other);

  // implements Message ----------------------------------------------

  ChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeName& from);
  void MergeFrom(const ChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes fig = 3;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 3;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // @@protoc_insertion_point(class_scope:Common.ChangeName)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* fig_;
  ::google::protobuf::uint32 uid_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static ChangeName* default_instance_;
};
// -------------------------------------------------------------------

class ReplyChangeName : public ::google::protobuf::Message {
 public:
  ReplyChangeName();
  virtual ~ReplyChangeName();

  ReplyChangeName(const ReplyChangeName& from);

  inline ReplyChangeName& operator=(const ReplyChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyChangeName& default_instance();

  void Swap(ReplyChangeName* other);

  // implements Message ----------------------------------------------

  ReplyChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyChangeName& from);
  void MergeFrom(const ReplyChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes fig = 2;
  inline bool has_fig() const;
  inline void clear_fig();
  static const int kFigFieldNumber = 2;
  inline const ::std::string& fig() const;
  inline void set_fig(const ::std::string& value);
  inline void set_fig(const char* value);
  inline void set_fig(const void* value, size_t size);
  inline ::std::string* mutable_fig();
  inline ::std::string* release_fig();
  inline void set_allocated_fig(::std::string* fig);

  // @@protoc_insertion_point(class_scope:Common.ReplyChangeName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fig();
  inline void clear_has_fig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* fig_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static ReplyChangeName* default_instance_;
};
// -------------------------------------------------------------------

class Pay : public ::google::protobuf::Message {
 public:
  Pay();
  virtual ~Pay();

  Pay(const Pay& from);

  inline Pay& operator=(const Pay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pay& default_instance();

  void Swap(Pay* other);

  // implements Message ----------------------------------------------

  Pay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pay& from);
  void MergeFrom(const Pay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 cash = 2;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 2;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required uint32 ts = 3;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 3;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Common.Pay)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_ts();
  inline void clear_has_ts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static Pay* default_instance_;
};
// -------------------------------------------------------------------

class ReplyPay : public ::google::protobuf::Message {
 public:
  ReplyPay();
  virtual ~ReplyPay();

  ReplyPay(const ReplyPay& from);

  inline ReplyPay& operator=(const ReplyPay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyPay& default_instance();

  void Swap(ReplyPay* other);

  // implements Message ----------------------------------------------

  ReplyPay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyPay& from);
  void MergeFrom(const ReplyPay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Common.ReplyPay)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 ret_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static ReplyPay* default_instance_;
};
// -------------------------------------------------------------------

class NoticePay : public ::google::protobuf::Message {
 public:
  NoticePay();
  virtual ~NoticePay();

  NoticePay(const NoticePay& from);

  inline NoticePay& operator=(const NoticePay& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticePay& default_instance();

  void Swap(NoticePay* other);

  // implements Message ----------------------------------------------

  NoticePay* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticePay& from);
  void MergeFrom(const NoticePay& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cash = 1;
  inline bool has_cash() const;
  inline void clear_cash();
  static const int kCashFieldNumber = 1;
  inline ::google::protobuf::uint32 cash() const;
  inline void set_cash(::google::protobuf::uint32 value);

  // required uint32 vip_level = 2;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // required uint32 acc_recharge = 3;
  inline bool has_acc_recharge() const;
  inline void clear_acc_recharge();
  static const int kAccRechargeFieldNumber = 3;
  inline ::google::protobuf::uint32 acc_recharge() const;
  inline void set_acc_recharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Common.NoticePay)
 private:
  inline void set_has_cash();
  inline void clear_has_cash();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_acc_recharge();
  inline void clear_has_acc_recharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cash_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 acc_recharge_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static NoticePay* default_instance_;
};
// -------------------------------------------------------------------

class ShutDown : public ::google::protobuf::Message {
 public:
  ShutDown();
  virtual ~ShutDown();

  ShutDown(const ShutDown& from);

  inline ShutDown& operator=(const ShutDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShutDown& default_instance();

  void Swap(ShutDown* other);

  // implements Message ----------------------------------------------

  ShutDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShutDown& from);
  void MergeFrom(const ShutDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ts = 1;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 1;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // required string sign = 2;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 2;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Common.ShutDown)
 private:
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sign_;
  ::google::protobuf::uint32 ts_;
  friend void  protobuf_AddDesc_Common_2eproto();
  friend void protobuf_AssignDesc_Common_2eproto();
  friend void protobuf_ShutdownFile_Common_2eproto();

  void InitAsDefaultInstance();
  static ShutDown* default_instance_;
};
// ===================================================================


// ===================================================================

// Login

// required uint32 uid = 1;
inline bool Login::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Login::uid() const {
  // @@protoc_insertion_point(field_get:Common.Login.uid)
  return uid_;
}
inline void Login::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Common.Login.uid)
}

// required string openid = 2;
inline bool Login::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_openid() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Login::openid() const {
  // @@protoc_insertion_point(field_get:Common.Login.openid)
  return *openid_;
}
inline void Login::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set:Common.Login.openid)
}
inline void Login::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.Login.openid)
}
inline void Login::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.Login.openid)
}
inline ::std::string* Login::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.Login.openid)
  return openid_;
}
inline ::std::string* Login::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Login.openid)
}

// required string openkey = 3;
inline bool Login::has_openkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login::set_has_openkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login::clear_has_openkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& Login::openkey() const {
  // @@protoc_insertion_point(field_get:Common.Login.openkey)
  return *openkey_;
}
inline void Login::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
  // @@protoc_insertion_point(field_set:Common.Login.openkey)
}
inline void Login::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.Login.openkey)
}
inline void Login::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.Login.openkey)
}
inline ::std::string* Login::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    openkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.Login.openkey)
  return openkey_;
}
inline ::std::string* Login::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_openkey(::std::string* openkey) {
  if (openkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openkey_;
  }
  if (openkey) {
    set_has_openkey();
    openkey_ = openkey;
  } else {
    clear_has_openkey();
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Login.openkey)
}

// required uint32 ts = 4;
inline bool Login::has_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login::set_has_ts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login::clear_has_ts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 Login::ts() const {
  // @@protoc_insertion_point(field_get:Common.Login.ts)
  return ts_;
}
inline void Login::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:Common.Login.ts)
}

// required string sig = 5;
inline bool Login::has_sig() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login::set_has_sig() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login::clear_has_sig() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login::clear_sig() {
  if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& Login::sig() const {
  // @@protoc_insertion_point(field_get:Common.Login.sig)
  return *sig_;
}
inline void Login::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
  // @@protoc_insertion_point(field_set:Common.Login.sig)
}
inline void Login::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.Login.sig)
}
inline void Login::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.Login.sig)
}
inline ::std::string* Login::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.Login.sig)
  return sig_;
}
inline ::std::string* Login::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Login.sig)
}

// required bool isnew = 6;
inline bool Login::has_isnew() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login::set_has_isnew() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login::clear_has_isnew() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login::clear_isnew() {
  isnew_ = false;
  clear_has_isnew();
}
inline bool Login::isnew() const {
  // @@protoc_insertion_point(field_get:Common.Login.isnew)
  return isnew_;
}
inline void Login::set_isnew(bool value) {
  set_has_isnew();
  isnew_ = value;
  // @@protoc_insertion_point(field_set:Common.Login.isnew)
}

// required uint32 platform = 7;
inline bool Login::has_platform() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Login::set_has_platform() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Login::clear_has_platform() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Login::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 Login::platform() const {
  // @@protoc_insertion_point(field_get:Common.Login.platform)
  return platform_;
}
inline void Login::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
  // @@protoc_insertion_point(field_set:Common.Login.platform)
}

// optional string fig = 8;
inline bool Login::has_fig() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Login::set_has_fig() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Login::clear_has_fig() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Login::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& Login::fig() const {
  // @@protoc_insertion_point(field_get:Common.Login.fig)
  return *fig_;
}
inline void Login::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:Common.Login.fig)
}
inline void Login::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.Login.fig)
}
inline void Login::set_fig(const char* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.Login.fig)
}
inline ::std::string* Login::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.Login.fig)
  return fig_;
}
inline ::std::string* Login::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Login.fig)
}

// -------------------------------------------------------------------

// Kick

// required string reason = 1;
inline bool Kick::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Kick::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Kick::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Kick::clear_reason() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& Kick::reason() const {
  // @@protoc_insertion_point(field_get:Common.Kick.reason)
  return *reason_;
}
inline void Kick::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set:Common.Kick.reason)
}
inline void Kick::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.Kick.reason)
}
inline void Kick::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.Kick.reason)
}
inline ::std::string* Kick::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.Kick.reason)
  return reason_;
}
inline ::std::string* Kick::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Kick::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.Kick.reason)
}

// -------------------------------------------------------------------

// ChangeName

// required uint32 uid = 1;
inline bool ChangeName::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeName::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeName::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeName::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 ChangeName::uid() const {
  // @@protoc_insertion_point(field_get:Common.ChangeName.uid)
  return uid_;
}
inline void ChangeName::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Common.ChangeName.uid)
}

// required bytes name = 2;
inline bool ChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChangeName::name() const {
  // @@protoc_insertion_point(field_get:Common.ChangeName.name)
  return *name_;
}
inline void ChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ChangeName.name)
}
inline void ChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ChangeName.name)
}
inline void ChangeName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ChangeName.name)
}
inline ::std::string* ChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ChangeName.name)
  return name_;
}
inline ::std::string* ChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ChangeName.name)
}

// required bytes fig = 3;
inline bool ChangeName::has_fig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeName::set_has_fig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeName::clear_has_fig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeName::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ChangeName::fig() const {
  // @@protoc_insertion_point(field_get:Common.ChangeName.fig)
  return *fig_;
}
inline void ChangeName::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ChangeName.fig)
}
inline void ChangeName::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ChangeName.fig)
}
inline void ChangeName::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ChangeName.fig)
}
inline ::std::string* ChangeName::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ChangeName.fig)
  return fig_;
}
inline ::std::string* ChangeName::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChangeName::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ChangeName.fig)
}

// -------------------------------------------------------------------

// ReplyChangeName

// required bytes name = 1;
inline bool ReplyChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyChangeName::name() const {
  // @@protoc_insertion_point(field_get:Common.ReplyChangeName.name)
  return *name_;
}
inline void ReplyChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ReplyChangeName.name)
}
inline void ReplyChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ReplyChangeName.name)
}
inline void ReplyChangeName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ReplyChangeName.name)
}
inline ::std::string* ReplyChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ReplyChangeName.name)
  return name_;
}
inline ::std::string* ReplyChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyChangeName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ReplyChangeName.name)
}

// required bytes fig = 2;
inline bool ReplyChangeName::has_fig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyChangeName::set_has_fig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyChangeName::clear_has_fig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyChangeName::clear_fig() {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_->clear();
  }
  clear_has_fig();
}
inline const ::std::string& ReplyChangeName::fig() const {
  // @@protoc_insertion_point(field_get:Common.ReplyChangeName.fig)
  return *fig_;
}
inline void ReplyChangeName::set_fig(const ::std::string& value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ReplyChangeName.fig)
}
inline void ReplyChangeName::set_fig(const char* value) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ReplyChangeName.fig)
}
inline void ReplyChangeName::set_fig(const void* value, size_t size) {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  fig_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ReplyChangeName.fig)
}
inline ::std::string* ReplyChangeName::mutable_fig() {
  set_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fig_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ReplyChangeName.fig)
  return fig_;
}
inline ::std::string* ReplyChangeName::release_fig() {
  clear_has_fig();
  if (fig_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fig_;
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyChangeName::set_allocated_fig(::std::string* fig) {
  if (fig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fig_;
  }
  if (fig) {
    set_has_fig();
    fig_ = fig;
  } else {
    clear_has_fig();
    fig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ReplyChangeName.fig)
}

// -------------------------------------------------------------------

// Pay

// required uint32 uid = 1;
inline bool Pay::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pay::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pay::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pay::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Pay::uid() const {
  // @@protoc_insertion_point(field_get:Common.Pay.uid)
  return uid_;
}
inline void Pay::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:Common.Pay.uid)
}

// required uint32 cash = 2;
inline bool Pay::has_cash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pay::set_has_cash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pay::clear_has_cash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pay::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 Pay::cash() const {
  // @@protoc_insertion_point(field_get:Common.Pay.cash)
  return cash_;
}
inline void Pay::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:Common.Pay.cash)
}

// required uint32 ts = 3;
inline bool Pay::has_ts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pay::set_has_ts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pay::clear_has_ts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pay::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 Pay::ts() const {
  // @@protoc_insertion_point(field_get:Common.Pay.ts)
  return ts_;
}
inline void Pay::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:Common.Pay.ts)
}

// -------------------------------------------------------------------

// ReplyPay

// required uint32 ret = 1;
inline bool ReplyPay::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyPay::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyPay::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyPay::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ReplyPay::ret() const {
  // @@protoc_insertion_point(field_get:Common.ReplyPay.ret)
  return ret_;
}
inline void ReplyPay::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Common.ReplyPay.ret)
}

// optional bytes name = 2;
inline bool ReplyPay::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyPay::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyPay::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyPay::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReplyPay::name() const {
  // @@protoc_insertion_point(field_get:Common.ReplyPay.name)
  return *name_;
}
inline void ReplyPay::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ReplyPay.name)
}
inline void ReplyPay::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ReplyPay.name)
}
inline void ReplyPay::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ReplyPay.name)
}
inline ::std::string* ReplyPay::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ReplyPay.name)
  return name_;
}
inline ::std::string* ReplyPay::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyPay::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ReplyPay.name)
}

// -------------------------------------------------------------------

// NoticePay

// required uint32 cash = 1;
inline bool NoticePay::has_cash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticePay::set_has_cash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticePay::clear_has_cash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticePay::clear_cash() {
  cash_ = 0u;
  clear_has_cash();
}
inline ::google::protobuf::uint32 NoticePay::cash() const {
  // @@protoc_insertion_point(field_get:Common.NoticePay.cash)
  return cash_;
}
inline void NoticePay::set_cash(::google::protobuf::uint32 value) {
  set_has_cash();
  cash_ = value;
  // @@protoc_insertion_point(field_set:Common.NoticePay.cash)
}

// required uint32 vip_level = 2;
inline bool NoticePay::has_vip_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticePay::set_has_vip_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticePay::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticePay::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 NoticePay::vip_level() const {
  // @@protoc_insertion_point(field_get:Common.NoticePay.vip_level)
  return vip_level_;
}
inline void NoticePay::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
  // @@protoc_insertion_point(field_set:Common.NoticePay.vip_level)
}

// required uint32 acc_recharge = 3;
inline bool NoticePay::has_acc_recharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NoticePay::set_has_acc_recharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NoticePay::clear_has_acc_recharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NoticePay::clear_acc_recharge() {
  acc_recharge_ = 0u;
  clear_has_acc_recharge();
}
inline ::google::protobuf::uint32 NoticePay::acc_recharge() const {
  // @@protoc_insertion_point(field_get:Common.NoticePay.acc_recharge)
  return acc_recharge_;
}
inline void NoticePay::set_acc_recharge(::google::protobuf::uint32 value) {
  set_has_acc_recharge();
  acc_recharge_ = value;
  // @@protoc_insertion_point(field_set:Common.NoticePay.acc_recharge)
}

// -------------------------------------------------------------------

// ShutDown

// required uint32 ts = 1;
inline bool ShutDown::has_ts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShutDown::set_has_ts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShutDown::clear_has_ts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShutDown::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 ShutDown::ts() const {
  // @@protoc_insertion_point(field_get:Common.ShutDown.ts)
  return ts_;
}
inline void ShutDown::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:Common.ShutDown.ts)
}

// required string sign = 2;
inline bool ShutDown::has_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShutDown::set_has_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShutDown::clear_has_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShutDown::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ShutDown::sign() const {
  // @@protoc_insertion_point(field_get:Common.ShutDown.sign)
  return *sign_;
}
inline void ShutDown::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Common.ShutDown.sign)
}
inline void ShutDown::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Common.ShutDown.sign)
}
inline void ShutDown::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Common.ShutDown.sign)
}
inline ::std::string* ShutDown::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Common.ShutDown.sign)
  return sign_;
}
inline ::std::string* ShutDown::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShutDown::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Common.ShutDown.sign)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Common_2eproto__INCLUDED
